:js

:silent
:import NofibPrelude.mls


fun integerbench(op, astart, astep, alim, bstart, bstep, blim) =
  fun lscomp1(ls) = if ls is
    Nil then Nil
    a :: t1 then
      fun lscomp2(ls) = if ls is
        Nil then lscomp1(t1)
        b :: t2 then op(a, b) :: lscomp2(t2)
      lscomp2(enumFromThenTo(bstart, bstart + bstep, blim))
  
  lscomp1(enumFromThenTo(astart, astart + astep, alim))

fun intbench(op, astart, astep, alim, bstart, bstep, blim) =
  fun lscomp1(ls) = if ls is
    Nil then Nil
    a :: t1 then
      fun lscomp2(ls) = if ls is
        Nil then lscomp1(t1)
        b :: t2 then op(a, b) :: lscomp2(t2)
      lscomp2(enumFromThenTo(bstart, bstart + bstep, blim))
  
  lscomp1(enumFromThenTo(astart, astart + astep, alim))

fun runbench(jop, iop, opstr, astart, astep, alim, bstart, bstep, blim) =
  intbench(iop, astart, astep, alim, astart, astep, alim);
  integerbench(jop, astart, astep, alim, astart, astep, alim)

fun runalltests(astart, astep, alim, bstart, bstep, blim) =
  fun z_add(a, b) = a + b
  fun z_sub(a, b) = a - b
  fun z_mul(a, b) = a * b
  fun z_div(a, b) = intDiv(a, b)
  fun z_mod(a, b) = intMod(a, b)
  fun z_equal(a, b) = a == b
  fun z_lt(a, b) = a < b
  fun z_leq(a, b) = a <= b
  fun z_gt(a, b) = a > b
  fun z_geq(a, b) = a >= b
  
  runbench((a, b) => z_add(a, b), (a, b) => a + b, "(+)", astart, astep, alim, astart, astep, alim);
  runbench((a, b) => z_sub(a, b), (a, b) => a - b, "(-)", astart, astep, alim, astart, astep, alim);
  runbench((a, b) => z_mul(a, b), (a, b) => a * b, "(*)", astart, astep, alim, astart, astep, alim);
  runbench((a, b) => z_div(a, b), (a, b) => intDiv(a, b), "div", astart, astep, alim, astart, astep, alim);
  runbench((a, b) => z_mod(a, b), (a, b) => intMod(a, b), "mod", astart, astep, alim, astart, astep, alim);
  runbench((a, b) => z_equal(a, b), (a, b) => a == b, "(==)", astart, astep, alim, astart, astep, alim);
  runbench((a, b) => z_lt(a, b), (a, b) => a < b, "(<)", astart, astep, alim, astart, astep, alim);
  runbench((a, b) => z_leq(a, b), (a, b) => a <= b, "(<=)", astart, astep, alim, astart, astep, alim);
  runbench((a, b) => z_gt(a, b), (a, b) => a > b, "(>)", astart, astep, alim, astart, astep, alim);
  runbench((a, b) => z_geq(a, b), (a, b) => a >= b, "(>=)", astart, astep, alim, astart, astep, alim)

fun testInteger_nofib(n) = runalltests(-2100000000, n, 2100000000, -2100000000, n, -2100000000)


// NOTE: original input -2100000000 14000001 2100000000
testInteger_nofib(700000001).toString()
//â”‚ = "[true,false,false,false,false,false,true,true,false,false,false,false,true,true,true,false,false,false,true,true,true,true,false,false,true,true,true,true,true,false,true,true,true,true,true,true]"
