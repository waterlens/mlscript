
:global
:llir
:cpp


:scpp
:sllir
fun foo(a) =
  let x
  if a > 0 do
    x = 1
  x + 1
//│ LLIR:
//│   
//│   def foo$195(a$196) =
//│     let x$245 = null in
//│     let x$246 = >(a$196,0) in
//│     case x$246 of
//│       BoolLit(true) =>
//│         let x$248 = 1 in
//│         let x$249 = undefined in
//│         jump j$247(x$248)
//│       _ =>
//│         let x$250 = undefined in
//│         jump j$247(x$245)
//│   def j$247(x$197) =
//│     let x$251 = +(x$197,1) in
//│     x$251
//│   undefined
//│ 
//│ Cpp:
//│ #include "mlsprelude.h"
//│ struct Tuple4;
//│ struct Tuple3;
//│ struct Tuple2;
//│ struct Tuple8;
//│ struct Tuple0;
//│ struct Tuple1;
//│ struct Tuple7;
//│ struct Tuple6;
//│ struct Tuple9;
//│ struct Tuple5;
//│ _mlsValue j(_mlsValue);
//│ _mlsValue foo(_mlsValue);
//│ _mlsValue _mlsMain();
//│ struct Tuple4: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   constexpr static inline const char *typeName = "Tuple4";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple4; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple3: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   constexpr static inline const char *typeName = "Tuple3";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple3; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple2: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   constexpr static inline const char *typeName = "Tuple2";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple2; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple8: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   _mlsValue field4;
//│   _mlsValue field5;
//│   _mlsValue field6;
//│   _mlsValue field7;
//│   constexpr static inline const char *typeName = "Tuple8";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print(); std::printf(", "); this->field4.print(); std::printf(", "); this->field5.print(); std::printf(", "); this->field6.print(); std::printf(", "); this->field7.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3); _mlsValue::destroy(this->field4); _mlsValue::destroy(this->field5); _mlsValue::destroy(this->field6); _mlsValue::destroy(this->field7);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3, _mlsValue field4, _mlsValue field5, _mlsValue field6, _mlsValue field7) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple8; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3; _mlsVal->field4 = field4; _mlsVal->field5 = field5; _mlsVal->field6 = field6; _mlsVal->field7 = field7;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple0: public _mlsObject {
//│   
//│   constexpr static inline const char *typeName = "Tuple0";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); }
//│   virtual void destroy() override {  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create() { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple0; _mlsVal->refCount = 1; _mlsVal->tag = typeTag;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple1: public _mlsObject {
//│   _mlsValue field0;
//│   constexpr static inline const char *typeName = "Tuple1";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple1; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple7: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   _mlsValue field4;
//│   _mlsValue field5;
//│   _mlsValue field6;
//│   constexpr static inline const char *typeName = "Tuple7";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print(); std::printf(", "); this->field4.print(); std::printf(", "); this->field5.print(); std::printf(", "); this->field6.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3); _mlsValue::destroy(this->field4); _mlsValue::destroy(this->field5); _mlsValue::destroy(this->field6);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3, _mlsValue field4, _mlsValue field5, _mlsValue field6) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple7; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3; _mlsVal->field4 = field4; _mlsVal->field5 = field5; _mlsVal->field6 = field6;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple6: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   _mlsValue field4;
//│   _mlsValue field5;
//│   constexpr static inline const char *typeName = "Tuple6";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print(); std::printf(", "); this->field4.print(); std::printf(", "); this->field5.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3); _mlsValue::destroy(this->field4); _mlsValue::destroy(this->field5);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3, _mlsValue field4, _mlsValue field5) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple6; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3; _mlsVal->field4 = field4; _mlsVal->field5 = field5;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple9: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   _mlsValue field4;
//│   _mlsValue field5;
//│   _mlsValue field6;
//│   _mlsValue field7;
//│   _mlsValue field8;
//│   constexpr static inline const char *typeName = "Tuple9";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print(); std::printf(", "); this->field4.print(); std::printf(", "); this->field5.print(); std::printf(", "); this->field6.print(); std::printf(", "); this->field7.print(); std::printf(", "); this->field8.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3); _mlsValue::destroy(this->field4); _mlsValue::destroy(this->field5); _mlsValue::destroy(this->field6); _mlsValue::destroy(this->field7); _mlsValue::destroy(this->field8);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3, _mlsValue field4, _mlsValue field5, _mlsValue field6, _mlsValue field7, _mlsValue field8) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple9; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3; _mlsVal->field4 = field4; _mlsVal->field5 = field5; _mlsVal->field6 = field6; _mlsVal->field7 = field7; _mlsVal->field8 = field8;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple5: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   _mlsValue field4;
//│   constexpr static inline const char *typeName = "Tuple5";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print(); std::printf(", "); this->field4.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3); _mlsValue::destroy(this->field4);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3, _mlsValue field4) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple5; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3; _mlsVal->field4 = field4;  return _mlsValue(_mlsVal); }
//│ };
//│ _mlsValue j(_mlsValue x1) {
//│   _mlsValue _mls_retval;
//│   auto x = (x1 + _mlsValue::fromIntLit(1));
//│   _mls_retval = x;
//│   return _mls_retval;
//│ }
//│ _mlsValue foo(_mlsValue a) {
//│   _mlsValue _mls_retval;
//│   auto x2 = _mlsValue::create<_mls_Unit>();
//│   auto x3 = (a > _mlsValue::fromIntLit(0));
//│   if (_mlsValue::isIntLit(x3, 1)) {
//│     auto x5 = _mlsValue::fromIntLit(1);
//│     auto x6 = _mlsValue::create<_mls_Unit>();
//│     _mls_retval = j(x5);
//│   } else {
//│     auto x4 = _mlsValue::create<_mls_Unit>();
//│     _mls_retval = j(x2);
//│   }
//│   return _mls_retval;
//│ }
//│ _mlsValue _mlsMain() {
//│   _mlsValue _mls_retval;
//│   _mls_retval = _mlsValue::create<_mls_Unit>();
//│   return _mls_retval;
//│ }
//│ int main() { return _mlsLargeStack(_mlsMainWrapper); }


