:js
:llir
:cpp

:global

:sllir
:intl
fun f1() =
  let x = 1
  let x = 2
  x
f1()
//│ = 2
//│ LLIR:
//│   
//│   def f1$249() =
//│     let x$310 = 1 in
//│     let x$311 = 2 in
//│     x$311
//│   let* (x$312) = f1() in
//│   x$312
//│ 
//│ Interpreted:
//│ 2

:sllir
:intl
fun f2() =
  let x = 0
  if x == 1 then 2 else 3
f2()
//│ = 3
//│ LLIR:
//│   
//│   def f2$313() =
//│     let x$375 = 0 in
//│     let x$376 = ==(x$375,1) in
//│     case x$376 of
//│       BoolLit(true) =>
//│         2
//│       _ =>
//│         3
//│   def j$377() =
//│     null
//│   let* (x$378) = f2() in
//│   x$378
//│ 
//│ Interpreted:
//│ 3


:sllir
fun f3() =
  let x1 = 0
  let x2 = 1
  if true then x1 else x2
f3()
//│ = 0
//│ LLIR:
//│   
//│   def f3$379() =
//│     let x$441 = 0 in
//│     let x$442 = 1 in
//│     let x$443 = true in
//│     case x$443 of
//│       BoolLit(true) =>
//│         x$441
//│       _ =>
//│         x$442
//│   def j$444() =
//│     null
//│   let* (x$445) = f3() in
//│   x$445


:sllir
:intl
fun f4() =
  let x = 0
  let x = if x == 1 then 2 else 3
  x
f4()
//│ = 3
//│ LLIR:
//│   
//│   def f4$446() =
//│     let x$511 = 0 in
//│     let x$512 = ==(x$511,1) in
//│     case x$512 of
//│       BoolLit(true) =>
//│         let x$514 = 2 in
//│         jump j$513(x$514)
//│       _ =>
//│         let x$515 = 3 in
//│         jump j$513(x$515)
//│   def j$513(tmp$457) =
//│     tmp$457
//│   let* (x$516) = f4() in
//│   x$516
//│ 
//│ Interpreted:
//│ 3

:sllir
:intl
fun f5() =
  let x = 0
  let x = if x == 1 then 2 else 3
  let x = if x == 2 then 4 else 5
  x
f5()
//│ = 5
//│ LLIR:
//│   
//│   def f5$517() =
//│     let x$587 = 0 in
//│     let x$588 = ==(x$587,1) in
//│     case x$588 of
//│       BoolLit(true) =>
//│         let x$590 = 2 in
//│         jump j$589(x$590)
//│       _ =>
//│         let x$591 = 3 in
//│         jump j$589(x$591)
//│   def j$589(tmp$532) =
//│     let x$592 = ==(tmp$532,2) in
//│     case x$592 of
//│       BoolLit(true) =>
//│         let x$594 = 4 in
//│         jump j$593(x$594)
//│       _ =>
//│         let x$595 = 5 in
//│         jump j$593(x$595)
//│   def j$593(tmp$533) =
//│     tmp$533
//│   let* (x$596) = f5() in
//│   x$596
//│ 
//│ Interpreted:
//│ 5

:sllir
:scpp
fun test() =
  if true do test()
//│ LLIR:
//│   
//│   def test$597() =
//│     let x$657 = true in
//│     case x$657 of
//│       BoolLit(true) =>
//│         let* (x$659) = test() in
//│         x$659
//│       _ =>
//│         undefined
//│   def j$658() =
//│     null
//│   undefined
//│ 
//│ Cpp:

:sllir
:scpp
fun test() =
  (if true then test()) + 1
//│ LLIR:
//│   
//│   def test$660() =
//│     let x$723 = true in
//│     case x$723 of
//│       BoolLit(true) =>
//│         let* (x$725) = test() in
//│         jump j$724(x$725)
//│       _ =>
//│         panic "match error"
//│   def j$724(tmp$670) =
//│     let x$726 = +(tmp$670,1) in
//│     x$726
//│   undefined
//│ 
//│ Cpp:


:sllir
:intl
:scpp
fun f() =
  let x = 10
  if true do
    set x += 1
  x
f()
//│ = 11
//│ LLIR:
//│   
//│   def f$727() =
//│     let x$793 = 10 in
//│     let x$794 = true in
//│     case x$794 of
//│       BoolLit(true) =>
//│         let x$796 = +(x$793,1) in
//│         let x$797 = undefined in
//│         jump j$795(x$796)
//│       _ =>
//│         let x$798 = undefined in
//│         jump j$795(x$793)
//│   def j$795(x$728) =
//│     x$728
//│   let* (x$799) = f() in
//│   x$799
//│ 
//│ Cpp:
//│ 
//│ Interpreted:
//│ 11

:sllir
:intl
class A(x)
class B(y)
fun f(a) =
  let t = if a is
    A(_) then 1
    B(_) then 2
  t
f(A(1))
//│ = 1
//│ LLIR:
//│   class A(x$805)
//│   class B(y$808)
//│   def f$802(a$809) =
//│     case a$809 of
//│       A$803 =>
//│         let x$881 = a$809.<A$803:x> in
//│         let x$882 = 1 in
//│         jump j$880(x$882)
//│       _ =>
//│         case a$809 of
//│           B$806 =>
//│             let x$884 = a$809.<B$806:y> in
//│             let x$885 = 2 in
//│             jump j$883(x$885)
//│           _ =>
//│             panic "match error"
//│   def j$883(tmp$824) =
//│     jump j$880(tmp$824)
//│   def j$880(tmp$824) =
//│     tmp$824
//│   let x$886 = A$803(1) in
//│   let* (x$887) = f(x$886) in
//│   x$887
//│ 
//│ Interpreted:
//│ 1

:sllir
:intl
class A(x)
class B(y)
fun f(a) =
  let t = if a is
    A(_) then if a is
      A(1) then 1
      B(_) then 2
    B(_) then 3
  t
f(A(1))
//│ = 1
//│ LLIR:
//│   class A(x$893)
//│   class B(y$896)
//│   def f$890(a$897) =
//│     case a$897 of
//│       A$891 =>
//│         let x$973 = a$897.<A$891:x> in
//│         case a$897 of
//│           A$891 =>
//│             let x$975 = a$897.<A$891:x> in
//│             case x$975 of
//│               IntLit(1) =>
//│                 let x$977 = 1 in
//│                 jump j$976(x$977)
//│               _ =>
//│                 panic "match error"
//│           _ =>
//│             case a$897 of
//│               B$894 =>
//│                 let x$979 = a$897.<B$894:y> in
//│                 let x$980 = 2 in
//│                 jump j$978(x$980)
//│               _ =>
//│                 panic "match error"
//│       _ =>
//│         case a$897 of
//│           B$894 =>
//│             let x$982 = a$897.<B$894:y> in
//│             let x$983 = 3 in
//│             jump j$981(x$983)
//│           _ =>
//│             panic "match error"
//│   def j$976(tmp$915) =
//│     jump j$974(tmp$915)
//│   def j$978(tmp$915) =
//│     jump j$974(tmp$915)
//│   def j$974(tmp$915) =
//│     jump j$972(tmp$915)
//│   def j$981(tmp$916) =
//│     jump j$972(tmp$916)
//│   def j$972(tmp$916) =
//│     tmp$916
//│   let x$984 = A$891(1) in
//│   let* (x$985) = f(x$984) in
//│   x$985
//│ 
//│ Interpreted:
//│ 1
