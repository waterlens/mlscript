:js

:silent
:import NofibPrelude.mls

:silent
import "fs"

fun z_of_int(x) = globalThis.BigInt(x)
fun string_of_z(x) = nofibStringToList(x + "")
fun z_add(x, y) = x + y
fun z_mul(x, y) = x * y
fun z_sub(x, y) = x - y
fun z_div(x, y) = x / y
fun z_mod(x, y) = x % y
fun z_equal(x, y) = x === y
fun z_sqr(x) = x * x
fun int_if_char(c) = c.codePointAt(0)

let const0 = z_of_int(0)
//│ const0 = 0

let const31 = z_of_int(31)
//│ const31 = 31

let const1 = z_of_int(1)
//│ const1 = 1

let const2 = z_of_int(2)
//│ const2 = 2

let const128 = z_of_int(128)
//│ const128 = 128

fun hash(str) = foldl of
  (acc, c) => z_add(z_of_int(int_if_char(c)), z_mul(acc, const31))
  const0
  str

fun and_(ls) = if ls is
  Nil then true
  h :: t and
    h then and_(t)
    else false

fun unlines(ls) = concat of map(l => l +: ("\n" :: Nil), ls)

fun even(a) = z_mod(a, const2) === const0

fun code(ls) = foldl of
  (x, y) => z_add(z_mul(const128, x), z_of_int(int_if_char(y)))
  const0
  ls

fun collect(n, xs) = if
  n === 0 then Nil
  xs is Nil then Nil
  else take(n, xs) :: collect(n, drop(n, xs))

fun size(n) = intDiv(listLen(string_of_z(n)) * 47, 100)

fun encrypt(n, e, s) = unlines of map of
  c => string_of_z(power(e, n, code(c)))
  collect(size(n), s)
fun power(n, m, x) = if
  z_equal(n, const0) then const1
  even(n) then z_mod(z_sqr(power(z_div(n, const2), m, x)), m)
  else z_mod(z_mul(x, power(z_sub(n, const1), m, x)), m)

let intput = nofibStringToList of fs.readFileSync("hkmc2/shared/src/test/mlscript/nofib/input/rsa.faststdin").toString()
//│ intput = ["m","o","d","u","l","e"," ","R","s","a"," ","(","e","n","c","r","y","p","t",","," ","d","e","c","r","y","p","t",","," ","m","a","k","e","K","e","y","s",")","\n","w","h","e","r","e","\n","\n","\n","e","n","c","r","y","p","t",","," ","d","e","c","r","y","p","t"," ",":",":"," ","I","n","t","e","g","e","r"," ","-",">"," ","I","n","t","e","g","e","r"," ","-",">"," ","S","t","r","i","n","g"," ","-",">"," ","S","t","r","i","n","g","\n","e","n","c","r","y","p","t"," ","n"," ","e"," ","="," ","u","n","l","i","n","e","s"," ","."," ","m","a","p"," ","(","s","h","o","w"," ","."," ","p","o","w","e","r"," ","e"," ","n"," ","."," ","c","o","d","e",")"," ","."," ","c","o","l","l","e","c","t"," ","(","s","i","z","e"," ","n",")","\n","d","e","c","r","y","p","t"," ","n"," ","d"," ","="," ","c","o","n","c","a","t"," ","."," ","m","a","p"," ","(","d","e","c","o","d","e"," ","."," ","p","o","w","e","r"," ","d"," ","n"," ","."," ","r","e","a","d",")"," ","."," ","l","i","n","e","s","\n","\n","-","-","-","-","-","-","-","-"," ","C","o","n","v","e","r","t","i","n","g"," ","b","e","t","w","e","e","n"," ","S","t","r","i","n","g","s"," ","a","n","d"," ","I","n","t","e","g","e","r","s"," ","-","-","-","-","-","-","-","-","-","-","-","\n","\n","c","o","d","e"," ",":",":"," ","S","t","r","i","n","g"," ","-",">"," ","I","n","t","e","g","e","r","\n","c","o","d","e"," ","="," ","f","o","l","d","l"," ","a","c","c","u","m"," ","0","\n"," "," ","w","h","e","r","e"," ","a","c","c","u","m"," ","x"," ","y"," ","="," ","(","1","2","8"," ","*"," ","x",")"," ","+"," ","f","r","o","m","I","n","t","e","g","r","a","l"," ","(","f","r","o","m","E","n","u","m"," ","y",")","\n"]

fun testRsa_nofib(_) = hash(encrypt(
  z_of_int("2036450659413645137870851576872812267542175329986469156678671505255564383842535488743101632280716717779536712424613501441720195827856504007305662157107"),
  z_of_int("387784473137902876992546516170169092918207676456888779623592396031349415024943784869634893342729620092877891356118467738167515879252473323905128540213"),
  intput
))

testRsa_nofib(0)
//│ = 27333540773077035891319648583115426924319682304972207061138531859687685497972324052329603672575247712822051033469833084249533708345668063349995687590898179232348381885068093916042332376874471111951277359240086024689478630903872483533692492045159120070581960228683268092981264305946420008131657132188411691046890656423813430758797867405414254427252889799598265252801351427969270327221859277538276931835433884202770274573975497479910055419604950116998779489424711382329456954759006285308055617249211518517251626537584144819963887585424355716160948313809816237911911714261525254960504461968887058634176692781918761529885191647640353988451378487593523928746420834635489374763284035135024554501992592243054651704669361294874639088141090295124111150498567814209355019358035109087855352831799613561922371560229756096541243234407756387955273981612894548796096568181979612805473591487774278882312329731123289196221054300160041623910405907021509065754120986913156062146884015988300349866352421512547114991188706014109057361892879580430212109312752658248376273202302160796406164353595904770530340704402942462200108055227350082862003023696909347848580847463903352486983305887517122394068078234691266091519485573727824252527733372590392886198860292659649377855405883044150450559660371076194186374359910112808222171852893169058046390627297042238730809765588373104750
