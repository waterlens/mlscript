:llir

:import NofibPrelude.mls
//│ Imported 104 member(s)


fun infRand(m, s) =
  fun f(x) = lazy(() => LzCons((intMod(x, m) + 1), f(intMod((97 * x + 11), power(2, 7)))))
  
  f(s)


fun simulate(n, m, proc) =
  fun lscomp(ls) = if ls is
    Nil then Nil
    seed :: t then proc(infRand(m, seed)) :: lscomp(t)
  
  floatOfInt(listLen(filter(x => x, lscomp(enumFromTo(1, n))))) / floatOfInt(n)


fun sim(n, k) =
  fun proc(rs) =
    let xs = take_lz(100, nub_lz(rs))
    let best = 100
    let bestk = maximum(take(k, xs))
    let afterk = dropWhile(x => x < bestk, drop(k, xs))
    listEq(best :: Nil, take(1, afterk))
  
  simulate(n, 100, proc)


fun testSecretary_nofib(n) =
  fun listcomp(ls) = if ls is
    Nil then Nil
    h :: t then sim(n, h) :: listcomp(t)
  
  listcomp(enumFromTo(35, 39))


:wholeOpt
:wholeOptFlags simp,!split
:runWholeCpp
print(testSecretary_nofib(50))
//│ 
//│ 
//│ Execution succeeded: 
//│ Cons(Float(0.300000), Cons(Float(0.300000), Cons(Float(0.300000), Cons(Float(0.340000), Cons(Float(0.360000), Nil)))))
//│ Unit
