:js
:llir

:sllir
:intl
abstract class Option[out T]: Some[T] | None
class Some[out T](x: T) extends Option[T]
object None extends Option
fun fromSome(s) = if s is Some(x) then x
abstract class Nat: S[Nat] | O
class S(s: Nat) extends Nat
object O extends Nat
fun aaa() =
  let m = 1
  let n = 2
  let p = 3
  let q = 4
  m + n - p + q
fun bbb() =
  let x = aaa()
  x * 100 + 4
fun not(x) =
  if x then false else true
fun foo(x) =
  if x then None
       else Some(foo(not(x)))
fun main() =
  let x = foo(false)
  if x is
    None then aaa()
    Some(b1) then bbb()
main()
//│ = 404
//│ LLIR:
//│   class Option()
//│   class Some(x) extends Option
//│   class None() extends Option
//│   class Nat()
//│   class S(s) extends Nat
//│   class O() extends Nat
//│   def fromSome(s) =
//│     case s of
//│       Some =>
//│         let x$0 = s.<Some:x> in
//│         x$0
//│       _ =>
//│         panic "match error"
//│   def j$0() =
//│     null
//│   def aaa() =
//│     let x$1 = 1 in
//│     let x$2 = 2 in
//│     let x$3 = 3 in
//│     let x$4 = 4 in
//│     let x$5 = +(x$1,x$2) in
//│     let x$6 = -(x$5,x$3) in
//│     let x$7 = +(x$6,x$4) in
//│     x$7
//│   def bbb() =
//│     let* (x$8) = aaa() in
//│     let x$9 = *(x$8,100) in
//│     let x$10 = +(x$9,4) in
//│     x$10
//│   def not(x2) =
//│     case x2 of
//│       BoolLit(true) =>
//│         false
//│       _ =>
//│         true
//│   def j$1() =
//│     null
//│   def foo(x3) =
//│     case x3 of
//│       BoolLit(true) =>
//│         let x$11 = None() in
//│         x$11
//│       _ =>
//│         let* (x$12) = not(x3) in
//│         let* (x$13) = foo(x$12) in
//│         let x$14 = Some(x$13) in
//│         x$14
//│   def j$2() =
//│     null
//│   def main() =
//│     let* (x$15) = foo(false) in
//│     case x$15 of
//│       None =>
//│         let* (x$16) = aaa() in
//│         x$16
//│       _ =>
//│         case x$15 of
//│           Some =>
//│             let x$17 = x$15.<Some:x> in
//│             let* (x$18) = bbb() in
//│             x$18
//│           _ =>
//│             panic "match error"
//│   def j$4() =
//│     jump j$3()
//│   def j$3() =
//│     null
//│   let* (x$19) = main() in
//│   x$19
//│ 
//│ Interpreted:
//│ 404
