:js
:llir
:cpp

:global

:sllir
:intl
fun f1() =
  let x = 1
  let x = 2
  x
f1()
//│ = 2
//│ LLIR:
//│   
//│   def f1$218() =
//│     let x$227 = 1 in
//│     let x$228 = 2 in
//│     x$228
//│   let* (x$229) = f1() in
//│   x$229
//│ 
//│ Interpreted:
//│ 2

:sllir
:intl
fun f2() =
  let x = 0
  if x == 1 then 2 else 3
f2()
//│ = 3
//│ LLIR:
//│   
//│   def f2$230() =
//│     let x$240 = 0 in
//│     let x$241 = ==(x$240,1) in
//│     case x$241 of
//│       BoolLit(true) =>
//│         2
//│       _ =>
//│         3
//│   def j$242() =
//│     null
//│   let* (x$243) = f2() in
//│   x$243
//│ 
//│ Interpreted:
//│ 3


:sllir
fun f3() =
  let x1 = 0
  let x2 = 1
  if true then x1 else x2
f3()
//│ = 0
//│ LLIR:
//│   
//│   def f3$244() =
//│     let x$254 = 0 in
//│     let x$255 = 1 in
//│     let x$256 = true in
//│     case x$256 of
//│       BoolLit(true) =>
//│         x$254
//│       _ =>
//│         x$255
//│   def j$257() =
//│     null
//│   let* (x$258) = f3() in
//│   x$258


:sllir
:intl
fun f4() =
  let x = 0
  let x = if x == 1 then 2 else 3
  x
f4()
//│ = 3
//│ LLIR:
//│   
//│   def f4$259() =
//│     let x$272 = 0 in
//│     let x$273 = ==(x$272,1) in
//│     case x$273 of
//│       BoolLit(true) =>
//│         let x$275 = 2 in
//│         jump j$274(x$275)
//│       _ =>
//│         let x$276 = 3 in
//│         jump j$274(x$276)
//│   def j$274(tmp$270) =
//│     tmp$270
//│   let* (x$277) = f4() in
//│   x$277
//│ 
//│ Interpreted:
//│ 3

:sllir
:intl
fun f5() =
  let x = 0
  let x = if x == 1 then 2 else 3
  let x = if x == 2 then 4 else 5
  x
f5()
//│ = 5
//│ LLIR:
//│   
//│   def f5$278() =
//│     let x$296 = 0 in
//│     let x$297 = ==(x$296,1) in
//│     case x$297 of
//│       BoolLit(true) =>
//│         let x$299 = 2 in
//│         jump j$298(x$299)
//│       _ =>
//│         let x$300 = 3 in
//│         jump j$298(x$300)
//│   def j$298(tmp$293) =
//│     let x$301 = ==(tmp$293,2) in
//│     case x$301 of
//│       BoolLit(true) =>
//│         let x$303 = 4 in
//│         jump j$302(x$303)
//│       _ =>
//│         let x$304 = 5 in
//│         jump j$302(x$304)
//│   def j$302(tmp$294) =
//│     tmp$294
//│   let* (x$305) = f5() in
//│   x$305
//│ 
//│ Interpreted:
//│ 5

:sllir
:scpp
fun test() =
  if true do test()
//│ LLIR:
//│   
//│   def test$306() =
//│     let x$314 = true in
//│     case x$314 of
//│       BoolLit(true) =>
//│         let* (x$316) = test() in
//│         x$316
//│       _ =>
//│         undefined
//│   def j$315() =
//│     null
//│   undefined
//│ 
//│ Cpp:
//│ #include "mlsprelude.h"
//│ _mlsValue _mls_j5();
//│ _mlsValue _mls_test();
//│ _mlsValue _mlsMain();
//│ _mlsValue _mls_j5() {
//│   _mlsValue _mls_retval;
//│   _mls_retval = _mlsValue::create<_mls_Unit>();
//│   return _mls_retval;
//│ }
//│ _mlsValue _mls_test() {
//│   _mlsValue _mls_retval;
//│   auto _mls_x23 = _mlsValue::fromIntLit(1);
//│   if (_mlsValue::isIntLit(_mls_x23, 1)) {
//│     auto _mls_x24 = _mls_test();
//│     _mls_retval = _mls_x24;
//│   } else {
//│     _mls_retval = _mlsValue::create<_mls_Unit>();
//│   }
//│   return _mls_retval;
//│ }
//│ _mlsValue _mlsMain() {
//│   _mlsValue _mls_retval;
//│   _mls_retval = _mlsValue::create<_mls_Unit>();
//│   return _mls_retval;
//│ }
//│ int main() { return _mlsLargeStack(_mlsMainWrapper); }

:sllir
:scpp
fun test() =
  (if true then test()) + 1
//│ LLIR:
//│   
//│   def test$317() =
//│     let x$328 = true in
//│     case x$328 of
//│       BoolLit(true) =>
//│         let* (x$330) = test() in
//│         jump j$329(x$330)
//│       _ =>
//│         panic "match error"
//│   def j$329(tmp$327) =
//│     let x$331 = +(tmp$327,1) in
//│     x$331
//│   undefined
//│ 
//│ Cpp:
//│ #include "mlsprelude.h"
//│ _mlsValue _mls_j6(_mlsValue);
//│ _mlsValue _mls_test1();
//│ _mlsValue _mlsMain();
//│ _mlsValue _mls_j6(_mlsValue _mls_tmp3) {
//│   _mlsValue _mls_retval;
//│   auto _mls_x25 = (_mls_tmp3 + _mlsValue::fromIntLit(1));
//│   _mls_retval = _mls_x25;
//│   return _mls_retval;
//│ }
//│ _mlsValue _mls_test1() {
//│   _mlsValue _mls_retval;
//│   auto _mls_x26 = _mlsValue::fromIntLit(1);
//│   if (_mlsValue::isIntLit(_mls_x26, 1)) {
//│     auto _mls_x27 = _mls_test1();
//│     _mls_retval = _mls_j6(_mls_x27);
//│   } else {
//│     throw std::runtime_error("match error");
//│   }
//│   return _mls_retval;
//│ }
//│ _mlsValue _mlsMain() {
//│   _mlsValue _mls_retval;
//│   _mls_retval = _mlsValue::create<_mls_Unit>();
//│   return _mls_retval;
//│ }
//│ int main() { return _mlsLargeStack(_mlsMainWrapper); }


:sllir
:intl
:scpp
fun f() =
  let x = 10
  if true do
    set x += 1
  x
f()
//│ = 11
//│ LLIR:
//│   
//│   def f$332() =
//│     let x$346 = 10 in
//│     let x$347 = true in
//│     case x$347 of
//│       BoolLit(true) =>
//│         let x$349 = +(x$346,1) in
//│         let x$350 = undefined in
//│         jump j$348(x$349)
//│       _ =>
//│         let x$351 = undefined in
//│         jump j$348(x$346)
//│   def j$348(x$333) =
//│     x$333
//│   let* (x$352) = f() in
//│   x$352
//│ 
//│ Cpp:
//│ #include "mlsprelude.h"
//│ _mlsValue _mls_j7(_mlsValue);
//│ _mlsValue _mls_f();
//│ _mlsValue _mlsMain();
//│ _mlsValue _mls_j7(_mlsValue _mls_x28) {
//│   _mlsValue _mls_retval;
//│   _mls_retval = _mls_x28;
//│   return _mls_retval;
//│ }
//│ _mlsValue _mls_f() {
//│   _mlsValue _mls_retval;
//│   auto _mls_x29 = _mlsValue::fromIntLit(10);
//│   auto _mls_x30 = _mlsValue::fromIntLit(1);
//│   if (_mlsValue::isIntLit(_mls_x30, 1)) {
//│     auto _mls_x32 = (_mls_x29 + _mlsValue::fromIntLit(1));
//│     auto _mls_x33 = _mlsValue::create<_mls_Unit>();
//│     _mls_retval = _mls_j7(_mls_x32);
//│   } else {
//│     auto _mls_x31 = _mlsValue::create<_mls_Unit>();
//│     _mls_retval = _mls_j7(_mls_x29);
//│   }
//│   return _mls_retval;
//│ }
//│ _mlsValue _mlsMain() {
//│   _mlsValue _mls_retval;
//│   auto _mls_x34 = _mls_f();
//│   _mls_retval = _mls_x34;
//│   return _mls_retval;
//│ }
//│ int main() { return _mlsLargeStack(_mlsMainWrapper); }
//│ 
//│ Interpreted:
//│ 11

:sllir
:intl
class A(x)
class B(y)
fun f(a) =
  let t = if a is
    A(_) then 1
    B(_) then 2
  t
f(A(1))
//│ = 1
//│ LLIR:
//│   class A(x$358)
//│   class B(y$361)
//│   def f$355(a$362) =
//│     case a$362 of
//│       A$356 =>
//│         let x$382 = a$362.<A$356:x> in
//│         let x$383 = 1 in
//│         jump j$381(x$383)
//│       _ =>
//│         case a$362 of
//│           B$359 =>
//│             let x$385 = a$362.<B$359:y> in
//│             let x$386 = 2 in
//│             jump j$384(x$386)
//│           _ =>
//│             panic "match error"
//│   def j$384(tmp$377) =
//│     jump j$381(tmp$377)
//│   def j$381(tmp$377) =
//│     tmp$377
//│   let x$387 = A$356(1) in
//│   let* (x$388) = f(x$387) in
//│   x$388
//│ 
//│ Interpreted:
//│ 1

:sllir
:intl
class A(x)
class B(y)
fun f(a) =
  let t = if a is
    A(_) then if a is
      A(1) then 1
      B(_) then 2
    B(_) then 3
  t
f(A(1))
//│ = 1
//│ LLIR:
//│   class A(x$394)
//│   class B(y$397)
//│   def f$391(a$398) =
//│     case a$398 of
//│       A$392 =>
//│         let x$422 = a$398.<A$392:x> in
//│         case a$398 of
//│           A$392 =>
//│             let x$424 = a$398.<A$392:x> in
//│             case x$424 of
//│               IntLit(1) =>
//│                 let x$426 = 1 in
//│                 jump j$425(x$426)
//│               _ =>
//│                 panic "match error"
//│           _ =>
//│             case a$398 of
//│               B$395 =>
//│                 let x$428 = a$398.<B$395:y> in
//│                 let x$429 = 2 in
//│                 jump j$427(x$429)
//│               _ =>
//│                 panic "match error"
//│       _ =>
//│         case a$398 of
//│           B$395 =>
//│             let x$431 = a$398.<B$395:y> in
//│             let x$432 = 3 in
//│             jump j$430(x$432)
//│           _ =>
//│             panic "match error"
//│   def j$425(tmp$416) =
//│     jump j$423(tmp$416)
//│   def j$427(tmp$416) =
//│     jump j$423(tmp$416)
//│   def j$423(tmp$416) =
//│     jump j$421(tmp$416)
//│   def j$430(tmp$417) =
//│     jump j$421(tmp$417)
//│   def j$421(tmp$417) =
//│     tmp$417
//│   let x$433 = A$392(1) in
//│   let* (x$434) = f(x$433) in
//│   x$434
//│ 
//│ Interpreted:
//│ 1
