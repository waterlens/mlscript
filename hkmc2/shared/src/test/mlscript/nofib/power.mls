:js

:silent
:import NofibPrelude.mls


abstract class Pss[T]: Pz | Pc[T]

type Ps[T] = Lazy[Pss[T]]

class Pc[T](f: T, s: Ps[T]) extends Pss[T]

object Pz extends Pss

fun list() = lazy of () => Pc(1, list())

fun x_() = lazy of () => Pc(0, lazy of () => Pc(1, lazy of () => Pz))

fun fromIntegerPs(c) = if
  c == 0 then lazy of () => Pz
  else lazy of () => Pc(c, lazy of () => Pz)

fun extract(n, ps) = if
  n == 0 then Nil
  force(ps) is
    Pz then Nil
    Pc(x, ps) then x :: extract(n - 1, ps)

fun dotMult(c, ps) = lazy of () => if force(ps) is
  Pz then Pz
  Pc(f, fs_) then Pc(c * f, dotMult(c, fs_))

fun dotMultSndLz(c, ps) = lazy of () => if force(force(ps)) is
  Pz then Pz
  Pc(f, fs_) then Pc(c * f, dotMult(c, fs_))

fun negatePs(ps) = lazy of () => if force(ps) is
  Pz then Pz
  Pc(f, fs_) then Pc(-f, negatePs(fs_))

fun addPs(fss, gs) = lazy of () => if force(fss) is
  Pz then force(gs)
  Pc(f, fs_) and force(gs) is
    Pz then force(fss)
    Pc(g, gs) then Pc(f+g, addPs(fs_, gs))

fun minusPs(a, b) = addPs(a, negatePs(b))

fun multPs(fss, gss) = lazy of () => if force(fss) is
  Pz then Pz
  Pc(f, fs_) and force(gss) is
    Pz then Pz
    Pc(g, gs) then Pc(f*g, addPs(addPs(dotMult(f, gs), dotMult(g, fs_)), multPs(multPs(x_(), fs_), gs)))

fun multPsFstLz(fss, gss) = lazy of () => if force(force(fss)) is
  Pz then Pz
  Pc(f, fs_) and force(gss) is
    Pz then Pz
    Pc(g, gs) then Pc(f*g, addPs(addPs(dotMult(f, gs), dotMult(g, fs_)), multPs(multPs(x_(), fs_), gs)))

fun powerPs(a, n) = if n <= 0 then fromIntegerPs(1) else multPs(a, powerPs(a, n - 1))

fun divPs(fss, gss) = lazy of () => if force(fss) is
  Pz and force(gss) is
    Pz then throw Error("power series 0/0")
    Pc(0, gs) then force(divPs(lazy of () => Pz, gs))
    else Pz
  Pc(0, fs_) and force(gss) is
    Pc(0, gs) then force(divPs(fs_, gs))
    Pc(g, gs) then
      let q = 0
      Pc(q, divPs(addPs(fs_, negatePs(dotMult(q, gs))), lazy of () => Pc(g, gs)))
  Pc(f, fs_) and force(gss) is
    Pc(g, gs) then
      let q = f/g
      Pc(q, divPs(addPs(fs_, negatePs(dotMult(q, gs))), lazy of () => Pc(g, gs)))

fun compose_(fss, gss) = lazy of () => if force(fss) is
  Pz then Pz
  Pc(f, fs_) and force(gss) is
    Pz then Pc(f, lazy of () => Pz)
    Pc(0, gs) then Pc(f, multPs(gs, compose_(fs_, lazy of () => Pc(0, gs))))
    else force(addPs(lazy of () => Pc(f, lazy of () => Pz)), multPs(gss, compose_(fs_, gss)))

fun composeSndLz_(fss, gss) = lazy of () => if force(fss) is
  Pz then Pz
  Pc(f, fs_) and force(force(gss)) is
    Pz then Pc(f, lazy of () => Pz)
    Pc(0, gs) then Pc(f, multPs(gs, compose_(fs_, lazy of () => Pc(0, gs))))
    else force(addPs(lazy of () => Pc(f, lazy of () => Pz)), multPs(gss, composeSndLz_(fs_, gss)))

fun revert(fss) = lazy of () => if force(fss) is
  Pc(0, fs_) then
    fun rs() = lazy of () => Pc(0, divPs(fromIntegerPs(1), compose_(fs_, rs())))
    force(rs())
  Pc(f0, kss) and force(kss) is Pc(f1, gss) and force(gss) is Pz then
    Pc(-1/f1, lazy of () => Pc(1/f1, lazy of () => Pz))

fun deriv(fss) = lazy of () => if force(fss) is
  Pz then Pz
  Pc(_, fs_) then
    fun deriv1(gss, n) = lazy of () => if force(gss) is
      Pz then Pz
      Pc(f, fs_) then Pc(n * f, deriv1(fs_, n+1))
    force(deriv1(fs_, 1))

fun integral(fs_) =
  fun int1(fss, n) = lazy of () => if force(fss) is
    Pz then Pz
    Pc(f, fs_) then Pc(f/n, int1(fs_, n + 1))
  
  lazy of () => Pc(0, int1(fs_, 1))


fun integralLz(fs_) =
  fun int1(fss, n) = lazy of () => if force(fss) is
    Pz then Pz
    Pc(f, fs_) then Pc(f/n, int1(fs_, n + 1))
  
  lazy of () => Pc(0, int1(fs_(), 1))


fun sqrtPs(fss) = lazy of () => if force(fss) is
  Pz then Pz
  Pc(0, gss) and force(gss) is Pc(0, fs_) then Pc(0, sqrtPs(fs_))
  Pc(1, fs_) then
    fun qs() = lazy of () => addPs(fromIntegerPs(1), integral(divPs(deriv(lazy of () => Pc(1, fs_)), dotMultSndLz(2, qs()))))
    
    force(force(qs()))

fun ts() = lazy of () => Pc(1, multPs(ts(), ts()))

fun tree() = lazy of () => Pc(0, composeSndLz_(list(), lazy of () => tree()))

fun cosx() = minusPs((lazy of () => Pc(1, lazy of () => Pz)), integral(integralLz(cosx)))

fun sinx() = integral(minusPs((lazy of () => Pc(1, lazy of () => Pz)), integralLz(sinx)))

fun testPower_nofib(p) =
  extract(p, minusPs(sinx(), sqrtPs(minusPs(fromIntegerPs(1), powerPs(cosx(), 2)))));
  extract(p, minusPs(divPs(sinx(), cosx()), revert(integral(divPs(fromIntegerPs(1), addPs(fromIntegerPs(1), powerPs(x_(), 2)))))));
  extract(p, ts());
  extract(p, tree())

:expect "[0,1,1,2,5,14,42,132,429,1430,4862,16796,58786,208012]"
testPower_nofib(14).toString()
//â”‚ = "[0,1,1,2,5,14,42,132,429,1430,4862,16796,58786,208012]"

