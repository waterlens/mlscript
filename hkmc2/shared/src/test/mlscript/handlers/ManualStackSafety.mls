:js
:handler

// * This file demonstrates the handler-based mechanism of our stack safety implementation
// * by manually applying the transformation of a recursive factorial function
// * defined through the Z combinator.
// * It is notably interesting in that it demonstrates the ability to preserve tail calls.
// * The original function can be found in `hkmc2/shared/src/test/mlscript/handlers/ZCombinator.mls`


fun test(n, stackLimit) =
  let stackDepth = 0
  let stackOffset = 0
  abstract class StackDelay with
    fun perform()
  handle h = StackDelay with
    fun perform()(resume) =
      let curOffset = stackOffset
      set stackOffset = stackDepth
      console.log("resuming at offset:", curOffset)
      let tmp = resume()
      console.log("finished at offset:", curOffset)
      set stackOffset = curOffset
      tmp
  fun selfApp(f) = 
    if stackDepth - stackOffset >= stackLimit do h.perform()
    set stackDepth += 1
    f(f)
  fun mkrec(g) =
    if stackDepth - stackOffset >= stackLimit do h.perform()
    fun a(self) =
      if stackDepth - stackOffset >= stackLimit do h.perform()
      fun b(y) = 
        if stackDepth - stackOffset >= stackLimit do h.perform()
        let tmp = stackDepth
        set stackDepth += 1
        let res = selfApp(self)
        set stackDepth = tmp
        set stackDepth += 1
        res(y)
      set stackDepth += 1
      g(b)
    set stackDepth += 1
    selfApp(a)
  let fact =
    fun a(self) =
      if stackDepth - stackOffset >= stackLimit do h.perform()
      fun b(x) =
        if stackDepth - stackOffset >= stackLimit do h.perform()
        if x == 0 then 1 else 
          console.log(stackDepth, stackOffset)
          let tmp = stackDepth
          set stackDepth += 1
          let prev = self(x - 1)
          set stackDepth = tmp
          console.log("resumed:", x)
          x * prev
      b
    mkrec(a)
  set stackDepth = 1
  let ans = fact(n)
  set stackDepth = 0
  ans

:expect 3628800
test(10, 100)
//│ > 1 0
//│ > 3 0
//│ > 5 0
//│ > 7 0
//│ > 9 0
//│ > 11 0
//│ > 13 0
//│ > 15 0
//│ > 17 0
//│ > 19 0
//│ > resumed: 1
//│ > resumed: 2
//│ > resumed: 3
//│ > resumed: 4
//│ > resumed: 5
//│ > resumed: 6
//│ > resumed: 7
//│ > resumed: 8
//│ > resumed: 9
//│ > resumed: 10
//│ = 3628800

:expect 3628800
test(10, 5)
//│ > 1 0
//│ > resuming at offset: 0
//│ > 3 5
//│ > 5 5
//│ > 7 5
//│ > resuming at offset: 5
//│ > 9 10
//│ > 11 10
//│ > resuming at offset: 10
//│ > 13 15
//│ > 15 15
//│ > 17 15
//│ > resuming at offset: 15
//│ > 19 20
//│ > resumed: 1
//│ > resumed: 2
//│ > resumed: 3
//│ > resumed: 4
//│ > resumed: 5
//│ > resumed: 6
//│ > resumed: 7
//│ > resumed: 8
//│ > resumed: 9
//│ > resumed: 10
//│ > finished at offset: 15
//│ > finished at offset: 10
//│ > finished at offset: 5
//│ > finished at offset: 0
//│ = 3628800


