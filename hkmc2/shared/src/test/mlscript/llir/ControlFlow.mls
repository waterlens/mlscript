:js
:llir
:cpp

:global

:sllir
:intl
fun f1() =
  let x = 1
  let x = 2
  x
f1()
//│ = 2
//│ LLIR:
//│   
//│   def f1$197() =
//│     let x$206 = 1 in
//│     let x$207 = 2 in
//│     x$207
//│   let* (x$208) = f1() in
//│   x$208
//│ 
//│ Interpreted:
//│ 2

:sllir
:intl
fun f2() =
  let x = 0
  if x == 1 then 2 else 3
f2()
//│ = 3
//│ LLIR:
//│   
//│   def f2$209() =
//│     let x$219 = 0 in
//│     let x$220 = ==(x$219,1) in
//│     case x$220 of
//│       BoolLit(true) =>
//│         2
//│       _ =>
//│         3
//│   def j$221() =
//│     null
//│   let* (x$222) = f2() in
//│   x$222
//│ 
//│ Interpreted:
//│ 3


:sllir
fun f3() =
  let x1 = 0
  let x2 = 1
  if true then x1 else x2
f3()
//│ = 0
//│ LLIR:
//│   
//│   def f3$223() =
//│     let x$233 = 0 in
//│     let x$234 = 1 in
//│     let x$235 = true in
//│     case x$235 of
//│       BoolLit(true) =>
//│         x$233
//│       _ =>
//│         x$234
//│   def j$236() =
//│     null
//│   let* (x$237) = f3() in
//│   x$237


:sllir
:intl
fun f4() =
  let x = 0
  let x = if x == 1 then 2 else 3
  x
f4()
//│ = 3
//│ LLIR:
//│   
//│   def f4$238() =
//│     let x$251 = 0 in
//│     let x$252 = ==(x$251,1) in
//│     case x$252 of
//│       BoolLit(true) =>
//│         let x$254 = 2 in
//│         jump j$253(x$254)
//│       _ =>
//│         let x$255 = 3 in
//│         jump j$253(x$255)
//│   def j$253(tmp$249) =
//│     tmp$249
//│   let* (x$256) = f4() in
//│   x$256
//│ 
//│ Interpreted:
//│ 3

:sllir
:intl
fun f5() =
  let x = 0
  let x = if x == 1 then 2 else 3
  let x = if x == 2 then 4 else 5
  x
f5()
//│ = 5
//│ LLIR:
//│   
//│   def f5$257() =
//│     let x$275 = 0 in
//│     let x$276 = ==(x$275,1) in
//│     case x$276 of
//│       BoolLit(true) =>
//│         let x$278 = 2 in
//│         jump j$277(x$278)
//│       _ =>
//│         let x$279 = 3 in
//│         jump j$277(x$279)
//│   def j$277(tmp$272) =
//│     let x$280 = ==(tmp$272,2) in
//│     case x$280 of
//│       BoolLit(true) =>
//│         let x$282 = 4 in
//│         jump j$281(x$282)
//│       _ =>
//│         let x$283 = 5 in
//│         jump j$281(x$283)
//│   def j$281(tmp$273) =
//│     tmp$273
//│   let* (x$284) = f5() in
//│   x$284
//│ 
//│ Interpreted:
//│ 5

:sllir
:scpp
fun test() =
  if true do test()
//│ LLIR:
//│   
//│   def test$285() =
//│     let x$293 = true in
//│     case x$293 of
//│       BoolLit(true) =>
//│         let* (x$295) = test() in
//│         x$295
//│       _ =>
//│         undefined
//│   def j$294() =
//│     null
//│   undefined
//│ 
//│ Cpp:
//│ #include "mlsprelude.h"
//│ _mlsValue _mls_j5();
//│ _mlsValue _mls_test();
//│ _mlsValue _mlsMain();
//│ _mlsValue _mls_j5() {
//│   _mlsValue _mls_retval;
//│   _mls_retval = _mlsValue::create<_mls_Unit>();
//│   return _mls_retval;
//│ }
//│ _mlsValue _mls_test() {
//│   _mlsValue _mls_retval;
//│   auto _mls_x23 = _mlsValue::fromIntLit(1);
//│   if (_mlsValue::isIntLit(_mls_x23, 1)) {
//│     auto _mls_x24 = _mls_test();
//│     _mls_retval = _mls_x24;
//│   } else {
//│     _mls_retval = _mlsValue::create<_mls_Unit>();
//│   }
//│   return _mls_retval;
//│ }
//│ _mlsValue _mlsMain() {
//│   _mlsValue _mls_retval;
//│   _mls_retval = _mlsValue::create<_mls_Unit>();
//│   return _mls_retval;
//│ }
//│ int main() { return _mlsLargeStack(_mlsMainWrapper); }

:sllir
:scpp
fun test() =
  (if true then test()) + 1
//│ LLIR:
//│   
//│   def test$296() =
//│     let x$307 = true in
//│     case x$307 of
//│       BoolLit(true) =>
//│         let* (x$309) = test() in
//│         jump j$308(x$309)
//│       _ =>
//│         panic "match error"
//│   def j$308(tmp$306) =
//│     let x$310 = +(tmp$306,1) in
//│     x$310
//│   undefined
//│ 
//│ Cpp:
//│ #include "mlsprelude.h"
//│ _mlsValue _mls_j6(_mlsValue);
//│ _mlsValue _mls_test1();
//│ _mlsValue _mlsMain();
//│ _mlsValue _mls_j6(_mlsValue _mls_tmp3) {
//│   _mlsValue _mls_retval;
//│   auto _mls_x25 = (_mls_tmp3 + _mlsValue::fromIntLit(1));
//│   _mls_retval = _mls_x25;
//│   return _mls_retval;
//│ }
//│ _mlsValue _mls_test1() {
//│   _mlsValue _mls_retval;
//│   auto _mls_x26 = _mlsValue::fromIntLit(1);
//│   if (_mlsValue::isIntLit(_mls_x26, 1)) {
//│     auto _mls_x27 = _mls_test1();
//│     _mls_retval = _mls_j6(_mls_x27);
//│   } else {
//│     throw std::runtime_error("match error");
//│   }
//│   return _mls_retval;
//│ }
//│ _mlsValue _mlsMain() {
//│   _mlsValue _mls_retval;
//│   _mls_retval = _mlsValue::create<_mls_Unit>();
//│   return _mls_retval;
//│ }
//│ int main() { return _mlsLargeStack(_mlsMainWrapper); }


:sllir
:intl
:scpp
fun f() =
  let x = 10
  if true do
    set x += 1
  x
f()
//│ = 11
//│ LLIR:
//│   
//│   def f$311() =
//│     let x$325 = 10 in
//│     let x$326 = true in
//│     case x$326 of
//│       BoolLit(true) =>
//│         let x$328 = +(x$325,1) in
//│         let x$329 = undefined in
//│         jump j$327(x$328)
//│       _ =>
//│         let x$330 = undefined in
//│         jump j$327(x$325)
//│   def j$327(x$312) =
//│     x$312
//│   let* (x$331) = f() in
//│   x$331
//│ 
//│ Cpp:
//│ #include "mlsprelude.h"
//│ _mlsValue _mls_j7(_mlsValue);
//│ _mlsValue _mls_f();
//│ _mlsValue _mlsMain();
//│ _mlsValue _mls_j7(_mlsValue _mls_x28) {
//│   _mlsValue _mls_retval;
//│   _mls_retval = _mls_x28;
//│   return _mls_retval;
//│ }
//│ _mlsValue _mls_f() {
//│   _mlsValue _mls_retval;
//│   auto _mls_x29 = _mlsValue::fromIntLit(10);
//│   auto _mls_x30 = _mlsValue::fromIntLit(1);
//│   if (_mlsValue::isIntLit(_mls_x30, 1)) {
//│     auto _mls_x32 = (_mls_x29 + _mlsValue::fromIntLit(1));
//│     auto _mls_x33 = _mlsValue::create<_mls_Unit>();
//│     _mls_retval = _mls_j7(_mls_x32);
//│   } else {
//│     auto _mls_x31 = _mlsValue::create<_mls_Unit>();
//│     _mls_retval = _mls_j7(_mls_x29);
//│   }
//│   return _mls_retval;
//│ }
//│ _mlsValue _mlsMain() {
//│   _mlsValue _mls_retval;
//│   auto _mls_x34 = _mls_f();
//│   _mls_retval = _mls_x34;
//│   return _mls_retval;
//│ }
//│ int main() { return _mlsLargeStack(_mlsMainWrapper); }
//│ 
//│ Interpreted:
//│ 11

:sllir
:intl
class A(x)
class B(y)
fun f(a) =
  let t = if a is
    A(_) then 1
    B(_) then 2
  t
f(A(1))
//│ = 1
//│ LLIR:
//│   class A(x$337)
//│   class B(y$340)
//│   def f$334(a$341) =
//│     case a$341 of
//│       A$335 =>
//│         let x$361 = a$341.<A$335:x> in
//│         let x$362 = 1 in
//│         jump j$360(x$362)
//│       _ =>
//│         case a$341 of
//│           B$338 =>
//│             let x$364 = a$341.<B$338:y> in
//│             let x$365 = 2 in
//│             jump j$363(x$365)
//│           _ =>
//│             panic "match error"
//│   def j$363(tmp$356) =
//│     jump j$360(tmp$356)
//│   def j$360(tmp$356) =
//│     tmp$356
//│   let x$366 = A$335(1) in
//│   let* (x$367) = f(x$366) in
//│   x$367
//│ 
//│ Interpreted:
//│ 1

:sllir
:intl
class A(x)
class B(y)
fun f(a) =
  let t = if a is
    A(_) then if a is
      A(1) then 1
      B(_) then 2
    B(_) then 3
  t
f(A(1))
//│ = 1
//│ LLIR:
//│   class A(x$373)
//│   class B(y$376)
//│   def f$370(a$377) =
//│     case a$377 of
//│       A$371 =>
//│         let x$401 = a$377.<A$371:x> in
//│         case a$377 of
//│           A$371 =>
//│             let x$403 = a$377.<A$371:x> in
//│             case x$403 of
//│               IntLit(1) =>
//│                 let x$405 = 1 in
//│                 jump j$404(x$405)
//│               _ =>
//│                 panic "match error"
//│           _ =>
//│             case a$377 of
//│               B$374 =>
//│                 let x$407 = a$377.<B$374:y> in
//│                 let x$408 = 2 in
//│                 jump j$406(x$408)
//│               _ =>
//│                 panic "match error"
//│       _ =>
//│         case a$377 of
//│           B$374 =>
//│             let x$410 = a$377.<B$374:y> in
//│             let x$411 = 3 in
//│             jump j$409(x$411)
//│           _ =>
//│             panic "match error"
//│   def j$404(tmp$395) =
//│     jump j$402(tmp$395)
//│   def j$406(tmp$395) =
//│     jump j$402(tmp$395)
//│   def j$402(tmp$395) =
//│     jump j$400(tmp$395)
//│   def j$409(tmp$396) =
//│     jump j$400(tmp$396)
//│   def j$400(tmp$396) =
//│     tmp$396
//│   let x$412 = A$371(1) in
//│   let* (x$413) = f(x$412) in
//│   x$413
//│ 
//│ Interpreted:
//│ 1
