:js

:silent
:import NofibPrelude.mls


fun lookup(k, t) = if t is
  Nil then None
  [x, v] :: t then if listEq(k, x) then Some(v) else lookup(k, t)

class MyState[S, A](r: S -> [S, A])

fun myRunState(m, s) = if m is MyState(f) then f(s)

fun myBind(m, f) = MyState(s => if myRunState(m, s) is [s_, a] then myRunState(f(a), s_))

fun myReturn(a) = MyState(s => [s, a])

let myGet = MyState(s => [s, s])
//│ myGet = MyState { r: [Function (anonymous)] }

fun myEvalState(m, s) = if myRunState(m, s) is [s_, a] then a


abstract class Term: Var | Con | Incr | Add | Lam | App | IfZero | Thunk

object Incr extends Term

class
  Var(s: String) extends Term
  Con(i: Int) extends Term
  Add(a: Term, b: Term) extends Term
  Lam(s: String, t: Term) extends Term
  App(a: Term, b: Term) extends Term
  IfZero(a: Term, b: Term, c: Term) extends Term
  Thunk(t: Term, e: List[[String, Term]]) extends Term

object Unit

:...
//│ ————————————————————————————————————————————————————————————————————————————————
fun eqEnv(a, b) = if a is
  Nil and b is Nil then true
  [s1, t1] :: b and b is [s2, t2] :: d and
    listEq(s1, s2) and eqTerm(t1, t2) then eqEnv(b, d)
    else false
  else false

fun eqTerm(a, b) = if a is
  Var(a) and b is Var(b) then listEq(a, b)
  Con(a) and b is Con(b) then a === b
  Incr and b is Incr then true
  Add(a, b) and b is Add(c, d) then eqTerm(a, c) && eqTerm(b, d)
  Lam(a, b) and b is Lam(c, d) then listEq(a, c) && eqTerm(b, d)
  App(a, b) and b is App(c, d) then eqTerm(a, c) && eqTerm(b, d)
  IfZero(a, b, c) and b is IfZero(d, e, f) then eqTerm(a, d) && eqTerm(b, e) && eqTerm(c, f)
  Thunk(a, b) and b is Thunk(c, d) then eqTerm(a, c) && eqEnv(b, d)
  else false
//│ ————————————————————————————————————————————————————————————————————————————————

fun myMaybe(d, f, x) = if x is Some(x) then f(x)

let incr = myReturn(Unit)
//│ incr = MyState { r: [Function (anonymous)] }

fun lookupVar(v) =
  fun lookup2(env) = myMaybe(dummy => throw Error("undefined"), x => x, lookup(v, env))
  myBind(myGet, env => myReturn(lookup2(env)))

fun withEnv(tmp, m) = myReturn(myEvalState(m, tmp))

fun pushVar(v, t, m) = myBind(myGet, env => withEnv([v, t] :: env, m))

:...
//│ ————————————————————————————————————————————————————————————————————————————————
fun traverseTerm(t) = eval(t)

fun traverseCon(t) =
  myBind(
    traverseTerm(t),
    _t => if _t is Con(c) then myReturn(c) else throw Error("Not a Con")
  )

fun apply(t, a) = if t is Thunk(Lam(x, b), e) then
  myBind(
    myGet,
    orig => withEnv(e, pushVar(x, Thunk(a, orig), traverseTerm(b)))
  )

fun eval(ter) = if ter is
  Var(x) then
    myBind of
      myGet
      e => myBind(lookupVar(x), t => traverseTerm(t))
  Add(u, v) then
    myBind of
      traverseCon(u)
      u_ => myBind(traverseCon(v), v_ => myReturn(Con(u_ + v_)))
  Thunk(t, e) then withEnv(e, traverseTerm(t))
  Lam(x, b) then myBind(myGet, env => myReturn(Thunk(Lam(x, b), env)))
  App(u, v) then myBind(traverseTerm(u), u_ => apply(u_, v))
  IfZero(c, a, b) then
    myBind of
      traverseTerm(c)
      vall => if eqTerm(vall, Con(0)) then traverseTerm(a) else traverseTerm(b)
  Con(i) then myReturn(Con(i))
  Incr then myBind(incr, _dummy => myReturn(Con(0)))
//│ ————————————————————————————————————————————————————————————————————————————————

:...
//│ ————————————————————————————————————————————————————————————————————————————————
fun simpleEval(env, ter) = if ter is
  Var(v) then simpleEval(env, myMaybe(dummy => throw Error("undefined var"), x => x, lookup(v, env)))
  Con(e) then Con(e)
  Incr then Con(0)
  Add(u, v) then
    let u_ = simpleEvalCon(env, u)
    let v_ = simpleEvalCon(env, v)
    Con(u_ + v_)
  Lam(x, b) then Thunk(Lam(x, b), env)
  App(u, v) then
    let u_ = simpleEval(env, u)
    simpleApply(env, u_, v)
  IfZero(c, a, b) then
    let val_ = simpleEval(env, c)
    if eqTerm(val_, Con(0)) then simpleEval(env, a) else simpleEval(env, b)
  Thunk(t, e) then simpleEval(e, t)
  else throw Error(ter)

fun simpleApply(env, t, a) = if t is
  Thunk(Lam(x, b), e) then simpleEval([x, Thunk(a, env)] :: e, b)
  else throw Error("bad application")

fun simpleEvalCon(env, e) =
  let e_ = simpleEval(env, e)
  if e_ is Con(c) then c else throw Error("Not a Con")
//│ ————————————————————————————————————————————————————————————————————————————————

fun bracket(ot, this, t) = if this <= ot then "(" :: (t +: nofibStringToList(")")) else t

:...
//│ ————————————————————————————————————————————————————————————————————————————————
fun ppn(n, ter) = if ter is
  Var(v) then v
  Con(i) then nofibStringToList(stringOfInt(i))
  Incr then nofibStringToList("INCR")
  Lam(v, t) then bracket(n, 0, "@" :: (v +: nofibStringToList(". ") +: ppn(0-1, t)))
  Add(a, b) then bracket(n, 1, ppn(1, a) +: nofibStringToList(" + ") +: ppn(1, b))
  App(a, b) then bracket(n, 2, ppn(2, a) +: nofibStringToList(" ") +: ppn(2, b))
  IfZero(c, a, b) then bracket(n, 0, nofibStringToList("IF ") +: ppn(0, c) +: nofibStringToList(" THEN ") +: ppn(0, a) +: nofibStringToList(" ELSE ") +: ppn(0, b))
  Thunk(t, e) then bracket(n, 0, ppn(3, t) +: nofibStringToList("::") +: ppenv(e))

fun pp(t) = ppn(0, t)

fun ppenv(env) =
  nofibStringToList("[") +:
  flatMap(
    case { [v, t] then v +: nofibStringToList("=") +: pp(t) +: nofibStringToList(", ") }
    env
  ) +:
  nofibStringToList("]")
//│ ————————————————————————————————————————————————————————————————————————————————

let lfxx = Lam(nofibStringToList("x"), App(Var(nofibStringToList("F")), App(Var(nofibStringToList("x")), Var(nofibStringToList("x")))))
//│ > Lam {
//│ >   s: Cons { head: 'x', tail: Nil { class: [class Nil] } },
//│ >   t: App { a: Var { s: [Cons] }, b: App { a: [Var], b: [Var] } }
//│ lfxx = }

let fix = Lam(nofibStringToList("F"), App(lfxx, lfxx))
//│ > Lam {
//│ >   s: Cons { head: 'F', tail: Nil { class: [class Nil] } },
//│ >   t: App {
//│ >     a: Lam { s: [Cons], t: [App] },
//│ >     b: Lam { s: [Cons], t: [App] }
//│ >   }
//│ fix = }

let nMinus1 = Add(Var(nofibStringToList("n")), Con(-1))
//│ nMinus1 = Add { a: Var { s: Cons { head: 'n', tail: [Nil] } }, b: Con { i: -1 } }

let partialSum0 = Lam(nofibStringToList("sum"), Lam(nofibStringToList("n"), IfZero(Var(nofibStringToList("n")), Con(0), Add(Var(nofibStringToList("n")), App(Var(nofibStringToList("sum")), nMinus1)))))
//│ > Lam {
//│ >   s: Cons { head: 's', tail: Cons { head: 'u', tail: [Cons] } },
//│ >   t: Lam {
//│ >     s: Cons { head: 'n', tail: [Nil] },
//│ >     t: IfZero { a: [Var], b: [Con], c: [Add] }
//│ >   }
//│ partialSum0 = }

let sum0 = App(fix, partialSum0)
//│ > App {
//│ >   a: Lam {
//│ >     s: Cons { head: 'F', tail: [Nil] },
//│ >     t: App { a: [Lam], b: [Lam] }
//│ >   },
//│ >   b: Lam {
//│ >     s: Cons { head: 's', tail: [Cons] },
//│ >     t: Lam { s: [Cons], t: [IfZero] }
//│ >   }
//│ sum0 = }

fun showTerm(t) = if t is Con(a) then nofibStringToList("Con ") +: nofibStringToList(stringOfInt(a))

fun ev(t) =
  let envt2 = myRunState(traverseTerm(t), Nil)
  if envt2 is [env, t2] then pp(t2) +: nofibStringToList("  ") +: ppenv(env)

fun mainSimple(args) =
  if null_(args)
  then throw Error("Args: number-to-sum-up-to")
  else showTerm(simpleEval(Nil, App(sum0, Con(head(args)))))

fun mainMonad(args) =
  if null_(args)
  then throw Error("Args: number-to-sum-up-to")
  else ev(App(sum0, Con(head(args))))

fun testLambda_nofib(n) = [mainSimple(n :: Nil), mainMonad(n :: Nil)]

testLambda_nofib(80).toString()
//│ = '([C,o,n, ,3,2,4,0],[3,2,4,0, , ,[,]])'
