:js

class
  (&&) And(lhs: Bool, rhs: Bool)
  (||) Or(lhs: Bool, rhs: Bool)
  Not(arg: Bool)

pattern Truthy =
  true | And(Truthy, Truthy) | Or(Truthy, Truthy) |
  Or(Truthy, Falsy) | Or(Falsy, Truthy) | Not(Falsy)
pattern Falsy =
  false | And(Falsy, Falsy) | And(Falsy, Truthy) |
  And(Truthy, Falsy) | Or(Falsy, Falsy) | Not(Truthy)

:expect [true, false, false, true]
[
  true is @compile Truthy,
  false is @compile Truthy,
  true is @compile Falsy,
  false is @compile Falsy
]
//│ = [true, false, false, true]

fun isTruthy(value) = value is @compile Truthy

fun isFalsy(value) = value is @compile Falsy

:global
:expect true

// Test each case of `Truthy`.

isTruthy of true
//│ = true

isTruthy of true && true
//│ = true

isTruthy of true || true
//│ = true

:re
isTruthy of true || false
//│ ═══[RUNTIME ERROR] Expected: 'true', got: 'false'
//│ = false

isTruthy of false || true
//│ = true

isTruthy of Not of false
//│ = true

// Test each case of `Falsy`.

isFalsy of false
//│ = true

isFalsy of false && false
//│ = true

:re
// The compilation scheme does not handle non-determinism at all at the moment.
isFalsy of false && true
//│ ═══[RUNTIME ERROR] Expected: 'true', got: 'false'
//│ = false

isFalsy of true && false
//│ = true

isFalsy of false || false
//│ = true

isFalsy of Not of true
//│ = true
