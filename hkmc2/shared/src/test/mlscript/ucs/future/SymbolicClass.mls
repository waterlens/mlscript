

// :de
// type List = Nil | Cons

:ctx
type List = Nil | Cons
module Nil
class (::) Cons(head: Int, tail: List)
//│ Env:
//│   :: -> RefElem(member:Cons)
//│   Cons -> RefElem(member:Cons)
//│   List -> RefElem(member:List)
//│   Nil -> RefElem(member:Nil)

Cons(1, Nil)

1 :: 2

fun map(f, xs) = if xs is
  Nil then Nil
  x :: xs' then f(x) :: map(f, xs')


