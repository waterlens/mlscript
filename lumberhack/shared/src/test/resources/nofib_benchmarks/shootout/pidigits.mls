:NewParser
:ParseOnly

// pidgits n = 0 % (0 # (1,0,1)) where
//   i%ds
//      | i >= n = []
//      | True = (concat h ++ "\t:" ++ show j ++ "\n") ++ j%t
//      where k = i+10;
//            j = min n k;
//            (h,t) | k > n = (take (n`mod`10) ds ++ replicate (k-n) " ",[])
//                  | True = splitAt 10 ds
//   j # s
//      | n>a || r+n>=d = k # t
//      | True = show q : k # (n*10,(a-(q*d))*10,d)
//      where k = j+1; 
//            t@(n,a,d) = k&s; 
//            (q,r) = (n*3+a) `divMod` d
//   j&(n,a,d) = (n*j,(a+n*2)*y,d*y) where y=(j*2+1)

:lhNoIter
:lhInHaskell
:lhGenOCaml
:lhToMls
drop_lz n ls = if n > 0 then lazy (case (force ls) of { [] -> []; (h:t) -> force (drop_lz (n - 1) t) }) else ls
splitAt_lz n xs = (take_lz n xs, drop_lz n xs)
min a b = if a > b then b else a
replicate n x = if n > 0 then (x:(replicate (n - 1) x)) else []
divmod a b = ((a `div` b), (a `mod` b))
percOp i ds n =
  if i >= n then
    []
  else
    let k = (i + 10) in
          let j = (min n k) in
                case (if k > n then ((take_lz (n `mod` 10) ds) ++ (replicate (k-n) " "), (lazy [])) else (splitAt_lz 10 ds)) of {
                  (h, t) -> (concat h) ++ ("t:" ++ ((string_of_int j) ++ "n")) ++ (percOp j t n)
                }
hashOp j s =
  lazy (let k = j + 1 in
      case (ampOp k s) of {
        (n, a, d) -> case (divmod ((n * 3) + a) d) of {
          (q, r) -> if ((n > a) || ((r + n) >= d)) then (force (hashOp k (n, a, d))) else ((string_of_int q) : (hashOp k (n*10, (a-(q*d))*10, d)))
        }
      })
ampOp j (n,a,d) = let y = ((j * 2) + 1) in (n * j, (a + (n * 2)) * y, d * y)
pidgits n = percOp 0 (hashOp 0 (1,0,1)) n
testPiDigits_nofib n = pidgits n
testPiDigits_nofib $ primId 5000
//│ ||
//│ Parsed: {}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ 		---------- unoptimized mls gen ----------
//│ fun map(f)(ls) =
//│   if ls is
//│     LH_C (h, t) then
//│       LH_C ((f(h)), (map(f)(f)))
//│     LH_N then
//│       LH_N ()
//│ fun map_lz(f)(ls) =
//│   lazy((if force(ls) is
//│     LH_C (h, t) then
//│       LH_C ((f(h)), (map_lz(f)(f)))
//│     LH_N then
//│       LH_N ()))
//│ fun filter(f)(ls) =
//│   if ls is
//│     LH_C (h, t) then
//│       if f(h) then
//│         LH_C (h, (filter(f)(f)))
//│       else
//│         (filter(f)(f))
//│     LH_N then
//│       LH_N ()
//│ fun filter_lz(f)(ls) =
//│   lazy((if force(ls) is
//│     LH_C (h, t) then
//│       if f(h) then
//│         LH_C (h, (filter_lz(f)(f)))
//│       else
//│         (force((filter_lz(f)(f))))
//│     LH_N then
//│       LH_N ()))
//│ fun foldl(f)(i)(ls) =
//│   if ls is
//│     LH_C (h, t) then
//│       foldl(f)(f)((f(i)(i)))
//│     LH_N then
//│       i
//│ fun foldr(f)(i)(ls) =
//│   if ls is
//│     LH_C (h, t) then
//│       f(h)(h)
//│     LH_N then
//│       i
//│ fun foldr_lz(f)(i)(ls) =
//│   lazy((if force(ls) is
//│     LH_C (h, t) then
//│       f(h)(h)
//│     LH_N then
//│       i))
//│ fun zip(xs)(ys) =
//│   if xs is
//│     LH_C (hx, tx) then
//│       if ys is
//│         LH_C (hy, ty) then
//│           LH_C ((LH_P2 (hx, hy)), (zip(tx)(tx)))
//│         LH_N then
//│           LH_N ()
//│     LH_N then
//│       LH_N ()
//│ fun zip_nl_lz(xs)(ys) =
//│   if xs is
//│     LH_C (hx, tx) then
//│       if force(ys) is
//│         LH_C (hy, ty) then
//│           LH_C ((LH_P2 (hx, hy)), (zip_nl_lz(tx)(tx)))
//│         LH_N then
//│           LH_N ()
//│     LH_N then
//│       LH_N ()
//│ fun zip_lz_nl(xs)(ys) =
//│   if ys is
//│     LH_C (hy, ty) then
//│       if force(xs) is
//│         LH_C (hx, tx) then
//│           LH_C ((LH_P2 (hx, hy)), (zip_lz_nl(tx)(tx)))
//│         LH_N then
//│           LH_N ()
//│     LH_N then
//│       LH_N ()
//│ fun zip_lz_lz(xs)(ys) =
//│   lazy((if force(xs) is
//│     LH_C (hx, tx) then
//│       if force(ys) is
//│         LH_C (hy, ty) then
//│           LH_C ((LH_P2 (hx, hy)), (zip_lz_lz(tx)(tx)))
//│         LH_N then
//│           LH_N ()
//│     LH_N then
//│       LH_N ()))
//│ fun zipWith(f)(xs)(ys) =
//│   if xs is
//│     LH_C (hx, tx) then
//│       if ys is
//│         LH_C (hy, ty) then
//│           LH_C ((f(hx)(hx)), (zipWith(f)(f)(tx)))
//│         LH_N then
//│           LH_N ()
//│     LH_N then
//│       LH_N ()
//│ fun zipWith_nl_lz(f)(xs)(ys) =
//│   if xs is
//│     LH_C (hx, tx) then
//│       if force(ys) is
//│         LH_C (hy, ty) then
//│           LH_C ((f(hx)(hx)), (zipWith_nl_lz(f)(f)(tx)))
//│         LH_N then
//│           LH_N ()
//│     LH_N then
//│       LH_N ()
//│ fun zipWith_lz_nl(f)(xs)(ys) =
//│   if ys is
//│     LH_C (hy, ty) then
//│       if force(xs) is
//│         LH_C (hx, tx) then
//│           LH_C ((f(hx)(hx)), (zipWith_lz_nl(f)(f)(tx)))
//│         LH_N then
//│           LH_N ()
//│     LH_N then
//│       LH_N ()
//│ fun zipWith_lz_lz(f)(xs)(ys) =
//│   lazy((if force(xs) is
//│     LH_C (hx, tx) then
//│       if force(ys) is
//│         LH_C (hy, ty) then
//│           LH_C ((f(hx)(hx)), (zipWith_lz_lz(f)(f)(tx)))
//│         LH_N then
//│           LH_N ()
//│     LH_N then
//│       LH_N ()))
//│ fun head(ls) =
//│   if ls is
//│     LH_C (h, t) then
//│       h
//│     LH_N then
//│       error
//│ fun head_lz(ls) =
//│   if force(ls) is
//│     LH_C (h, t) then
//│       h
//│     LH_N then
//│       error
//│ fun tail(ls) =
//│   if ls is
//│     LH_C (h, t) then
//│       t
//│     LH_N then
//│       error
//│ fun tail_lz(ls) =
//│   if force(ls) is
//│     LH_C (h, t) then
//│       t
//│     LH_N then
//│       error
//│ fun enumFromTo(a)(b) =
//│   if a <= b then
//│     LH_C (a, (enumFromTo((a + 1))((a + 1))))
//│   else
//│     (LH_N ())
//│ fun enumFromThenTo(a)(t)(b) =
//│   if a <= b then
//│     LH_C (a, (enumFromThenTo(t)(t)((2 * t - a))))
//│   else
//│     (LH_N ())
//│ fun enumFrom(a) =
//│   lazy((LH_C (a, (enumFrom((a + 1))))))
//│ fun enumFromThen(a)(t) =
//│   lazy((LH_C (a, (enumFromThen(t)(t)))))
//│ fun repeat(x) =
//│   lazy((LH_C (x, (repeat(x)))))
//│ fun iterate(f)(x) =
//│   lazy((LH_C (x, (iterate(f)(f)))))
//│ fun take(n)(ls) =
//│   if n > 0 then
//│     if ls is
//│       LH_C (h, t) then
//│         LH_C (h, (take((n - 1))((n - 1))))
//│       LH_N then
//│         LH_N ()
//│   else
//│     (LH_N ())
//│ fun take_lz(n)(ls) =
//│   if n > 0 then
//│     if force(ls) is
//│       LH_C (h, t) then
//│         LH_C (h, (take_lz((n - 1))((n - 1))))
//│       LH_N then
//│         LH_N ()
//│   else
//│     (LH_N ())
//│ fun length(ls) =
//│   if ls is
//│     LH_C (h, t) then
//│       1 + (length(t))
//│     LH_N then
//│       0
//│ fun mappend(xs)(ys) =
//│   if xs is
//│     LH_C (h, t) then
//│       LH_C (h, (mappend(t)(t)))
//│     LH_N then
//│       ys
//│ fun sum(ls) =
//│   sumAux(ls)(ls)
//│ fun sumAux(ls)(a) =
//│   if ls is
//│     LH_N then
//│       a
//│     LH_C (h, t) then
//│       sumAux(t)(t)
//│ fun atIndex(n)(ls) =
//│   if n < 0 then
//│     error
//│   else
//│     (if ls is
//│       LH_C (h, t) then
//│         if n == 0 then
//│           h
//│         else
//│           (atIndex((n - 1))((n - 1)))
//│       LH_N then
//│         error)
//│ fun atIndex_lz(n)(ls) =
//│   if n < 0 then
//│     error
//│   else
//│     (if force(ls) is
//│       LH_C (h, t) then
//│         if n == 0 then
//│           h
//│         else
//│           (atIndex_lz((n - 1))((n - 1)))
//│       LH_N then
//│         error)
//│ fun concat(lss) =
//│   if lss is
//│     LH_C (h, t) then
//│       mappend(h)(h)
//│     LH_N then
//│       LH_N ()
//│ fun reverse(ls) =
//│   reverse_helper(ls)(ls)
//│ fun reverse_helper(ls)(a) =
//│   if ls is
//│     LH_C (h, t) then
//│       reverse_helper(t)(t)
//│     LH_N then
//│       a
//│ fun testPiDigits_nofib(_lh_testPiDigits_nofib_arg1) =
//│   pidgits(_lh_testPiDigits_nofib_arg1)
//│ fun drop_lz(_lh_drop_lz_arg1)(_lh_drop_lz_arg2) =
//│   if _lh_drop_lz_arg1 > 0 then
//│     lazy((let _lh_matchIdent = force(_lh_drop_lz_arg2)
//│     if _lh_matchIdent is
//│       LH_N then
//│         LH_N ()
//│       LH_C (_lh_drop_lz_LH_C_0, _lh_drop_lz_LH_C_1) then
//│         force((drop_lz((_lh_drop_lz_arg1 - 1))((_lh_drop_lz_arg1 - 1))))))
//│   else
//│     _lh_drop_lz_arg2
//│ fun min(_lh_min_arg1)(_lh_min_arg2) =
//│   if _lh_min_arg1 > _lh_min_arg2 then
//│     _lh_min_arg2
//│   else
//│     _lh_min_arg1
//│ fun replicate(_lh_replicate_arg1)(_lh_replicate_arg2) =
//│   if _lh_replicate_arg1 > 0 then
//│     LH_C (_lh_replicate_arg2, (replicate((_lh_replicate_arg1 - 1))((_lh_replicate_arg1 - 1))))
//│   else
//│     (LH_N ())
//│ fun pidgits(_lh_pidgits_arg1) =
//│   percOp(0)(0)((hashOp(0)(0)))
//│ fun ampOp(_lh_ampOp_arg1)(_lh_ampOp_arg2) =
//│   if _lh_ampOp_arg2 is
//│     LH_P3 (_lh_ampOp_LH_P3_0, _lh_ampOp_LH_P3_1, _lh_ampOp_LH_P3_2) then
//│       let y = _lh_ampOp_arg1 * 2 + 1
//│       LH_P3 ((_lh_ampOp_LH_P3_0 * _lh_ampOp_arg1), ((_lh_ampOp_LH_P3_1 + _lh_ampOp_LH_P3_0 * 2) * y), (_lh_ampOp_LH_P3_2 * y))
//│ fun percOp(_lh_percOp_arg1)(_lh_percOp_arg2)(_lh_percOp_arg3) =
//│   if _lh_percOp_arg1 >= _lh_percOp_arg3 then
//│     LH_N ()
//│   else
//│     (let k = _lh_percOp_arg1 + 10
//│     let j = min(_lh_percOp_arg3)(_lh_percOp_arg3)
//│     let _lh_matchIdent = if k > _lh_percOp_arg3 then
//│       LH_P2 ((mappend((take_lz((_lh_percOp_arg3 % 10))((_lh_percOp_arg3 % 10))))((take_lz((_lh_percOp_arg3 % 10))((_lh_percOp_arg3 % 10))))), (lazy((LH_N ()))))
//│     else
//│       (splitAt_lz(10)(10))
//│     if _lh_matchIdent is
//│       LH_P2 (_lh_percOp_LH_P2_0, _lh_percOp_LH_P2_1) then
//│         mappend((mappend((concat(_lh_percOp_LH_P2_0)))((concat(_lh_percOp_LH_P2_0)))))((mappend((concat(_lh_percOp_LH_P2_0)))((concat(_lh_percOp_LH_P2_0))))))
//│ fun divmod(_lh_divmod_arg1)(_lh_divmod_arg2) =
//│   LH_P2 ((div(_lh_divmod_arg1)(_lh_divmod_arg1)), (_lh_divmod_arg1 % _lh_divmod_arg2))
//│ fun splitAt_lz(_lh_splitAt_lz_arg1)(_lh_splitAt_lz_arg2) =
//│   LH_P2 ((take_lz(_lh_splitAt_lz_arg1)(_lh_splitAt_lz_arg1)), (drop_lz(_lh_splitAt_lz_arg1)(_lh_splitAt_lz_arg1)))
//│ fun hashOp(_lh_hashOp_arg1)(_lh_hashOp_arg2) =
//│   lazy((let k = _lh_hashOp_arg1 + 1
//│   let _lh_matchIdent = ampOp(k)(k)
//│   if _lh_matchIdent is
//│     LH_P3 (_lh_hashOp_LH_P3_0, _lh_hashOp_LH_P3_1, _lh_hashOp_LH_P3_2) then
//│       let _lh_matchIdent = divmod((_lh_hashOp_LH_P3_0 * 3 + _lh_hashOp_LH_P3_1))((_lh_hashOp_LH_P3_0 * 3 + _lh_hashOp_LH_P3_1))
//│       if _lh_matchIdent is
//│         LH_P2 (_lh_hashOp_LH_P2_0, _lh_hashOp_LH_P2_1) then
//│           if _lh_hashOp_LH_P3_0 > _lh_hashOp_LH_P3_1 || _lh_hashOp_LH_P2_1 + _lh_hashOp_LH_P3_0 >= _lh_hashOp_LH_P3_2 then
//│             force((hashOp(k)(k)))
//│           else
//│             (LH_C ((string_of_int(_lh_hashOp_LH_P2_0)), (hashOp(k)(k))))))
//│ (testPiDigits_nofib((primId(5000))))
//│ 		---------- unoptimized mls gen ----------
//│ testPiDigits_nofib_lh_₁^467(primId⁰(5000))
//│ def ampOp_lh_₁(_lh_ampOp_arg1⁰, _lh_ampOp_arg2⁰) = case _lh_ampOp_arg2⁰ of {
//│ 	LH_P3 _lh_ampOp_LH_P3_0⁰ _lh_ampOp_LH_P3_1⁰ _lh_ampOp_LH_P3_2⁰ => 
//│ 		let y⁰ = ((_lh_ampOp_arg1⁰ * 2) + 1)
//│ 		in [LH_P3 (_lh_ampOp_LH_P3_0⁰ * _lh_ampOp_arg1⁰) ((_lh_ampOp_LH_P3_1⁰ + (_lh_ampOp_LH_P3_0⁰ * 2)) * y⁰) (_lh_ampOp_LH_P3_2⁰ * y⁰)]
//│ 	| _  => error⁰}
//│ def concat_lh_₁(lss⁰) = case lss⁰ of {
//│ 	LH_C h⁸ t⁸ => mappend_lh_₆^249(h⁸, concat_lh_₁^252(t⁸))
//│ 	| LH_N  => [LH_N]}
//│ def divmod_lh_₁(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰) = [LH_P2 div⁰(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰) (_lh_divmod_arg1⁰ % _lh_divmod_arg2⁰)]
//│ def drop_lz_lh_₁(_lh_drop_lz_arg1⁰, _lh_drop_lz_arg2⁰) = if (_lh_drop_lz_arg1⁰ > 0) then lazy⁰(
//│ 	let _lh_matchIdent⁰ = force⁰(_lh_drop_lz_arg2⁰)
//│ 	in case _lh_matchIdent⁰ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_drop_lz_LH_C_0⁰ _lh_drop_lz_LH_C_1⁰ => force⁰(drop_lz_lh_₁^38((_lh_drop_lz_arg1⁰ - 1), _lh_drop_lz_LH_C_1⁰))
//│ 		| _  => error⁰}) else _lh_drop_lz_arg2⁰
//│ def hashOp_lh_₁(_lh_hashOp_arg1⁰, _lh_hashOp_arg2⁰) = lazy⁰(
//│ 	let k⁰ = (_lh_hashOp_arg1⁰ + 1)
//│ 	in let _lh_matchIdent¹ = ampOp_lh_₁^265(k⁰, _lh_hashOp_arg2⁰)
//│ 	in case _lh_matchIdent¹ of {
//│ 		LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰ => 
//│ 			let _lh_matchIdent² = divmod_lh_₁^271(((_lh_hashOp_LH_P3_0⁰ * 3) + _lh_hashOp_LH_P3_1⁰), _lh_hashOp_LH_P3_2⁰)
//│ 			in case _lh_matchIdent² of {
//│ 				LH_P2 _lh_hashOp_LH_P2_0⁰ _lh_hashOp_LH_P2_1⁰ => if ((_lh_hashOp_LH_P3_0⁰ > _lh_hashOp_LH_P3_1⁰) || ((_lh_hashOp_LH_P2_1⁰ + _lh_hashOp_LH_P3_0⁰) >= _lh_hashOp_LH_P3_2⁰)) then force⁰(hashOp_lh_₁^303(k⁰, [LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) hashOp_lh_₁^315(k⁰, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])]
//│ 				| _  => error⁰}
//│ 		| _  => error⁰})
//│ def mappend_lh_₁(xs⁵, ys⁵) = case xs⁵ of {
//│ 	LH_C h⁶ t⁶ => [LH_C h⁶ mappend_lh_₁^213(t⁶, ys⁵)]
//│ 	| LH_N  => ys⁵}
//│ def mappend_lh_₂(xs⁴, ys⁴) = case xs⁴ of {
//│ 	LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₂^201(t⁵, ys⁴)]
//│ 	| LH_N  => ys⁴}
//│ def mappend_lh_₃(xs³, ys³) = case xs³ of {
//│ 	LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₃^189(t⁴, ys³)]
//│ 	| LH_N  => ys³}
//│ def mappend_lh_₄(xs², ys²) = case xs² of {
//│ 	LH_C h³ t³ => [LH_C h³ mappend_lh_₄^134(t³, ys²)]
//│ 	| LH_N  => ys²}
//│ def mappend_lh_₅(xs¹, ys¹) = case xs¹ of {
//│ 	LH_C h² t² => [LH_C h² mappend_lh_₅^122(t², ys¹)]
//│ 	| LH_N  => ys¹}
//│ def mappend_lh_₆(xs⁰, ys⁰) = case xs⁰ of {
//│ 	LH_C h¹ t¹ => [LH_C h¹ mappend_lh_₆^58(t¹, ys⁰)]
//│ 	| LH_N  => ys⁰}
//│ def min_lh_₁(_lh_min_arg1⁰, _lh_min_arg2⁰) = if (_lh_min_arg1⁰ > _lh_min_arg2⁰) then _lh_min_arg2⁰ else _lh_min_arg1⁰
//│ def percOp_lh_₁(_lh_percOp_arg1⁰, _lh_percOp_arg2⁰, _lh_percOp_arg3⁰) = if (_lh_percOp_arg1⁰ >= _lh_percOp_arg3⁰) then [LH_N] else 
//│ 	let k¹ = (_lh_percOp_arg1⁰ + 10)
//│ 	in let j⁰ = min_lh_₁^362(_lh_percOp_arg3⁰, k¹)
//│ 	in let _lh_matchIdent³ = if (k¹ > _lh_percOp_arg3⁰) then [LH_P2 mappend_lh_₄^372(take_lz_lh_₁^373((_lh_percOp_arg3⁰ % 10), _lh_percOp_arg2⁰), replicate_lh_₁^383((k¹ - _lh_percOp_arg3⁰), [LH_C ' ' [LH_N]])) lazy⁰([LH_N])] else splitAt_lz_lh_₁^399(10, _lh_percOp_arg2⁰)
//│ 	in case _lh_matchIdent³ of {
//│ 		LH_P2 _lh_percOp_LH_P2_0⁰ _lh_percOp_LH_P2_1⁰ => mappend_lh_₅^406(mappend_lh_₂^407(concat_lh_₁^408(_lh_percOp_LH_P2_0⁰), mappend_lh_₃^412([LH_C 't' [LH_C ':' [LH_N]]], mappend_lh_₁^419(string_of_int⁰(j⁰), [LH_C 'n' [LH_N]]))), percOp_lh_₁^431(j⁰, _lh_percOp_LH_P2_1⁰, _lh_percOp_arg3⁰))
//│ 		| _  => error⁰}
//│ def pidgits_lh_₁(_lh_pidgits_arg1⁰) = percOp_lh_₁^448(0, hashOp_lh_₁^451(0, [LH_P3 1 0 1]), _lh_pidgits_arg1⁰)
//│ def replicate_lh_₁(_lh_replicate_arg1⁰, _lh_replicate_arg2⁰) = if (_lh_replicate_arg1⁰ > 0) then [LH_C _lh_replicate_arg2⁰ replicate_lh_₁^160((_lh_replicate_arg1⁰ - 1), _lh_replicate_arg2⁰)] else [LH_N]
//│ def splitAt_lz_lh_₁(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰) = [LH_P2 take_lz_lh_₂^174(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰) drop_lz_lh_₁^179(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰)]
//│ def take_lz_lh_₁(n¹, ls¹) = if (n¹ > 0) then case force⁰(ls¹) of {
//│ 	LH_C h⁷ t⁷ => [LH_C h⁷ take_lz_lh_₁^232((n¹ - 1), t⁷)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def take_lz_lh_₂(n⁰, ls⁰) = if (n⁰ > 0) then case force⁰(ls⁰) of {
//│ 	LH_C h⁰ t⁰ => [LH_C h⁰ take_lz_lh_₂^10((n⁰ - 1), t⁰)]
//│ 	| LH_N  => [LH_N]} else [LH_N]
//│ def testPiDigits_nofib_lh_₁(_lh_testPiDigits_nofib_arg1⁰) = pidgits_lh_₁^463(_lh_testPiDigits_nofib_arg1⁰)
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec ampOp_lh__d1 _lh_ampOp_arg1_0 _lh_ampOp_arg2_0 =
//│ 		  (match _lh_ampOp_arg2_0 with
//│ 		    | `LH_P3(_lh_ampOp_LH_P3_0_0, _lh_ampOp_LH_P3_1_0, _lh_ampOp_LH_P3_2_0) -> 
//│ 		      (let rec y_0 = ((_lh_ampOp_arg1_0 * 2) + 1) in
//│ 		        (`LH_P3((_lh_ampOp_LH_P3_0_0 * _lh_ampOp_arg1_0), ((_lh_ampOp_LH_P3_1_0 + (_lh_ampOp_LH_P3_0_0 * 2)) * y_0), (_lh_ampOp_LH_P3_2_0 * y_0))))
//│ 		    | _ -> 
//│ 		      (failwith "error"));;
//│ 		let rec divmod_lh__d1 _lh_divmod_arg1_0 _lh_divmod_arg2_0 =
//│ 		  (`LH_P2((_lh_divmod_arg1_0 / _lh_divmod_arg2_0), (_lh_divmod_arg1_0 mod _lh_divmod_arg2_0)));;
//│ 		let rec hashOp_lh__d1 _lh_hashOp_arg1_0 _lh_hashOp_arg2_0 =
//│ 		  (lazy (let rec k_0 = (_lh_hashOp_arg1_0 + 1) in
//│ 		    (let rec _lh_matchIdent_1 = ((ampOp_lh__d1 k_0) _lh_hashOp_arg2_0) in
//│ 		      (match _lh_matchIdent_1 with
//│ 		        | `LH_P3(_lh_hashOp_LH_P3_0_0, _lh_hashOp_LH_P3_1_0, _lh_hashOp_LH_P3_2_0) -> 
//│ 		          (let rec _lh_matchIdent_2 = ((divmod_lh__d1 ((_lh_hashOp_LH_P3_0_0 * 3) + _lh_hashOp_LH_P3_1_0)) _lh_hashOp_LH_P3_2_0) in
//│ 		            (match _lh_matchIdent_2 with
//│ 		              | `LH_P2(_lh_hashOp_LH_P2_0_0, _lh_hashOp_LH_P2_1_0) -> 
//│ 		                (if ((_lh_hashOp_LH_P3_0_0 > _lh_hashOp_LH_P3_1_0) || ((_lh_hashOp_LH_P2_1_0 + _lh_hashOp_LH_P3_0_0) >= _lh_hashOp_LH_P3_2_0)) then
//│ 		                  (Lazy.force ((hashOp_lh__d1 k_0) (`LH_P3(_lh_hashOp_LH_P3_0_0, _lh_hashOp_LH_P3_1_0, _lh_hashOp_LH_P3_2_0))))
//│ 		                else
//│ 		                  (`LH_C((string_of_int _lh_hashOp_LH_P2_0_0), ((hashOp_lh__d1 k_0) (`LH_P3((_lh_hashOp_LH_P3_0_0 * 10), ((_lh_hashOp_LH_P3_1_0 - (_lh_hashOp_LH_P2_0_0 * _lh_hashOp_LH_P3_2_0)) * 10), _lh_hashOp_LH_P3_2_0))))))
//│ 		              | _ -> 
//│ 		                (failwith "error")))
//│ 		        | _ -> 
//│ 		          (failwith "error")))));;
//│ 		let rec mappend_lh__d1 xs_5 ys_5 =
//│ 		  (match xs_5 with
//│ 		    | `LH_C(h_6, t_6) -> 
//│ 		      (`LH_C(h_6, ((mappend_lh__d1 t_6) ys_5)))
//│ 		    | `LH_N -> 
//│ 		      ys_5);;
//│ 		let rec drop_lz_lh__d1 _lh_drop_lz_arg1_0 _lh_drop_lz_arg2_0 =
//│ 		  (if (_lh_drop_lz_arg1_0 > 0) then
//│ 		    (lazy (let rec _lh_matchIdent_0 = (Lazy.force _lh_drop_lz_arg2_0) in
//│ 		      (match _lh_matchIdent_0 with
//│ 		        | `LH_N -> 
//│ 		          (`LH_N)
//│ 		        | `LH_C(_lh_drop_lz_LH_C_0_0, _lh_drop_lz_LH_C_1_0) -> 
//│ 		          (Lazy.force ((drop_lz_lh__d1 (_lh_drop_lz_arg1_0 - 1)) _lh_drop_lz_LH_C_1_0))
//│ 		        | _ -> 
//│ 		          (failwith "error"))))
//│ 		  else
//│ 		    _lh_drop_lz_arg2_0);;
//│ 		let rec take_lz_lh__d2 n_0 ls_0 =
//│ 		  (if (n_0 > 0) then
//│ 		    (match (Lazy.force ls_0) with
//│ 		      | `LH_C(h_0, t_0) -> 
//│ 		        (`LH_C(h_0, ((take_lz_lh__d2 (n_0 - 1)) t_0)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec splitAt_lz_lh__d1 _lh_splitAt_lz_arg1_0 _lh_splitAt_lz_arg2_0 =
//│ 		  (`LH_P2(((take_lz_lh__d2 _lh_splitAt_lz_arg1_0) _lh_splitAt_lz_arg2_0), ((drop_lz_lh__d1 _lh_splitAt_lz_arg1_0) _lh_splitAt_lz_arg2_0)));;
//│ 		let rec mappend_lh__d2 xs_4 ys_4 =
//│ 		  (match xs_4 with
//│ 		    | `LH_C(h_5, t_5) -> 
//│ 		      (`LH_C(h_5, ((mappend_lh__d2 t_5) ys_4)))
//│ 		    | `LH_N -> 
//│ 		      ys_4);;
//│ 		let rec mappend_lh__d5 xs_1 ys_1 =
//│ 		  (match xs_1 with
//│ 		    | `LH_C(h_2, t_2) -> 
//│ 		      (`LH_C(h_2, ((mappend_lh__d5 t_2) ys_1)))
//│ 		    | `LH_N -> 
//│ 		      ys_1);;
//│ 		let rec mappend_lh__d4 xs_2 ys_2 =
//│ 		  (match xs_2 with
//│ 		    | `LH_C(h_3, t_3) -> 
//│ 		      (`LH_C(h_3, ((mappend_lh__d4 t_3) ys_2)))
//│ 		    | `LH_N -> 
//│ 		      ys_2);;
//│ 		let rec min_lh__d1 _lh_min_arg1_0 _lh_min_arg2_0 =
//│ 		  (if (_lh_min_arg1_0 > _lh_min_arg2_0) then
//│ 		    _lh_min_arg2_0
//│ 		  else
//│ 		    _lh_min_arg1_0);;
//│ 		let rec take_lz_lh__d1 n_1 ls_1 =
//│ 		  (if (n_1 > 0) then
//│ 		    (match (Lazy.force ls_1) with
//│ 		      | `LH_C(h_7, t_7) -> 
//│ 		        (`LH_C(h_7, ((take_lz_lh__d1 (n_1 - 1)) t_7)))
//│ 		      | `LH_N -> 
//│ 		        (`LH_N))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec mappend_lh__d6 xs_0 ys_0 =
//│ 		  (match xs_0 with
//│ 		    | `LH_C(h_1, t_1) -> 
//│ 		      (`LH_C(h_1, ((mappend_lh__d6 t_1) ys_0)))
//│ 		    | `LH_N -> 
//│ 		      ys_0);;
//│ 		let rec concat_lh__d1 lss_0 =
//│ 		  (match lss_0 with
//│ 		    | `LH_C(h_8, t_8) -> 
//│ 		      ((mappend_lh__d6 h_8) (concat_lh__d1 t_8))
//│ 		    | `LH_N -> 
//│ 		      (`LH_N));;
//│ 		let rec mappend_lh__d3 xs_3 ys_3 =
//│ 		  (match xs_3 with
//│ 		    | `LH_C(h_4, t_4) -> 
//│ 		      (`LH_C(h_4, ((mappend_lh__d3 t_4) ys_3)))
//│ 		    | `LH_N -> 
//│ 		      ys_3);;
//│ 		let rec replicate_lh__d1 _lh_replicate_arg1_0 _lh_replicate_arg2_0 =
//│ 		  (if (_lh_replicate_arg1_0 > 0) then
//│ 		    (`LH_C(_lh_replicate_arg2_0, ((replicate_lh__d1 (_lh_replicate_arg1_0 - 1)) _lh_replicate_arg2_0)))
//│ 		  else
//│ 		    (`LH_N));;
//│ 		let rec percOp_lh__d1 _lh_percOp_arg1_0 _lh_percOp_arg2_0 _lh_percOp_arg3_0 =
//│ 		  (if (_lh_percOp_arg1_0 >= _lh_percOp_arg3_0) then
//│ 		    (`LH_N)
//│ 		  else
//│ 		    (let rec k_1 = (_lh_percOp_arg1_0 + 10) in
//│ 		      (let rec j_0 = ((min_lh__d1 _lh_percOp_arg3_0) k_1) in
//│ 		        (let rec _lh_matchIdent_3 = (if (k_1 > _lh_percOp_arg3_0) then
//│ 		          (`LH_P2(((mappend_lh__d4 ((take_lz_lh__d1 (_lh_percOp_arg3_0 mod 10)) _lh_percOp_arg2_0)) ((replicate_lh__d1 (k_1 - _lh_percOp_arg3_0)) (`LH_C(' ', (`LH_N))))), (lazy (`LH_N))))
//│ 		        else
//│ 		          ((splitAt_lz_lh__d1 10) _lh_percOp_arg2_0)) in
//│ 		          (match _lh_matchIdent_3 with
//│ 		            | `LH_P2(_lh_percOp_LH_P2_0_0, _lh_percOp_LH_P2_1_0) -> 
//│ 		              ((mappend_lh__d5 ((mappend_lh__d2 (concat_lh__d1 _lh_percOp_LH_P2_0_0)) ((mappend_lh__d3 (`LH_C('t', (`LH_C(':', (`LH_N)))))) ((mappend_lh__d1 (string_of_int j_0)) (`LH_C('n', (`LH_N))))))) (((percOp_lh__d1 j_0) _lh_percOp_LH_P2_1_0) _lh_percOp_arg3_0))
//│ 		            | _ -> 
//│ 		              (failwith "error"))))));;
//│ 		let rec pidgits_lh__d1 _lh_pidgits_arg1_0 =
//│ 		  (((percOp_lh__d1 0) ((hashOp_lh__d1 0) (`LH_P3(1, 0, 1)))) _lh_pidgits_arg1_0);;
//│ 		let rec testPiDigits_nofib_lh__d1 _lh_testPiDigits_nofib_arg1_0 =
//│ 		  (pidgits_lh__d1 _lh_testPiDigits_nofib_arg1_0);;
//│ 		(testPiDigits_nofib_lh__d1 5000)
//│ 		---------- unoptimized ocaml gen ----------
//│ <<<<<<<<<< Original <<<<<<<<<<
//│ 
//│ >>>>>>> fusion matches >>>>>>>
//│ [LH_C h⁰ take_lz_lh_₂((n⁰ - 1), t⁰)]: 19 --->
//│ 	case lss⁰ of {LH_C h⁸ t⁸ => mappend_lh_₆(h⁸, concat_lh_₁(t⁸)) | LH_N  => [LH_N]}: 257
//│ [LH_N]: 20 --->
//│ 	case lss⁰ of {LH_C h⁸ t⁸ => mappend_lh_₆(h⁸, concat_lh_₁(t⁸)) | LH_N  => [LH_N]}: 257
//│ [LH_N]: 22 --->
//│ 	case lss⁰ of {LH_C h⁸ t⁸ => mappend_lh_₆(h⁸, concat_lh_₁(t⁸)) | LH_N  => [LH_N]}: 257
//│ [LH_N]: 36 --->
//│ 	case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C h⁰ take_lz_lh_₂((n⁰ - 1), t⁰)] | LH_N  => [LH_N]}: 21
//│ 	case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_lz_LH_C_0⁰ _lh_drop_lz_LH_C_1⁰ => force⁰(drop_lz_lh_₁((_lh_drop_lz_arg1⁰ - 1), _lh_drop_lz_LH_C_1⁰)) | _  => error⁰}: 49
//│ 	case force⁰(ls¹) of {LH_C h⁷ t⁷ => [LH_C h⁷ take_lz_lh_₁((n¹ - 1), t⁷)] | LH_N  => [LH_N]}: 243
//│ [LH_C h¹ mappend_lh_₆(t¹, ys⁰)]: 63 --->
//│ 	case xs⁴ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₂(t⁵, ys⁴)] | LH_N  => ys⁴}: 208
//│ [LH_P3 (_lh_ampOp_LH_P3_0⁰ * _lh_ampOp_arg1⁰) ((_lh_ampOp_LH_P3_1⁰ + (_lh_ampOp_LH_P3_0⁰ * 2)) * y⁰) (_lh_ampOp_LH_P3_2⁰ * y⁰)]: 101 --->
//│ 	case _lh_matchIdent¹ of {LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰ => let _lh_matchIdent² = divmod_lh_₁(((_lh_hashOp_LH_P3_0⁰ * 3) + _lh_hashOp_LH_P3_1⁰), _lh_hashOp_LH_P3_2⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_hashOp_LH_P2_0⁰ _lh_hashOp_LH_P2_1⁰ => if ((_lh_hashOp_LH_P3_0⁰ > _lh_hashOp_LH_P3_1⁰) || ((_lh_hashOp_LH_P2_1⁰ + _lh_hashOp_LH_P3_0⁰) >= _lh_hashOp_LH_P3_2⁰)) then force⁰(hashOp_lh_₁(k⁰, [LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) hashOp_lh_₁(k⁰, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])] | _  => error⁰} | _  => error⁰}: 345
//│ [LH_P2 div⁰(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰) (_lh_divmod_arg1⁰ % _lh_divmod_arg2⁰)]: 117 --->
//│ 	case _lh_matchIdent² of {LH_P2 _lh_hashOp_LH_P2_0⁰ _lh_hashOp_LH_P2_1⁰ => if ((_lh_hashOp_LH_P3_0⁰ > _lh_hashOp_LH_P3_1⁰) || ((_lh_hashOp_LH_P2_1⁰ + _lh_hashOp_LH_P3_0⁰) >= _lh_hashOp_LH_P3_2⁰)) then force⁰(hashOp_lh_₁(k⁰, [LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) hashOp_lh_₁(k⁰, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])] | _  => error⁰}: 342
//│ [LH_C h³ mappend_lh_₄(t³, ys²)]: 139 --->
//│ 	case lss⁰ of {LH_C h⁸ t⁸ => mappend_lh_₆(h⁸, concat_lh_₁(t⁸)) | LH_N  => [LH_N]}: 257
//│ [LH_C _lh_replicate_arg2⁰ replicate_lh_₁((_lh_replicate_arg1⁰ - 1), _lh_replicate_arg2⁰)]: 169 --->
//│ 	case lss⁰ of {LH_C h⁸ t⁸ => mappend_lh_₆(h⁸, concat_lh_₁(t⁸)) | LH_N  => [LH_N]}: 257
//│ [LH_N]: 170 --->
//│ 	case lss⁰ of {LH_C h⁸ t⁸ => mappend_lh_₆(h⁸, concat_lh_₁(t⁸)) | LH_N  => [LH_N]}: 257
//│ [LH_P2 take_lz_lh_₂(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰) drop_lz_lh_₁(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰)]: 184 --->
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_percOp_LH_P2_0⁰ _lh_percOp_LH_P2_1⁰ => mappend_lh_₅(mappend_lh_₂(concat_lh_₁(_lh_percOp_LH_P2_0⁰), mappend_lh_₃([LH_C 't' [LH_C ':' [LH_N]]], mappend_lh_₁(string_of_int⁰(j⁰), [LH_C 'n' [LH_N]]))), percOp_lh_₁(j⁰, _lh_percOp_LH_P2_1⁰, _lh_percOp_arg3⁰)) | _  => error⁰}: 440
//│ [LH_C h⁴ mappend_lh_₃(t⁴, ys³)]: 194 --->
//│ 	case xs¹ of {LH_C h² t² => [LH_C h² mappend_lh_₅(t², ys¹)] | LH_N  => ys¹}: 129
//│ [LH_C h⁵ mappend_lh_₂(t⁵, ys⁴)]: 206 --->
//│ 	case xs¹ of {LH_C h² t² => [LH_C h² mappend_lh_₅(t², ys¹)] | LH_N  => ys¹}: 129
//│ [LH_C h⁶ mappend_lh_₁(t⁶, ys⁵)]: 218 --->
//│ 	case xs¹ of {LH_C h² t² => [LH_C h² mappend_lh_₅(t², ys¹)] | LH_N  => ys¹}: 129
//│ [LH_C h⁷ take_lz_lh_₁((n¹ - 1), t⁷)]: 241 --->
//│ 	case xs² of {LH_C h³ t³ => [LH_C h³ mappend_lh_₄(t³, ys²)] | LH_N  => ys²}: 141
//│ [LH_N]: 242 --->
//│ 	case xs² of {LH_C h³ t³ => [LH_C h³ mappend_lh_₄(t³, ys²)] | LH_N  => ys²}: 141
//│ [LH_N]: 244 --->
//│ 	case xs² of {LH_C h³ t³ => [LH_C h³ mappend_lh_₄(t³, ys²)] | LH_N  => ys²}: 141
//│ [LH_N]: 256 --->
//│ 	case xs⁴ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₂(t⁵, ys⁴)] | LH_N  => ys⁴}: 208
//│ [LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰]: 309 --->
//│ 	case _lh_ampOp_arg2⁰ of {LH_P3 _lh_ampOp_LH_P3_0⁰ _lh_ampOp_LH_P3_1⁰ _lh_ampOp_LH_P3_2⁰ => let y⁰ = ((_lh_ampOp_arg1⁰ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0⁰ * _lh_ampOp_arg1⁰) ((_lh_ampOp_LH_P3_1⁰ + (_lh_ampOp_LH_P3_0⁰ * 2)) * y⁰) (_lh_ampOp_LH_P3_2⁰ * y⁰)] | _  => error⁰}: 104
//│ [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰]: 337 --->
//│ 	case _lh_ampOp_arg2⁰ of {LH_P3 _lh_ampOp_LH_P3_0⁰ _lh_ampOp_LH_P3_1⁰ _lh_ampOp_LH_P3_2⁰ => let y⁰ = ((_lh_ampOp_arg1⁰ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0⁰ * _lh_ampOp_arg1⁰) ((_lh_ampOp_LH_P3_1⁰ + (_lh_ampOp_LH_P3_0⁰ * 2)) * y⁰) (_lh_ampOp_LH_P3_2⁰ * y⁰)] | _  => error⁰}: 104
//│ [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) hashOp_lh_₁(k⁰, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])]: 339 --->
//│ 	case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C h⁰ take_lz_lh_₂((n⁰ - 1), t⁰)] | LH_N  => [LH_N]}: 21
//│ 	case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_lz_LH_C_0⁰ _lh_drop_lz_LH_C_1⁰ => force⁰(drop_lz_lh_₁((_lh_drop_lz_arg1⁰ - 1), _lh_drop_lz_LH_C_1⁰)) | _  => error⁰}: 49
//│ 	case force⁰(ls¹) of {LH_C h⁷ t⁷ => [LH_C h⁷ take_lz_lh_₁((n¹ - 1), t⁷)] | LH_N  => [LH_N]}: 243
//│ [LH_N]: 391 --->
//│ 	case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh_₆(t¹, ys⁰)] | LH_N  => ys⁰}: 65
//│ [LH_C ' ' [LH_N]]: 392 --->
//│ 	case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh_₆(t¹, ys⁰)] | LH_N  => ys⁰}: 65
//│ [LH_N]: 396 --->
//│ 	case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C h⁰ take_lz_lh_₂((n⁰ - 1), t⁰)] | LH_N  => [LH_N]}: 21
//│ 	case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_lz_LH_C_0⁰ _lh_drop_lz_LH_C_1⁰ => force⁰(drop_lz_lh_₁((_lh_drop_lz_arg1⁰ - 1), _lh_drop_lz_LH_C_1⁰)) | _  => error⁰}: 49
//│ 	case force⁰(ls¹) of {LH_C h⁷ t⁷ => [LH_C h⁷ take_lz_lh_₁((n¹ - 1), t⁷)] | LH_N  => [LH_N]}: 243
//│ [LH_P2 mappend_lh_₄(take_lz_lh_₁((_lh_percOp_arg3⁰ % 10), _lh_percOp_arg2⁰), replicate_lh_₁((k¹ - _lh_percOp_arg3⁰), [LH_C ' ' [LH_N]])) lazy⁰([LH_N])]: 398 --->
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_percOp_LH_P2_0⁰ _lh_percOp_LH_P2_1⁰ => mappend_lh_₅(mappend_lh_₂(concat_lh_₁(_lh_percOp_LH_P2_0⁰), mappend_lh_₃([LH_C 't' [LH_C ':' [LH_N]]], mappend_lh_₁(string_of_int⁰(j⁰), [LH_C 'n' [LH_N]]))), percOp_lh_₁(j⁰, _lh_percOp_LH_P2_1⁰, _lh_percOp_arg3⁰)) | _  => error⁰}: 440
//│ [LH_N]: 415 --->
//│ 	case xs³ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₃(t⁴, ys³)] | LH_N  => ys³}: 196
//│ [LH_C ':' [LH_N]]: 416 --->
//│ 	case xs³ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₃(t⁴, ys³)] | LH_N  => ys³}: 196
//│ [LH_C 't' [LH_C ':' [LH_N]]]: 417 --->
//│ 	case xs³ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₃(t⁴, ys³)] | LH_N  => ys³}: 196
//│ [LH_N]: 425 --->
//│ 	case xs¹ of {LH_C h² t² => [LH_C h² mappend_lh_₅(t², ys¹)] | LH_N  => ys¹}: 129
//│ [LH_C 'n' [LH_N]]: 426 --->
//│ 	case xs¹ of {LH_C h² t² => [LH_C h² mappend_lh_₅(t², ys¹)] | LH_N  => ys¹}: 129
//│ [LH_P3 1 0 1]: 457 --->
//│ 	case _lh_ampOp_arg2⁰ of {LH_P3 _lh_ampOp_LH_P3_0⁰ _lh_ampOp_LH_P3_1⁰ _lh_ampOp_LH_P3_2⁰ => let y⁰ = ((_lh_ampOp_arg1⁰ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0⁰ * _lh_ampOp_arg1⁰) ((_lh_ampOp_LH_P3_1⁰ + (_lh_ampOp_LH_P3_0⁰ * 2)) * y⁰) (_lh_ampOp_LH_P3_2⁰ * y⁰)] | _  => error⁰}: 104
//│ ------------------
//│ case force⁰(ls⁰) of {LH_C h⁰ t⁰ => [LH_C h⁰ take_lz_lh_₂((n⁰ - 1), t⁰)] | LH_N  => [LH_N]}: 21 --->
//│ 	[LH_N]: 36
//│ 	[LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) hashOp_lh_₁(k⁰, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])]: 339
//│ 	[LH_N]: 396
//│ case _lh_matchIdent⁰ of {LH_N  => [LH_N] | LH_C _lh_drop_lz_LH_C_0⁰ _lh_drop_lz_LH_C_1⁰ => force⁰(drop_lz_lh_₁((_lh_drop_lz_arg1⁰ - 1), _lh_drop_lz_LH_C_1⁰)) | _  => error⁰}: 49 --->
//│ 	[LH_N]: 36
//│ 	[LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) hashOp_lh_₁(k⁰, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])]: 339
//│ 	[LH_N]: 396
//│ case xs⁰ of {LH_C h¹ t¹ => [LH_C h¹ mappend_lh_₆(t¹, ys⁰)] | LH_N  => ys⁰}: 65 --->
//│ 	NoProd
//│ 	[LH_N]: 391
//│ 	[LH_C ' ' [LH_N]]: 392
//│ case _lh_ampOp_arg2⁰ of {LH_P3 _lh_ampOp_LH_P3_0⁰ _lh_ampOp_LH_P3_1⁰ _lh_ampOp_LH_P3_2⁰ => let y⁰ = ((_lh_ampOp_arg1⁰ * 2) + 1)
//│ in [LH_P3 (_lh_ampOp_LH_P3_0⁰ * _lh_ampOp_arg1⁰) ((_lh_ampOp_LH_P3_1⁰ + (_lh_ampOp_LH_P3_0⁰ * 2)) * y⁰) (_lh_ampOp_LH_P3_2⁰ * y⁰)] | _  => error⁰}: 104 --->
//│ 	[LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰]: 309
//│ 	[LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰]: 337
//│ 	[LH_P3 1 0 1]: 457
//│ case xs¹ of {LH_C h² t² => [LH_C h² mappend_lh_₅(t², ys¹)] | LH_N  => ys¹}: 129 --->
//│ 	[LH_C h⁴ mappend_lh_₃(t⁴, ys³)]: 194
//│ 	[LH_C h⁵ mappend_lh_₂(t⁵, ys⁴)]: 206
//│ 	[LH_C h⁶ mappend_lh_₁(t⁶, ys⁵)]: 218
//│ 	[LH_N]: 425
//│ 	[LH_C 'n' [LH_N]]: 426
//│ case xs² of {LH_C h³ t³ => [LH_C h³ mappend_lh_₄(t³, ys²)] | LH_N  => ys²}: 141 --->
//│ 	[LH_C h⁷ take_lz_lh_₁((n¹ - 1), t⁷)]: 241
//│ 	[LH_N]: 242
//│ 	[LH_N]: 244
//│ case xs³ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₃(t⁴, ys³)] | LH_N  => ys³}: 196 --->
//│ 	[LH_N]: 415
//│ 	[LH_C ':' [LH_N]]: 416
//│ 	[LH_C 't' [LH_C ':' [LH_N]]]: 417
//│ case xs⁴ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₂(t⁵, ys⁴)] | LH_N  => ys⁴}: 208 --->
//│ 	[LH_C h¹ mappend_lh_₆(t¹, ys⁰)]: 63
//│ 	[LH_N]: 256
//│ case force⁰(ls¹) of {LH_C h⁷ t⁷ => [LH_C h⁷ take_lz_lh_₁((n¹ - 1), t⁷)] | LH_N  => [LH_N]}: 243 --->
//│ 	[LH_N]: 36
//│ 	[LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) hashOp_lh_₁(k⁰, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])]: 339
//│ 	[LH_N]: 396
//│ case lss⁰ of {LH_C h⁸ t⁸ => mappend_lh_₆(h⁸, concat_lh_₁(t⁸)) | LH_N  => [LH_N]}: 257 --->
//│ 	[LH_C h⁰ take_lz_lh_₂((n⁰ - 1), t⁰)]: 19
//│ 	[LH_N]: 20
//│ 	[LH_N]: 22
//│ 	[LH_C h³ mappend_lh_₄(t³, ys²)]: 139
//│ 	[LH_C _lh_replicate_arg2⁰ replicate_lh_₁((_lh_replicate_arg1⁰ - 1), _lh_replicate_arg2⁰)]: 169
//│ 	[LH_N]: 170
//│ case _lh_matchIdent² of {LH_P2 _lh_hashOp_LH_P2_0⁰ _lh_hashOp_LH_P2_1⁰ => if ((_lh_hashOp_LH_P3_0⁰ > _lh_hashOp_LH_P3_1⁰) || ((_lh_hashOp_LH_P2_1⁰ + _lh_hashOp_LH_P3_0⁰) >= _lh_hashOp_LH_P3_2⁰)) then force⁰(hashOp_lh_₁(k⁰, [LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) hashOp_lh_₁(k⁰, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])] | _  => error⁰}: 342 --->
//│ 	[LH_P2 div⁰(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰) (_lh_divmod_arg1⁰ % _lh_divmod_arg2⁰)]: 117
//│ case _lh_matchIdent¹ of {LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰ => let _lh_matchIdent² = divmod_lh_₁(((_lh_hashOp_LH_P3_0⁰ * 3) + _lh_hashOp_LH_P3_1⁰), _lh_hashOp_LH_P3_2⁰)
//│ in case _lh_matchIdent² of {LH_P2 _lh_hashOp_LH_P2_0⁰ _lh_hashOp_LH_P2_1⁰ => if ((_lh_hashOp_LH_P3_0⁰ > _lh_hashOp_LH_P3_1⁰) || ((_lh_hashOp_LH_P2_1⁰ + _lh_hashOp_LH_P3_0⁰) >= _lh_hashOp_LH_P3_2⁰)) then force⁰(hashOp_lh_₁(k⁰, [LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) hashOp_lh_₁(k⁰, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])] | _  => error⁰} | _  => error⁰}: 345 --->
//│ 	[LH_P3 (_lh_ampOp_LH_P3_0⁰ * _lh_ampOp_arg1⁰) ((_lh_ampOp_LH_P3_1⁰ + (_lh_ampOp_LH_P3_0⁰ * 2)) * y⁰) (_lh_ampOp_LH_P3_2⁰ * y⁰)]: 101
//│ case _lh_matchIdent³ of {LH_P2 _lh_percOp_LH_P2_0⁰ _lh_percOp_LH_P2_1⁰ => mappend_lh_₅(mappend_lh_₂(concat_lh_₁(_lh_percOp_LH_P2_0⁰), mappend_lh_₃([LH_C 't' [LH_C ':' [LH_N]]], mappend_lh_₁(string_of_int⁰(j⁰), [LH_C 'n' [LH_N]]))), percOp_lh_₁(j⁰, _lh_percOp_LH_P2_1⁰, _lh_percOp_arg3⁰)) | _  => error⁰}: 440 --->
//│ 	[LH_P2 take_lz_lh_₂(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰) drop_lz_lh_₁(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰)]: 184
//│ 	[LH_P2 mappend_lh_₄(take_lz_lh_₁((_lh_percOp_arg3⁰ % 10), _lh_percOp_arg2⁰), replicate_lh_₁((k¹ - _lh_percOp_arg3⁰), [LH_C ' ' [LH_N]])) lazy⁰([LH_N])]: 398
//│ <<<<<<< fusion matches <<<<<<<
//│ 
//│ >>>>>>> new fusion strategy >>>>>>>
//│ [LH_C h⁰ take_lz_lh_₂((n⁰ - 1), t⁰)]: 19 --->
//│ 	case lss⁰ of {LH_C h⁸ t⁸ => mappend_lh_₆(h⁸, concat_lh_₁(t⁸)) | LH_N  => [LH_N]}: 257
//│ [LH_N]: 20 --->
//│ 	case lss⁰ of {LH_C h⁸ t⁸ => mappend_lh_₆(h⁸, concat_lh_₁(t⁸)) | LH_N  => [LH_N]}: 257
//│ [LH_N]: 22 --->
//│ 	case lss⁰ of {LH_C h⁸ t⁸ => mappend_lh_₆(h⁸, concat_lh_₁(t⁸)) | LH_N  => [LH_N]}: 257
//│ [LH_C h¹ mappend_lh_₆(t¹, ys⁰)]: 63 --->
//│ 	case xs⁴ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₂(t⁵, ys⁴)] | LH_N  => ys⁴}: 208
//│ [LH_P2 div⁰(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰) (_lh_divmod_arg1⁰ % _lh_divmod_arg2⁰)]: 117 --->
//│ 	case _lh_matchIdent² of {LH_P2 _lh_hashOp_LH_P2_0⁰ _lh_hashOp_LH_P2_1⁰ => if ((_lh_hashOp_LH_P3_0⁰ > _lh_hashOp_LH_P3_1⁰) || ((_lh_hashOp_LH_P2_1⁰ + _lh_hashOp_LH_P3_0⁰) >= _lh_hashOp_LH_P3_2⁰)) then force⁰(hashOp_lh_₁(k⁰, [LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) hashOp_lh_₁(k⁰, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])] | _  => error⁰}: 342
//│ [LH_C h³ mappend_lh_₄(t³, ys²)]: 139 --->
//│ 	case lss⁰ of {LH_C h⁸ t⁸ => mappend_lh_₆(h⁸, concat_lh_₁(t⁸)) | LH_N  => [LH_N]}: 257
//│ [LH_C _lh_replicate_arg2⁰ replicate_lh_₁((_lh_replicate_arg1⁰ - 1), _lh_replicate_arg2⁰)]: 169 --->
//│ 	case lss⁰ of {LH_C h⁸ t⁸ => mappend_lh_₆(h⁸, concat_lh_₁(t⁸)) | LH_N  => [LH_N]}: 257
//│ [LH_N]: 170 --->
//│ 	case lss⁰ of {LH_C h⁸ t⁸ => mappend_lh_₆(h⁸, concat_lh_₁(t⁸)) | LH_N  => [LH_N]}: 257
//│ [LH_P2 take_lz_lh_₂(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰) drop_lz_lh_₁(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰)]: 184 --->
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_percOp_LH_P2_0⁰ _lh_percOp_LH_P2_1⁰ => mappend_lh_₅(mappend_lh_₂(concat_lh_₁(_lh_percOp_LH_P2_0⁰), mappend_lh_₃([LH_C 't' [LH_C ':' [LH_N]]], mappend_lh_₁(string_of_int⁰(j⁰), [LH_C 'n' [LH_N]]))), percOp_lh_₁(j⁰, _lh_percOp_LH_P2_1⁰, _lh_percOp_arg3⁰)) | _  => error⁰}: 440
//│ [LH_C h⁴ mappend_lh_₃(t⁴, ys³)]: 194 --->
//│ 	case xs¹ of {LH_C h² t² => [LH_C h² mappend_lh_₅(t², ys¹)] | LH_N  => ys¹}: 129
//│ [LH_C h⁵ mappend_lh_₂(t⁵, ys⁴)]: 206 --->
//│ 	case xs¹ of {LH_C h² t² => [LH_C h² mappend_lh_₅(t², ys¹)] | LH_N  => ys¹}: 129
//│ [LH_C h⁶ mappend_lh_₁(t⁶, ys⁵)]: 218 --->
//│ 	case xs¹ of {LH_C h² t² => [LH_C h² mappend_lh_₅(t², ys¹)] | LH_N  => ys¹}: 129
//│ [LH_C h⁷ take_lz_lh_₁((n¹ - 1), t⁷)]: 241 --->
//│ 	case xs² of {LH_C h³ t³ => [LH_C h³ mappend_lh_₄(t³, ys²)] | LH_N  => ys²}: 141
//│ [LH_N]: 242 --->
//│ 	case xs² of {LH_C h³ t³ => [LH_C h³ mappend_lh_₄(t³, ys²)] | LH_N  => ys²}: 141
//│ [LH_N]: 244 --->
//│ 	case xs² of {LH_C h³ t³ => [LH_C h³ mappend_lh_₄(t³, ys²)] | LH_N  => ys²}: 141
//│ [LH_N]: 256 --->
//│ 	case xs⁴ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₂(t⁵, ys⁴)] | LH_N  => ys⁴}: 208
//│ [LH_P2 mappend_lh_₄(take_lz_lh_₁((_lh_percOp_arg3⁰ % 10), _lh_percOp_arg2⁰), replicate_lh_₁((k¹ - _lh_percOp_arg3⁰), [LH_C ' ' [LH_N]])) lazy⁰([LH_N])]: 398 --->
//│ 	case _lh_matchIdent³ of {LH_P2 _lh_percOp_LH_P2_0⁰ _lh_percOp_LH_P2_1⁰ => mappend_lh_₅(mappend_lh_₂(concat_lh_₁(_lh_percOp_LH_P2_0⁰), mappend_lh_₃([LH_C 't' [LH_C ':' [LH_N]]], mappend_lh_₁(string_of_int⁰(j⁰), [LH_C 'n' [LH_N]]))), percOp_lh_₁(j⁰, _lh_percOp_LH_P2_1⁰, _lh_percOp_arg3⁰)) | _  => error⁰}: 440
//│ [LH_N]: 415 --->
//│ 	case xs³ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₃(t⁴, ys³)] | LH_N  => ys³}: 196
//│ [LH_C ':' [LH_N]]: 416 --->
//│ 	case xs³ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₃(t⁴, ys³)] | LH_N  => ys³}: 196
//│ [LH_C 't' [LH_C ':' [LH_N]]]: 417 --->
//│ 	case xs³ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₃(t⁴, ys³)] | LH_N  => ys³}: 196
//│ [LH_N]: 425 --->
//│ 	case xs¹ of {LH_C h² t² => [LH_C h² mappend_lh_₅(t², ys¹)] | LH_N  => ys¹}: 129
//│ [LH_C 'n' [LH_N]]: 426 --->
//│ 	case xs¹ of {LH_C h² t² => [LH_C h² mappend_lh_₅(t², ys¹)] | LH_N  => ys¹}: 129
//│ ------------------
//│ case xs¹ of {LH_C h² t² => [LH_C h² mappend_lh_₅(t², ys¹)] | LH_N  => ys¹}: 129 --->
//│ 	[LH_C h⁴ mappend_lh_₃(t⁴, ys³)]: 194
//│ 	[LH_C h⁵ mappend_lh_₂(t⁵, ys⁴)]: 206
//│ 	[LH_C h⁶ mappend_lh_₁(t⁶, ys⁵)]: 218
//│ 	[LH_N]: 425
//│ 	[LH_C 'n' [LH_N]]: 426
//│ case xs² of {LH_C h³ t³ => [LH_C h³ mappend_lh_₄(t³, ys²)] | LH_N  => ys²}: 141 --->
//│ 	[LH_C h⁷ take_lz_lh_₁((n¹ - 1), t⁷)]: 241
//│ 	[LH_N]: 242
//│ 	[LH_N]: 244
//│ case xs³ of {LH_C h⁴ t⁴ => [LH_C h⁴ mappend_lh_₃(t⁴, ys³)] | LH_N  => ys³}: 196 --->
//│ 	[LH_N]: 415
//│ 	[LH_C ':' [LH_N]]: 416
//│ 	[LH_C 't' [LH_C ':' [LH_N]]]: 417
//│ case xs⁴ of {LH_C h⁵ t⁵ => [LH_C h⁵ mappend_lh_₂(t⁵, ys⁴)] | LH_N  => ys⁴}: 208 --->
//│ 	[LH_C h¹ mappend_lh_₆(t¹, ys⁰)]: 63
//│ 	[LH_N]: 256
//│ case lss⁰ of {LH_C h⁸ t⁸ => mappend_lh_₆(h⁸, concat_lh_₁(t⁸)) | LH_N  => [LH_N]}: 257 --->
//│ 	[LH_C h⁰ take_lz_lh_₂((n⁰ - 1), t⁰)]: 19
//│ 	[LH_N]: 20
//│ 	[LH_N]: 22
//│ 	[LH_C h³ mappend_lh_₄(t³, ys²)]: 139
//│ 	[LH_C _lh_replicate_arg2⁰ replicate_lh_₁((_lh_replicate_arg1⁰ - 1), _lh_replicate_arg2⁰)]: 169
//│ 	[LH_N]: 170
//│ case _lh_matchIdent² of {LH_P2 _lh_hashOp_LH_P2_0⁰ _lh_hashOp_LH_P2_1⁰ => if ((_lh_hashOp_LH_P3_0⁰ > _lh_hashOp_LH_P3_1⁰) || ((_lh_hashOp_LH_P2_1⁰ + _lh_hashOp_LH_P3_0⁰) >= _lh_hashOp_LH_P3_2⁰)) then force⁰(hashOp_lh_₁(k⁰, [LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) hashOp_lh_₁(k⁰, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])] | _  => error⁰}: 342 --->
//│ 	[LH_P2 div⁰(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰) (_lh_divmod_arg1⁰ % _lh_divmod_arg2⁰)]: 117
//│ case _lh_matchIdent³ of {LH_P2 _lh_percOp_LH_P2_0⁰ _lh_percOp_LH_P2_1⁰ => mappend_lh_₅(mappend_lh_₂(concat_lh_₁(_lh_percOp_LH_P2_0⁰), mappend_lh_₃([LH_C 't' [LH_C ':' [LH_N]]], mappend_lh_₁(string_of_int⁰(j⁰), [LH_C 'n' [LH_N]]))), percOp_lh_₁(j⁰, _lh_percOp_LH_P2_1⁰, _lh_percOp_arg3⁰)) | _  => error⁰}: 440 --->
//│ 	[LH_P2 take_lz_lh_₂(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰) drop_lz_lh_₁(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰)]: 184
//│ 	[LH_P2 mappend_lh_₄(take_lz_lh_₁((_lh_percOp_arg3⁰ % 10), _lh_percOp_arg2⁰), replicate_lh_₁((k¹ - _lh_percOp_arg3⁰), [LH_C ' ' [LH_N]])) lazy⁰([LH_N])]: 398
//│ <<<<<<< new fusion strategy <<<<<<<
//│ 
//│ >>>>>>> after fusion >>>>>>>
//│ testPiDigits_nofib_lh_₁(primId⁰(5000))
//│ def ampOp_lh_₁(_lh_ampOp_arg1¹, _lh_ampOp_arg2¹) = case _lh_ampOp_arg2¹ of {
//│ 	LH_P3 _lh_ampOp_LH_P3_0⁰ _lh_ampOp_LH_P3_1⁰ _lh_ampOp_LH_P3_2⁰ => 
//│ 		let y¹ = ((_lh_ampOp_arg1¹ * 2) + 1)
//│ 		in [LH_P3 (_lh_ampOp_LH_P3_0⁰ * _lh_ampOp_arg1¹) ((_lh_ampOp_LH_P3_1⁰ + (_lh_ampOp_LH_P3_0⁰ * 2)) * y¹) (_lh_ampOp_LH_P3_2⁰ * y¹)]
//│ 	| _  => error⁰}
//│ def concat_lh_₁(lss¹) = lss¹(99)
//│ def divmod_lh_₁(_lh_divmod_arg1¹, _lh_divmod_arg2¹) = 
//│ 	let _lh_hashOp_LH_P2_1¹ = (_lh_divmod_arg1¹ % _lh_divmod_arg2¹)
//│ 	in let _lh_hashOp_LH_P2_0¹ = div⁰(_lh_divmod_arg1¹, _lh_divmod_arg2¹)
//│ 	in (fun _lh_hashOp_LH_P3_0¹ -> (fun _lh_hashOp_LH_P3_1¹ -> (fun _lh_hashOp_LH_P3_2¹ -> (fun k³ -> if ((_lh_hashOp_LH_P3_0¹ > _lh_hashOp_LH_P3_1¹) || ((_lh_hashOp_LH_P2_1¹ + _lh_hashOp_LH_P3_0¹) >= _lh_hashOp_LH_P3_2¹)) then force⁰(hashOp_lh_₁(k³, [LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹])) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0¹) hashOp_lh_₁(k³, [LH_P3 (_lh_hashOp_LH_P3_0¹ * 10) ((_lh_hashOp_LH_P3_1¹ - (_lh_hashOp_LH_P2_0¹ * _lh_hashOp_LH_P3_2¹)) * 10) _lh_hashOp_LH_P3_2¹])]))))
//│ def drop_lz_lh_₁(_lh_drop_lz_arg1¹, _lh_drop_lz_arg2¹) = if (_lh_drop_lz_arg1¹ > 0) then lazy⁰(
//│ 	let _lh_matchIdent⁵ = force⁰(_lh_drop_lz_arg2¹)
//│ 	in case _lh_matchIdent⁵ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_drop_lz_LH_C_0⁰ _lh_drop_lz_LH_C_1⁰ => force⁰(drop_lz_lh_₁((_lh_drop_lz_arg1¹ - 1), _lh_drop_lz_LH_C_1⁰))
//│ 		| _  => error⁰}) else _lh_drop_lz_arg2¹
//│ def hashOp_lh_₁(_lh_hashOp_arg1¹, _lh_hashOp_arg2¹) = lazy⁰(
//│ 	let k⁴ = (_lh_hashOp_arg1¹ + 1)
//│ 	in let _lh_matchIdent⁶ = ampOp_lh_₁(k⁴, _lh_hashOp_arg2¹)
//│ 	in case _lh_matchIdent⁶ of {
//│ 		LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰ => 
//│ 			let _lh_matchIdent⁷ = divmod_lh_₁(((_lh_hashOp_LH_P3_0⁰ * 3) + _lh_hashOp_LH_P3_1⁰), _lh_hashOp_LH_P3_2⁰)
//│ 			in _lh_matchIdent⁷(_lh_hashOp_LH_P3_0⁰, _lh_hashOp_LH_P3_1⁰, _lh_hashOp_LH_P3_2⁰, k⁴)
//│ 		| _  => error⁰})
//│ def mappend_lh_₁(xs⁶, ys¹³) = case xs⁶ of {
//│ 	LH_C h⁶ t⁶ => 
//│ 		let t¹⁴ = mappend_lh_₁(t⁶, ys¹³)
//│ 		in let h¹⁴ = h⁶
//│ 		in (fun ys¹⁴ -> [LH_C h¹⁴ mappend_lh_₅(t¹⁴, ys¹⁴)])
//│ 	| LH_N  => ys¹³}
//│ def mappend_lh_₂(xs⁷, ys²²) = xs⁷(ys²²)
//│ def mappend_lh_₃(xs⁹, ys²⁹) = xs⁹(ys²⁹)
//│ def mappend_lh_₄(xs¹¹, ys³⁴) = xs¹¹(ys³⁴)
//│ def mappend_lh_₅(xs⁸, ys²³) = xs⁸(ys²³)
//│ def mappend_lh_₆(xs¹⁰, ys³¹) = case xs¹⁰ of {
//│ 	LH_C h¹ t¹ => 
//│ 		let t²⁴ = mappend_lh_₆(t¹, ys³¹)
//│ 		in let h²⁴ = h¹
//│ 		in (fun ys³² -> 
//│ 			let t²⁵ = mappend_lh_₂(t²⁴, ys³²)
//│ 			in let h²⁵ = h²⁴
//│ 			in (fun ys³³ -> [LH_C h²⁵ mappend_lh_₅(t²⁵, ys³³)]))
//│ 	| LH_N  => ys³¹}
//│ def min_lh_₁(_lh_min_arg1¹, _lh_min_arg2¹) = if (_lh_min_arg1¹ > _lh_min_arg2¹) then _lh_min_arg2¹ else _lh_min_arg1¹
//│ def percOp_lh_₁(_lh_percOp_arg1¹, _lh_percOp_arg2¹, _lh_percOp_arg3¹) = if (_lh_percOp_arg1¹ >= _lh_percOp_arg3¹) then [LH_N] else 
//│ 	let k² = (_lh_percOp_arg1¹ + 10)
//│ 	in let j¹ = min_lh_₁(_lh_percOp_arg3¹, k²)
//│ 	in let _lh_matchIdent⁴ = if (k² > _lh_percOp_arg3¹) then 
//│ 		let _lh_percOp_LH_P2_1¹ = lazy⁰([LH_N])
//│ 		in let _lh_percOp_LH_P2_0¹ = mappend_lh_₄(take_lz_lh_₁((_lh_percOp_arg3¹ % 10), _lh_percOp_arg2¹), replicate_lh_₁((k² - _lh_percOp_arg3¹), [LH_C ' ' [LH_N]]))
//│ 		in (fun _lh_percOp_arg3² -> (fun j² -> mappend_lh_₅(mappend_lh_₂(concat_lh_₁(_lh_percOp_LH_P2_0¹), mappend_lh_₃(
//│ 			let t⁹ = 	
//│ 				let t¹¹ = (fun ys¹⁰ -> ys¹⁰)
//│ 				in let h¹¹ = ':'
//│ 				in (fun ys⁸ -> 
//│ 					let t¹² = mappend_lh_₃(t¹¹, ys⁸)
//│ 					in let h¹² = h¹¹
//│ 					in (fun ys⁹ -> [LH_C h¹² mappend_lh_₅(t¹², ys⁹)]))
//│ 			in let h⁹ = 't'
//│ 			in (fun ys⁶ -> 
//│ 				let t¹⁰ = mappend_lh_₃(t⁹, ys⁶)
//│ 				in let h¹⁰ = h⁹
//│ 				in (fun ys⁷ -> [LH_C h¹⁰ mappend_lh_₅(t¹⁰, ys⁷)])), mappend_lh_₁(string_of_int⁰(j²), 
//│ 			let t¹³ = (fun ys¹² -> ys¹²)
//│ 			in let h¹³ = 'n'
//│ 			in (fun ys¹¹ -> [LH_C h¹³ mappend_lh_₅(t¹³, ys¹¹)])))), percOp_lh_₁(j², _lh_percOp_LH_P2_1¹, _lh_percOp_arg3²)))) else splitAt_lz_lh_₁(10, _lh_percOp_arg2¹)
//│ 	in _lh_matchIdent⁴(_lh_percOp_arg3¹, j¹)
//│ def pidgits_lh_₁(_lh_pidgits_arg1¹) = percOp_lh_₁(0, hashOp_lh_₁(0, [LH_P3 1 0 1]), _lh_pidgits_arg1¹)
//│ def replicate_lh_₁(_lh_replicate_arg1¹, _lh_replicate_arg2¹) = if (_lh_replicate_arg1¹ > 0) then 
//│ 	let t²³ = replicate_lh_₁((_lh_replicate_arg1¹ - 1), _lh_replicate_arg2¹)
//│ 	in let h²³ = _lh_replicate_arg2¹
//│ 	in (fun _lh_dummy⁴ -> mappend_lh_₆(h²³, concat_lh_₁(t²³))) else (fun _lh_dummy⁵ -> (fun ys³⁰ -> ys³⁰))
//│ def splitAt_lz_lh_₁(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹) = 
//│ 	let _lh_percOp_LH_P2_1² = drop_lz_lh_₁(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)
//│ 	in let _lh_percOp_LH_P2_0² = take_lz_lh_₂(_lh_splitAt_lz_arg1¹, _lh_splitAt_lz_arg2¹)
//│ 	in (fun _lh_percOp_arg3³ -> (fun j³ -> mappend_lh_₅(mappend_lh_₂(concat_lh_₁(_lh_percOp_LH_P2_0²), mappend_lh_₃(
//│ 		let t¹⁵ = 	
//│ 			let t¹⁷ = (fun ys¹⁹ -> ys¹⁹)
//│ 			in let h¹⁷ = ':'
//│ 			in (fun ys¹⁷ -> 
//│ 				let t¹⁸ = mappend_lh_₃(t¹⁷, ys¹⁷)
//│ 				in let h¹⁸ = h¹⁷
//│ 				in (fun ys¹⁸ -> [LH_C h¹⁸ mappend_lh_₅(t¹⁸, ys¹⁸)]))
//│ 		in let h¹⁵ = 't'
//│ 		in (fun ys¹⁵ -> 
//│ 			let t¹⁶ = mappend_lh_₃(t¹⁵, ys¹⁵)
//│ 			in let h¹⁶ = h¹⁵
//│ 			in (fun ys¹⁶ -> [LH_C h¹⁶ mappend_lh_₅(t¹⁶, ys¹⁶)])), mappend_lh_₁(string_of_int⁰(j³), 
//│ 		let t¹⁹ = (fun ys²¹ -> ys²¹)
//│ 		in let h¹⁹ = 'n'
//│ 		in (fun ys²⁰ -> [LH_C h¹⁹ mappend_lh_₅(t¹⁹, ys²⁰)])))), percOp_lh_₁(j³, _lh_percOp_LH_P2_1², _lh_percOp_arg3³))))
//│ def take_lz_lh_₁(n², ls²) = if (n² > 0) then case force⁰(ls²) of {
//│ 	LH_C h⁷ t⁷ => 
//│ 		let t²⁰ = take_lz_lh_₁((n² - 1), t⁷)
//│ 		in let h²⁰ = h⁷
//│ 		in (fun ys²⁴ -> 
//│ 			let t²¹ = mappend_lh_₄(t²⁰, ys²⁴)
//│ 			in let h²¹ = h²⁰
//│ 			in (fun _lh_dummy⁰ -> mappend_lh_₆(h²¹, concat_lh_₁(t²¹))))
//│ 	| LH_N  => (fun ys²⁵ -> ys²⁵)} else (fun ys²⁶ -> ys²⁶)
//│ def take_lz_lh_₂(n³, ls³) = if (n³ > 0) then case force⁰(ls³) of {
//│ 	LH_C h⁰ t⁰ => 
//│ 		let t²² = take_lz_lh_₂((n³ - 1), t⁰)
//│ 		in let h²² = h⁰
//│ 		in (fun _lh_dummy¹ -> mappend_lh_₆(h²², concat_lh_₁(t²²)))
//│ 	| LH_N  => (fun _lh_dummy² -> (fun ys²⁷ -> ys²⁷))} else (fun _lh_dummy³ -> (fun ys²⁸ -> ys²⁸))
//│ def testPiDigits_nofib_lh_₁(_lh_testPiDigits_nofib_arg1¹) = pidgits_lh_₁(_lh_testPiDigits_nofib_arg1¹)
//│ <<<<<<< after fusion <<<<<<<
//│ 
//│ >>>>>>> consumer ids >>>>>>>
//│ recursive consumer: percOp_lh_₁
//│ concat_lh_₁, mappend_lh_₃, mappend_lh_₂, mappend_lh_₅, hashOp_lh_₁, mappend_lh_₄
//│ <<<<<<< consumer ids <<<<<<<
//│ 
//│ >>>>>>> floating out info >>>>>>>
//│ replicate_lh_₁ -> 2
//│ mappend_lh_₁ -> 2
//│ splitAt_lz_lh_₁ -> 2
//│ mappend_lh_₆ -> 2
//│ divmod_lh_₁ -> 6
//│ take_lz_lh_₁ -> 4
//│ take_lz_lh_₂ -> 3
//│ <<<<<<< floating out info <<<<<<<
//│ 
//│ >>>>>>> after inlining >>>>>>>
//│ testPiDigits_nofib_lh_₁(primId⁰(5000))
//│ def ampOp_lh_₁(_lh_ampOp_arg1⁰, _lh_ampOp_arg2⁰) = case _lh_ampOp_arg2⁰ of {
//│ 	LH_P3 _lh_ampOp_LH_P3_0⁰ _lh_ampOp_LH_P3_1⁰ _lh_ampOp_LH_P3_2⁰ => 
//│ 		let y⁰ = ((_lh_ampOp_arg1⁰ * 2) + 1)
//│ 		in [LH_P3 (_lh_ampOp_LH_P3_0⁰ * _lh_ampOp_arg1⁰) ((_lh_ampOp_LH_P3_1⁰ + (_lh_ampOp_LH_P3_0⁰ * 2)) * y⁰) (_lh_ampOp_LH_P3_2⁰ * y⁰)]
//│ 	| _  => error⁰}
//│ def concat_lh_₁(lss⁰) = lss⁰(99)
//│ def divmod_lh_₁(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰) = 
//│ 	let _lh_hashOp_LH_P2_1⁰ = (_lh_divmod_arg1⁰ % _lh_divmod_arg2⁰)
//│ 	in let _lh_hashOp_LH_P2_0⁰ = div⁰(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰)
//│ 	in (fun _lh_hashOp_LH_P3_0⁰ -> (fun _lh_hashOp_LH_P3_1⁰ -> (fun _lh_hashOp_LH_P3_2⁰ -> (fun k¹ -> if ((_lh_hashOp_LH_P3_0⁰ > _lh_hashOp_LH_P3_1⁰) || ((_lh_hashOp_LH_P2_1⁰ + _lh_hashOp_LH_P3_0⁰) >= _lh_hashOp_LH_P3_2⁰)) then force⁰(lazy⁰(
//│ 		let k² = (k¹ + 1)
//│ 		in let _lh_matchIdent² = ampOp_lh_₁(k², [LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰])
//│ 		in case _lh_matchIdent² of {
//│ 			LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹ => 
//│ 				let _lh_matchIdent³ = divmod_lh_₁(((_lh_hashOp_LH_P3_0¹ * 3) + _lh_hashOp_LH_P3_1¹), _lh_hashOp_LH_P3_2¹)
//│ 				in _lh_matchIdent³(_lh_hashOp_LH_P3_0¹, _lh_hashOp_LH_P3_1¹, _lh_hashOp_LH_P3_2¹, k²)
//│ 			| _  => error⁰})) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) lazy⁰(
//│ 		let k³ = (k¹ + 1)
//│ 		in let _lh_matchIdent⁴ = ampOp_lh_₁(k³, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])
//│ 		in case _lh_matchIdent⁴ of {
//│ 			LH_P3 _lh_hashOp_LH_P3_0² _lh_hashOp_LH_P3_1² _lh_hashOp_LH_P3_2² => 
//│ 				let _lh_matchIdent⁵ = divmod_lh_₁(((_lh_hashOp_LH_P3_0² * 3) + _lh_hashOp_LH_P3_1²), _lh_hashOp_LH_P3_2²)
//│ 				in _lh_matchIdent⁵(_lh_hashOp_LH_P3_0², _lh_hashOp_LH_P3_1², _lh_hashOp_LH_P3_2², k³)
//│ 			| _  => error⁰})]))))
//│ def drop_lz_lh_₁(_lh_drop_lz_arg1⁰, _lh_drop_lz_arg2⁰) = if (_lh_drop_lz_arg1⁰ > 0) then lazy⁰(
//│ 	let _lh_matchIdent¹ = force⁰(_lh_drop_lz_arg2⁰)
//│ 	in case _lh_matchIdent¹ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_drop_lz_LH_C_0⁰ _lh_drop_lz_LH_C_1⁰ => force⁰(drop_lz_lh_₁((_lh_drop_lz_arg1⁰ - 1), _lh_drop_lz_LH_C_1⁰))
//│ 		| _  => error⁰}) else _lh_drop_lz_arg2⁰
//│ def hashOp_lh_₁(_lh_hashOp_arg1⁰, _lh_hashOp_arg2⁰) = lazy⁰(
//│ 	let k⁵ = (_lh_hashOp_arg1⁰ + 1)
//│ 	in let _lh_matchIdent⁸ = ampOp_lh_₁(k⁵, _lh_hashOp_arg2⁰)
//│ 	in case _lh_matchIdent⁸ of {
//│ 		LH_P3 _lh_hashOp_LH_P3_0⁴ _lh_hashOp_LH_P3_1⁴ _lh_hashOp_LH_P3_2⁴ => 
//│ 			let _lh_matchIdent⁹ = divmod_lh_₁(((_lh_hashOp_LH_P3_0⁴ * 3) + _lh_hashOp_LH_P3_1⁴), _lh_hashOp_LH_P3_2⁴)
//│ 			in _lh_matchIdent⁹(_lh_hashOp_LH_P3_0⁴, _lh_hashOp_LH_P3_1⁴, _lh_hashOp_LH_P3_2⁴, k⁵)
//│ 		| _  => error⁰})
//│ def mappend_lh_₁(xs⁰, ys⁷) = case xs⁰ of {
//│ 	LH_C h⁵ t⁵ => 
//│ 		let t⁶ = mappend_lh_₁(t⁵, ys⁷)
//│ 		in let h⁶ = h⁵
//│ 		in (fun ys⁸ -> [LH_C h⁶ t⁶(ys⁸)])
//│ 	| LH_N  => ys⁷}
//│ def mappend_lh_₂(xs¹, ys¹⁶) = xs¹(ys¹⁶)
//│ def mappend_lh_₃(xs³, ys²³) = xs³(ys²³)
//│ def mappend_lh_₄(xs⁵, ys²⁸) = xs⁵(ys²⁸)
//│ def mappend_lh_₅(xs², ys¹⁷) = xs²(ys¹⁷)
//│ def mappend_lh_₆(xs⁴, ys²⁵) = case xs⁴ of {
//│ 	LH_C h¹⁸ t¹⁸ => 
//│ 		let t¹⁹ = mappend_lh_₆(t¹⁸, ys²⁵)
//│ 		in let h¹⁹ = h¹⁸
//│ 		in (fun ys²⁶ -> 
//│ 			let t²⁰ = t¹⁹(ys²⁶)
//│ 			in let h²⁰ = h¹⁹
//│ 			in (fun ys²⁷ -> [LH_C h²⁰ t²⁰(ys²⁷)]))
//│ 	| LH_N  => ys²⁵}
//│ def min_lh_₁(_lh_min_arg1⁰, _lh_min_arg2⁰) = if (_lh_min_arg1⁰ > _lh_min_arg2⁰) then _lh_min_arg2⁰ else _lh_min_arg1⁰
//│ def percOp_lh_₁(_lh_percOp_arg1⁰, _lh_percOp_arg2⁰, _lh_percOp_arg3⁰) = if (_lh_percOp_arg1⁰ >= _lh_percOp_arg3⁰) then [LH_N] else 
//│ 	let k⁰ = (_lh_percOp_arg1⁰ + 10)
//│ 	in let j⁰ = min_lh_₁(_lh_percOp_arg3⁰, k⁰)
//│ 	in let _lh_matchIdent⁰ = if (k⁰ > _lh_percOp_arg3⁰) then 
//│ 		let _lh_percOp_LH_P2_1⁰ = lazy⁰([LH_N])
//│ 		in let _lh_percOp_LH_P2_0⁰ = take_lz_lh_₁((_lh_percOp_arg3⁰ % 10), _lh_percOp_arg2⁰, replicate_lh_₁((k⁰ - _lh_percOp_arg3⁰), [LH_C ' ' [LH_N]]))
//│ 		in (fun _lh_percOp_arg3¹ -> (fun j¹ -> _lh_percOp_LH_P2_0⁰(99, 
//│ 			let t⁰ = 	
//│ 				let t¹ = (fun ys⁰ -> ys⁰)
//│ 				in let h⁰ = ':'
//│ 				in (fun ys¹ -> 
//│ 					let t² = t¹(ys¹)
//│ 					in let h¹ = h⁰
//│ 					in (fun ys² -> [LH_C h¹ t²(ys²)]))
//│ 			in let h² = 't'
//│ 			in (fun ys³ -> 
//│ 				let t³ = t⁰(ys³)
//│ 				in let h³ = h²
//│ 				in (fun ys⁴ -> [LH_C h³ t³(ys⁴)]))(mappend_lh_₁(string_of_int⁰(j¹), 
//│ 			let t⁴ = (fun ys⁵ -> ys⁵)
//│ 			in let h⁴ = 'n'
//│ 			in (fun ys⁶ -> [LH_C h⁴ t⁴(ys⁶)]))), percOp_lh_₁(j¹, _lh_percOp_LH_P2_1⁰, _lh_percOp_arg3¹)))) else splitAt_lz_lh_₁(10, _lh_percOp_arg2⁰)
//│ 	in _lh_matchIdent⁰(_lh_percOp_arg3⁰, j⁰)
//│ def pidgits_lh_₁(_lh_pidgits_arg1⁰) = percOp_lh_₁(0, lazy⁰(
//│ 	let k⁴ = (0 + 1)
//│ 	in let _lh_matchIdent⁶ = ampOp_lh_₁(k⁴, [LH_P3 1 0 1])
//│ 	in case _lh_matchIdent⁶ of {
//│ 		LH_P3 _lh_hashOp_LH_P3_0³ _lh_hashOp_LH_P3_1³ _lh_hashOp_LH_P3_2³ => 
//│ 			let _lh_matchIdent⁷ = divmod_lh_₁(((_lh_hashOp_LH_P3_0³ * 3) + _lh_hashOp_LH_P3_1³), _lh_hashOp_LH_P3_2³)
//│ 			in _lh_matchIdent⁷(_lh_hashOp_LH_P3_0³, _lh_hashOp_LH_P3_1³, _lh_hashOp_LH_P3_2³, k⁴)
//│ 		| _  => error⁰}), _lh_pidgits_arg1⁰)
//│ def replicate_lh_₁(_lh_replicate_arg1⁰, _lh_replicate_arg2⁰) = if (_lh_replicate_arg1⁰ > 0) then 
//│ 	let t¹⁷ = replicate_lh_₁((_lh_replicate_arg1⁰ - 1), _lh_replicate_arg2⁰)
//│ 	in let h¹⁷ = _lh_replicate_arg2⁰
//│ 	in (fun _lh_dummy⁴ -> mappend_lh_₆(h¹⁷, t¹⁷(99))) else (fun _lh_dummy⁵ -> (fun ys²⁴ -> ys²⁴))
//│ def splitAt_lz_lh_₁(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰) = 
//│ 	let _lh_percOp_LH_P2_1¹ = drop_lz_lh_₁(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰)
//│ 	in let _lh_percOp_LH_P2_0¹ = take_lz_lh_₂(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰)
//│ 	in (fun _lh_percOp_arg3² -> (fun j² -> _lh_percOp_LH_P2_0¹(99, 
//│ 		let t⁷ = 	
//│ 			let t⁸ = (fun ys⁹ -> ys⁹)
//│ 			in let h⁷ = ':'
//│ 			in (fun ys¹⁰ -> 
//│ 				let t⁹ = t⁸(ys¹⁰)
//│ 				in let h⁸ = h⁷
//│ 				in (fun ys¹¹ -> [LH_C h⁸ t⁹(ys¹¹)]))
//│ 		in let h⁹ = 't'
//│ 		in (fun ys¹² -> 
//│ 			let t¹⁰ = t⁷(ys¹²)
//│ 			in let h¹⁰ = h⁹
//│ 			in (fun ys¹³ -> [LH_C h¹⁰ t¹⁰(ys¹³)]))(mappend_lh_₁(string_of_int⁰(j²), 
//│ 		let t¹¹ = (fun ys¹⁴ -> ys¹⁴)
//│ 		in let h¹¹ = 'n'
//│ 		in (fun ys¹⁵ -> [LH_C h¹¹ t¹¹(ys¹⁵)]))), percOp_lh_₁(j², _lh_percOp_LH_P2_1¹, _lh_percOp_arg3²))))
//│ def take_lz_lh_₁(n⁰, ls⁰) = if (n⁰ > 0) then case force⁰(ls⁰) of {
//│ 	LH_C h¹² t¹² => 
//│ 		let t¹³ = take_lz_lh_₁((n⁰ - 1), t¹²)
//│ 		in let h¹³ = h¹²
//│ 		in (fun ys¹⁸ -> 
//│ 			let t¹⁴ = t¹³(ys¹⁸)
//│ 			in let h¹⁴ = h¹³
//│ 			in (fun _lh_dummy⁰ -> mappend_lh_₆(h¹⁴, t¹⁴(99))))
//│ 	| LH_N  => (fun ys¹⁹ -> ys¹⁹)} else (fun ys²⁰ -> ys²⁰)
//│ def take_lz_lh_₂(n¹, ls¹) = if (n¹ > 0) then case force⁰(ls¹) of {
//│ 	LH_C h¹⁵ t¹⁵ => 
//│ 		let t¹⁶ = take_lz_lh_₂((n¹ - 1), t¹⁵)
//│ 		in let h¹⁶ = h¹⁵
//│ 		in (fun _lh_dummy¹ -> mappend_lh_₆(h¹⁶, t¹⁶(99)))
//│ 	| LH_N  => (fun _lh_dummy² -> (fun ys²¹ -> ys²¹))} else (fun _lh_dummy³ -> (fun ys²² -> ys²²))
//│ def testPiDigits_nofib_lh_₁(_lh_testPiDigits_nofib_arg1⁰) = pidgits_lh_₁(_lh_testPiDigits_nofib_arg1⁰)
//│ <<<<<<< after inlining <<<<<<<
//│ 
//│ >>>>>>> after floating out >>>>>>>
//│ testPiDigits_nofib_lh_₁(primId⁰(5000))
//│ def ampOp_lh_₁(_lh_ampOp_arg1⁰, _lh_ampOp_arg2⁰) = case _lh_ampOp_arg2⁰ of {
//│ 	LH_P3 _lh_ampOp_LH_P3_0⁰ _lh_ampOp_LH_P3_1⁰ _lh_ampOp_LH_P3_2⁰ => 
//│ 		let y⁰ = ((_lh_ampOp_arg1⁰ * 2) + 1)
//│ 		in [LH_P3 (_lh_ampOp_LH_P3_0⁰ * _lh_ampOp_arg1⁰) ((_lh_ampOp_LH_P3_1⁰ + (_lh_ampOp_LH_P3_0⁰ * 2)) * y⁰) (_lh_ampOp_LH_P3_2⁰ * y⁰)]
//│ 	| _  => error⁰}
//│ def concat_lh_₁(lss⁰) = lss⁰(99)
//│ def divmod_lh_₁(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰, _lh_hashOp_LH_P3_0⁰, _lh_hashOp_LH_P3_1⁰, _lh_hashOp_LH_P3_2⁰, k¹) = 
//│ 	let _lh_hashOp_LH_P2_1⁰ = (_lh_divmod_arg1⁰ % _lh_divmod_arg2⁰)
//│ 	in let _lh_hashOp_LH_P2_0⁰ = div⁰(_lh_divmod_arg1⁰, _lh_divmod_arg2⁰)
//│ 	in if ((_lh_hashOp_LH_P3_0⁰ > _lh_hashOp_LH_P3_1⁰) || ((_lh_hashOp_LH_P2_1⁰ + _lh_hashOp_LH_P3_0⁰) >= _lh_hashOp_LH_P3_2⁰)) then force⁰(lazy⁰(
//│ 		let k² = (k¹ + 1)
//│ 		in let _lh_matchIdent² = ampOp_lh_₁(k², [LH_P3 _lh_hashOp_LH_P3_0⁰ _lh_hashOp_LH_P3_1⁰ _lh_hashOp_LH_P3_2⁰])
//│ 		in case _lh_matchIdent² of {
//│ 			LH_P3 _lh_hashOp_LH_P3_0¹ _lh_hashOp_LH_P3_1¹ _lh_hashOp_LH_P3_2¹ => 
//│ 				let _lh_matchIdent³ = divmod_lh_₁(((_lh_hashOp_LH_P3_0¹ * 3) + _lh_hashOp_LH_P3_1¹), _lh_hashOp_LH_P3_2¹)
//│ 				in _lh_matchIdent³(_lh_hashOp_LH_P3_0¹, _lh_hashOp_LH_P3_1¹, _lh_hashOp_LH_P3_2¹, k²)
//│ 			| _  => error⁰})) else [LH_C string_of_int⁰(_lh_hashOp_LH_P2_0⁰) lazy⁰(
//│ 		let k³ = (k¹ + 1)
//│ 		in let _lh_matchIdent⁴ = ampOp_lh_₁(k³, [LH_P3 (_lh_hashOp_LH_P3_0⁰ * 10) ((_lh_hashOp_LH_P3_1⁰ - (_lh_hashOp_LH_P2_0⁰ * _lh_hashOp_LH_P3_2⁰)) * 10) _lh_hashOp_LH_P3_2⁰])
//│ 		in case _lh_matchIdent⁴ of {
//│ 			LH_P3 _lh_hashOp_LH_P3_0² _lh_hashOp_LH_P3_1² _lh_hashOp_LH_P3_2² => 
//│ 				let _lh_matchIdent⁵ = divmod_lh_₁(((_lh_hashOp_LH_P3_0² * 3) + _lh_hashOp_LH_P3_1²), _lh_hashOp_LH_P3_2²)
//│ 				in _lh_matchIdent⁵(_lh_hashOp_LH_P3_0², _lh_hashOp_LH_P3_1², _lh_hashOp_LH_P3_2², k³)
//│ 			| _  => error⁰})]
//│ def drop_lz_lh_₁(_lh_drop_lz_arg1⁰, _lh_drop_lz_arg2⁰) = if (_lh_drop_lz_arg1⁰ > 0) then lazy⁰(
//│ 	let _lh_matchIdent¹ = force⁰(_lh_drop_lz_arg2⁰)
//│ 	in case _lh_matchIdent¹ of {
//│ 		LH_N  => [LH_N]
//│ 		| LH_C _lh_drop_lz_LH_C_0⁰ _lh_drop_lz_LH_C_1⁰ => force⁰(drop_lz_lh_₁((_lh_drop_lz_arg1⁰ - 1), _lh_drop_lz_LH_C_1⁰))
//│ 		| _  => error⁰}) else _lh_drop_lz_arg2⁰
//│ def hashOp_lh_₁(_lh_hashOp_arg1⁰, _lh_hashOp_arg2⁰) = lazy⁰(
//│ 	let k⁵ = (_lh_hashOp_arg1⁰ + 1)
//│ 	in let _lh_matchIdent⁸ = ampOp_lh_₁(k⁵, _lh_hashOp_arg2⁰)
//│ 	in case _lh_matchIdent⁸ of {
//│ 		LH_P3 _lh_hashOp_LH_P3_0⁴ _lh_hashOp_LH_P3_1⁴ _lh_hashOp_LH_P3_2⁴ => 
//│ 			let _lh_matchIdent⁹ = divmod_lh_₁(((_lh_hashOp_LH_P3_0⁴ * 3) + _lh_hashOp_LH_P3_1⁴), _lh_hashOp_LH_P3_2⁴)
//│ 			in _lh_matchIdent⁹(_lh_hashOp_LH_P3_0⁴, _lh_hashOp_LH_P3_1⁴, _lh_hashOp_LH_P3_2⁴, k⁵)
//│ 		| _  => error⁰})
//│ def mappend_lh_₁(xs⁰, ys⁷) = case xs⁰ of {
//│ 	LH_C h⁵ t⁵ => 
//│ 		let t⁶ = mappend_lh_₁(t⁵, ys⁷)
//│ 		in let h⁶ = h⁵
//│ 		in (fun ys⁸ -> [LH_C h⁶ t⁶(ys⁸)])
//│ 	| LH_N  => ys⁷}
//│ def mappend_lh_₂(xs¹, ys¹⁶) = xs¹(ys¹⁶)
//│ def mappend_lh_₃(xs³, ys²⁰) = xs³(ys²⁰)
//│ def mappend_lh_₄(xs⁵, ys²⁵) = xs⁵(ys²⁵)
//│ def mappend_lh_₅(xs², ys¹⁷) = xs²(ys¹⁷)
//│ def mappend_lh_₆(xs⁴, ys²²) = case xs⁴ of {
//│ 	LH_C h¹⁸ t¹⁸ => 
//│ 		let t¹⁹ = mappend_lh_₆(t¹⁸, ys²²)
//│ 		in let h¹⁹ = h¹⁸
//│ 		in (fun ys²³ -> 
//│ 			let t²⁰ = t¹⁹(ys²³)
//│ 			in let h²⁰ = h¹⁹
//│ 			in (fun ys²⁴ -> [LH_C h²⁰ t²⁰(ys²⁴)]))
//│ 	| LH_N  => ys²²}
//│ def min_lh_₁(_lh_min_arg1⁰, _lh_min_arg2⁰) = if (_lh_min_arg1⁰ > _lh_min_arg2⁰) then _lh_min_arg2⁰ else _lh_min_arg1⁰
//│ def percOp_lh_₁(_lh_percOp_arg1⁰, _lh_percOp_arg2⁰, _lh_percOp_arg3⁰) = if (_lh_percOp_arg1⁰ >= _lh_percOp_arg3⁰) then [LH_N] else 
//│ 	let k⁰ = (_lh_percOp_arg1⁰ + 10)
//│ 	in let j⁰ = min_lh_₁(_lh_percOp_arg3⁰, k⁰)
//│ 	in let _lh_matchIdent⁰ = if (k⁰ > _lh_percOp_arg3⁰) then 
//│ 		let _lh_percOp_LH_P2_1⁰ = lazy⁰([LH_N])
//│ 		in let _lh_percOp_LH_P2_0⁰ = take_lz_lh_₁((_lh_percOp_arg3⁰ % 10), _lh_percOp_arg2⁰, replicate_lh_₁((k⁰ - _lh_percOp_arg3⁰), [LH_C ' ' [LH_N]]))
//│ 		in (fun _lh_percOp_arg3¹ -> (fun j¹ -> _lh_percOp_LH_P2_0⁰(99, 
//│ 			let t⁰ = 	
//│ 				let t¹ = (fun ys⁰ -> ys⁰)
//│ 				in let h⁰ = ':'
//│ 				in (fun ys¹ -> 
//│ 					let t² = t¹(ys¹)
//│ 					in let h¹ = h⁰
//│ 					in (fun ys² -> [LH_C h¹ t²(ys²)]))
//│ 			in let h² = 't'
//│ 			in (fun ys³ -> 
//│ 				let t³ = t⁰(ys³)
//│ 				in let h³ = h²
//│ 				in (fun ys⁴ -> [LH_C h³ t³(ys⁴)]))(mappend_lh_₁(string_of_int⁰(j¹), 
//│ 			let t⁴ = (fun ys⁵ -> ys⁵)
//│ 			in let h⁴ = 'n'
//│ 			in (fun ys⁶ -> [LH_C h⁴ t⁴(ys⁶)]))), percOp_lh_₁(j¹, _lh_percOp_LH_P2_1⁰, _lh_percOp_arg3¹)))) else splitAt_lz_lh_₁(10, _lh_percOp_arg2⁰)
//│ 	in _lh_matchIdent⁰(_lh_percOp_arg3⁰, j⁰)
//│ def pidgits_lh_₁(_lh_pidgits_arg1⁰) = percOp_lh_₁(0, lazy⁰(
//│ 	let k⁴ = (0 + 1)
//│ 	in let _lh_matchIdent⁶ = ampOp_lh_₁(k⁴, [LH_P3 1 0 1])
//│ 	in case _lh_matchIdent⁶ of {
//│ 		LH_P3 _lh_hashOp_LH_P3_0³ _lh_hashOp_LH_P3_1³ _lh_hashOp_LH_P3_2³ => 
//│ 			let _lh_matchIdent⁷ = divmod_lh_₁(((_lh_hashOp_LH_P3_0³ * 3) + _lh_hashOp_LH_P3_1³), _lh_hashOp_LH_P3_2³)
//│ 			in _lh_matchIdent⁷(_lh_hashOp_LH_P3_0³, _lh_hashOp_LH_P3_1³, _lh_hashOp_LH_P3_2³, k⁴)
//│ 		| _  => error⁰}), _lh_pidgits_arg1⁰)
//│ def replicate_lh_₁(_lh_replicate_arg1⁰, _lh_replicate_arg2⁰) = if (_lh_replicate_arg1⁰ > 0) then 
//│ 	let t¹⁷ = replicate_lh_₁((_lh_replicate_arg1⁰ - 1), _lh_replicate_arg2⁰)
//│ 	in let h¹⁷ = _lh_replicate_arg2⁰
//│ 	in (fun _lh_dummy¹ -> mappend_lh_₆(h¹⁷, t¹⁷(99))) else (fun _lh_dummy² -> (fun ys²¹ -> ys²¹))
//│ def splitAt_lz_lh_₁(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰) = 
//│ 	let _lh_percOp_LH_P2_1¹ = drop_lz_lh_₁(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰)
//│ 	in let _lh_percOp_LH_P2_0¹ = take_lz_lh_₂(_lh_splitAt_lz_arg1⁰, _lh_splitAt_lz_arg2⁰)
//│ 	in (fun _lh_percOp_arg3² -> (fun j² -> _lh_percOp_LH_P2_0¹(99, 
//│ 		let t⁷ = 	
//│ 			let t⁸ = (fun ys⁹ -> ys⁹)
//│ 			in let h⁷ = ':'
//│ 			in (fun ys¹⁰ -> 
//│ 				let t⁹ = t⁸(ys¹⁰)
//│ 				in let h⁸ = h⁷
//│ 				in (fun ys¹¹ -> [LH_C h⁸ t⁹(ys¹¹)]))
//│ 		in let h⁹ = 't'
//│ 		in (fun ys¹² -> 
//│ 			let t¹⁰ = t⁷(ys¹²)
//│ 			in let h¹⁰ = h⁹
//│ 			in (fun ys¹³ -> [LH_C h¹⁰ t¹⁰(ys¹³)]))(mappend_lh_₁(string_of_int⁰(j²), 
//│ 		let t¹¹ = (fun ys¹⁴ -> ys¹⁴)
//│ 		in let h¹¹ = 'n'
//│ 		in (fun ys¹⁵ -> [LH_C h¹¹ t¹¹(ys¹⁵)]))), percOp_lh_₁(j², _lh_percOp_LH_P2_1¹, _lh_percOp_arg3²))))
//│ def take_lz_lh_₁(n⁰, ls⁰, _lh_popOutId_0⁰) = if (n⁰ > 0) then case force⁰(ls⁰) of {
//│ 	LH_C h¹² t¹² => (fun _lh_dummy⁰ -> 
//│ 		let t¹³ = take_lz_lh_₁((n⁰ - 1), t¹²)
//│ 		in let h¹³ = h¹²
//│ 		in let t¹⁴ = t¹³(_lh_popOutId_0⁰)
//│ 		in let h¹⁴ = h¹³
//│ 		in mappend_lh_₆(h¹⁴, t¹⁴(99)))
//│ 	| LH_N  => _lh_popOutId_0⁰} else _lh_popOutId_0⁰
//│ def take_lz_lh_₂(n¹, ls¹, _lh_popOutId_0¹) = if (n¹ > 0) then case force⁰(ls¹) of {
//│ 	LH_C h¹⁵ t¹⁵ => 
//│ 		let t¹⁶ = take_lz_lh_₂((n¹ - 1), t¹⁵)
//│ 		in let h¹⁶ = h¹⁵
//│ 		in mappend_lh_₆(h¹⁶, t¹⁶(99))
//│ 	| LH_N  => (fun ys¹⁸ -> ys¹⁸)} else (fun ys¹⁹ -> ys¹⁹)
//│ def testPiDigits_nofib_lh_₁(_lh_testPiDigits_nofib_arg1⁰) = pidgits_lh_₁(_lh_testPiDigits_nofib_arg1⁰)
//│ <<<<<<< after floating out <<<<<<<
//│ 
//│ >>>>>>>>>> Generated OCaml >>>>>>>>>>
//│ benchmark file generated
//│ <<<<<<<<<< Generated OCaml <<<<<<<<<<

