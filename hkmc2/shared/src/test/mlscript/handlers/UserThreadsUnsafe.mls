:js
:handler


class ThreadEffect with
  fun fork(thread: () -> ()): ()
  fun yld(): ()


fun f(h, x)() =
  print("f " + x)
  h.yld()
  print("f " + x)
  h.yld()
  print("f " + x)

fun main(h) =
  print("main start")
  h.fork(f(h, 0))
  h.fork(f(h, 1))
  h.fork(f(h, 2))
  print("main end")


// task queue
let tasks = []
fun drain() =
  while tasks.length != 0 do
    tasks.pop()()
//│ tasks = []


// LIFO
handle h = ThreadEffect with
  fun fork(thread)(k) =
    tasks.push(thread)
    k()
    drain()
  fun yld()(k) =
    tasks.unshift(k)
    drain()
in
  main(h)
//│ > main start
//│ > main end
//│ > f 2
//│ > f 1
//│ > f 0
//│ > f 2
//│ > f 1
//│ > f 0
//│ > f 2
//│ > f 1
//│ > f 0


// FIFO
handle h = ThreadEffect with
  fun fork(thread)(k) =
    tasks.unshift(thread)
    k()
    drain()
  fun yld()(k) =
    tasks.unshift(k)
    drain()
in
  main(h)
//│ > main start
//│ > main end
//│ > f 0
//│ > f 1
//│ > f 2
//│ > f 0
//│ > f 1
//│ > f 2
//│ > f 0
//│ > f 1
//│ > f 2


