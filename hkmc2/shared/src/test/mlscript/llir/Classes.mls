:llir
:cpp

:intl
abstract class Callable
object FnLike1 extends Callable with
  fun apply1(x) = x * 2
fun apply(f, x) = f(x)
fun main() =
  let mul2 = FnLike1
  apply(mul2, 3)
main()
//│ 
//│ Interpreted:
//│ 6

:intl
:sllir
class Base() with
  fun get() = 1
class Derived() extends Base with
  fun get() = 2
fun main() =
  let d = Derived()
  d.Base#get() * d.Derived#get()
main()
//│ LLIR:
//│   class Base() {
//│     def get$226() =
//│       1
//│   }
//│   class Derived() extends Base {
//│     def get$227() =
//│       2
//│   }
//│   def main$229() =
//│     let x$252 = Derived$234() in
//│     let x$253 = Base.get$226(x$252) in
//│     let x$254 = Derived.get$227(x$252) in
//│     let x$255 = *(x$253,x$254) in
//│     x$255
//│   let* (x$256) = main() in
//│   x$256
//│ 
//│ Interpreted:
//│ 4

