:js
:llir
:cpp

:global

:sllir
:intl
:scpp
fun add(x) = y => x + y
add(1)(2)
//│ = 3
//│ LLIR:
//│   class Lambda(x$240) extends Callable {
//│     def apply1$267(y$241) =
//│       let x$298 = +(x$240,y$241) in
//│       x$298
//│   }
//│   def add$239(x$240) =
//│     let x$299 = Lambda$296(x$240) in
//│     x$299
//│   let* (x$300) = add(1) in
//│   let x$301 = Callable.apply1$267(x$300,2) in
//│   x$301
//│ 
//│ Cpp:
//│ #include "mlsprelude.h"
//│ struct Tuple4;
//│ struct Tuple3;
//│ struct Tuple2;
//│ struct Tuple8;
//│ struct Tuple0;
//│ struct Tuple1;
//│ struct Tuple7;
//│ struct Tuple6;
//│ struct Tuple9;
//│ struct Tuple5;
//│ struct Lambda;
//│ _mlsValue add(_mlsValue);
//│ _mlsValue _mlsMain();
//│ struct Tuple4: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   constexpr static inline const char *typeName = "Tuple4";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple4; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple3: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   constexpr static inline const char *typeName = "Tuple3";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple3; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple2: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   constexpr static inline const char *typeName = "Tuple2";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple2; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple8: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   _mlsValue field4;
//│   _mlsValue field5;
//│   _mlsValue field6;
//│   _mlsValue field7;
//│   constexpr static inline const char *typeName = "Tuple8";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print(); std::printf(", "); this->field4.print(); std::printf(", "); this->field5.print(); std::printf(", "); this->field6.print(); std::printf(", "); this->field7.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3); _mlsValue::destroy(this->field4); _mlsValue::destroy(this->field5); _mlsValue::destroy(this->field6); _mlsValue::destroy(this->field7);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3, _mlsValue field4, _mlsValue field5, _mlsValue field6, _mlsValue field7) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple8; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3; _mlsVal->field4 = field4; _mlsVal->field5 = field5; _mlsVal->field6 = field6; _mlsVal->field7 = field7;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple0: public _mlsObject {
//│   
//│   constexpr static inline const char *typeName = "Tuple0";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); }
//│   virtual void destroy() override {  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create() { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple0; _mlsVal->refCount = 1; _mlsVal->tag = typeTag;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple1: public _mlsObject {
//│   _mlsValue field0;
//│   constexpr static inline const char *typeName = "Tuple1";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple1; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple7: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   _mlsValue field4;
//│   _mlsValue field5;
//│   _mlsValue field6;
//│   constexpr static inline const char *typeName = "Tuple7";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print(); std::printf(", "); this->field4.print(); std::printf(", "); this->field5.print(); std::printf(", "); this->field6.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3); _mlsValue::destroy(this->field4); _mlsValue::destroy(this->field5); _mlsValue::destroy(this->field6);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3, _mlsValue field4, _mlsValue field5, _mlsValue field6) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple7; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3; _mlsVal->field4 = field4; _mlsVal->field5 = field5; _mlsVal->field6 = field6;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple6: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   _mlsValue field4;
//│   _mlsValue field5;
//│   constexpr static inline const char *typeName = "Tuple6";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print(); std::printf(", "); this->field4.print(); std::printf(", "); this->field5.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3); _mlsValue::destroy(this->field4); _mlsValue::destroy(this->field5);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3, _mlsValue field4, _mlsValue field5) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple6; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3; _mlsVal->field4 = field4; _mlsVal->field5 = field5;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple9: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   _mlsValue field4;
//│   _mlsValue field5;
//│   _mlsValue field6;
//│   _mlsValue field7;
//│   _mlsValue field8;
//│   constexpr static inline const char *typeName = "Tuple9";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print(); std::printf(", "); this->field4.print(); std::printf(", "); this->field5.print(); std::printf(", "); this->field6.print(); std::printf(", "); this->field7.print(); std::printf(", "); this->field8.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3); _mlsValue::destroy(this->field4); _mlsValue::destroy(this->field5); _mlsValue::destroy(this->field6); _mlsValue::destroy(this->field7); _mlsValue::destroy(this->field8);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3, _mlsValue field4, _mlsValue field5, _mlsValue field6, _mlsValue field7, _mlsValue field8) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple9; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3; _mlsVal->field4 = field4; _mlsVal->field5 = field5; _mlsVal->field6 = field6; _mlsVal->field7 = field7; _mlsVal->field8 = field8;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple5: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   _mlsValue field4;
//│   constexpr static inline const char *typeName = "Tuple5";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print(); std::printf(", "); this->field4.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3); _mlsValue::destroy(this->field4);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3, _mlsValue field4) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple5; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3; _mlsVal->field4 = field4;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Lambda: public Callable {
//│   _mlsValue x;
//│   constexpr static inline const char *typeName = "Lambda";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->x.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->x);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue x) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Lambda; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->x = x;  return _mlsValue(_mlsVal); }
//│   virtual _mlsValue apply1(_mlsValue y) {
//│     _mlsValue _mls_retval;
//│     auto x1 = (x + y);
//│     _mls_retval = x1;
//│     return _mls_retval;
//│   }
//│ };
//│ _mlsValue add(_mlsValue x) {
//│   _mlsValue _mls_retval;
//│   auto x2 = _mlsValue::create<Lambda>(x);
//│   _mls_retval = x2;
//│   return _mls_retval;
//│ }
//│ _mlsValue _mlsMain() {
//│   _mlsValue _mls_retval;
//│   auto x3 = add(_mlsValue::fromIntLit(1));
//│   auto x4 = _mlsMethodCall<Callable>(x3)->apply1(_mlsValue::fromIntLit(2));
//│   _mls_retval = x4;
//│   return _mls_retval;
//│ }
//│ int main() { return _mlsLargeStack(_mlsMainWrapper); }
//│ 
//│ Interpreted:
//│ 3

:sllir
:intl
:scpp
fun add4(a, b) = (c, d) => a + b + c + d
add4(1, 2)(3, 4)
//│ = 10
//│ LLIR:
//│   class Lambda(a$303,b$304) extends Callable {
//│     def apply2$339(c$305,d$306) =
//│       let x$369 = +(a$303,b$304) in
//│       let x$370 = +(x$369,c$305) in
//│       let x$371 = +(x$370,d$306) in
//│       x$371
//│   }
//│   def add4$302(a$303,b$304) =
//│     let x$372 = Lambda$367(a$303,b$304) in
//│     x$372
//│   let* (x$373) = add4(1,2) in
//│   let x$374 = Callable.apply2$339(x$373,3,4) in
//│   x$374
//│ 
//│ Cpp:
//│ #include "mlsprelude.h"
//│ struct Tuple4;
//│ struct Tuple3;
//│ struct Tuple2;
//│ struct Tuple8;
//│ struct Tuple0;
//│ struct Tuple1;
//│ struct Tuple7;
//│ struct Tuple6;
//│ struct Tuple9;
//│ struct Tuple5;
//│ struct Lambda;
//│ _mlsValue add4(_mlsValue, _mlsValue);
//│ _mlsValue _mlsMain();
//│ struct Tuple4: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   constexpr static inline const char *typeName = "Tuple4";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple4; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple3: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   constexpr static inline const char *typeName = "Tuple3";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple3; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple2: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   constexpr static inline const char *typeName = "Tuple2";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple2; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple8: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   _mlsValue field4;
//│   _mlsValue field5;
//│   _mlsValue field6;
//│   _mlsValue field7;
//│   constexpr static inline const char *typeName = "Tuple8";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print(); std::printf(", "); this->field4.print(); std::printf(", "); this->field5.print(); std::printf(", "); this->field6.print(); std::printf(", "); this->field7.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3); _mlsValue::destroy(this->field4); _mlsValue::destroy(this->field5); _mlsValue::destroy(this->field6); _mlsValue::destroy(this->field7);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3, _mlsValue field4, _mlsValue field5, _mlsValue field6, _mlsValue field7) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple8; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3; _mlsVal->field4 = field4; _mlsVal->field5 = field5; _mlsVal->field6 = field6; _mlsVal->field7 = field7;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple0: public _mlsObject {
//│   
//│   constexpr static inline const char *typeName = "Tuple0";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); }
//│   virtual void destroy() override {  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create() { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple0; _mlsVal->refCount = 1; _mlsVal->tag = typeTag;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple1: public _mlsObject {
//│   _mlsValue field0;
//│   constexpr static inline const char *typeName = "Tuple1";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple1; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple7: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   _mlsValue field4;
//│   _mlsValue field5;
//│   _mlsValue field6;
//│   constexpr static inline const char *typeName = "Tuple7";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print(); std::printf(", "); this->field4.print(); std::printf(", "); this->field5.print(); std::printf(", "); this->field6.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3); _mlsValue::destroy(this->field4); _mlsValue::destroy(this->field5); _mlsValue::destroy(this->field6);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3, _mlsValue field4, _mlsValue field5, _mlsValue field6) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple7; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3; _mlsVal->field4 = field4; _mlsVal->field5 = field5; _mlsVal->field6 = field6;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple6: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   _mlsValue field4;
//│   _mlsValue field5;
//│   constexpr static inline const char *typeName = "Tuple6";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print(); std::printf(", "); this->field4.print(); std::printf(", "); this->field5.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3); _mlsValue::destroy(this->field4); _mlsValue::destroy(this->field5);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3, _mlsValue field4, _mlsValue field5) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple6; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3; _mlsVal->field4 = field4; _mlsVal->field5 = field5;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple9: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   _mlsValue field4;
//│   _mlsValue field5;
//│   _mlsValue field6;
//│   _mlsValue field7;
//│   _mlsValue field8;
//│   constexpr static inline const char *typeName = "Tuple9";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print(); std::printf(", "); this->field4.print(); std::printf(", "); this->field5.print(); std::printf(", "); this->field6.print(); std::printf(", "); this->field7.print(); std::printf(", "); this->field8.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3); _mlsValue::destroy(this->field4); _mlsValue::destroy(this->field5); _mlsValue::destroy(this->field6); _mlsValue::destroy(this->field7); _mlsValue::destroy(this->field8);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3, _mlsValue field4, _mlsValue field5, _mlsValue field6, _mlsValue field7, _mlsValue field8) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple9; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3; _mlsVal->field4 = field4; _mlsVal->field5 = field5; _mlsVal->field6 = field6; _mlsVal->field7 = field7; _mlsVal->field8 = field8;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple5: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   _mlsValue field4;
//│   constexpr static inline const char *typeName = "Tuple5";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print(); std::printf(", "); this->field4.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3); _mlsValue::destroy(this->field4);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3, _mlsValue field4) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple5; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3; _mlsVal->field4 = field4;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Lambda: public Callable {
//│   _mlsValue a;
//│   _mlsValue b;
//│   constexpr static inline const char *typeName = "Lambda";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->a.print(); std::printf(", "); this->b.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->a); _mlsValue::destroy(this->b);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue a, _mlsValue b) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Lambda; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->a = a; _mlsVal->b = b;  return _mlsValue(_mlsVal); }
//│   virtual _mlsValue apply2(_mlsValue c, _mlsValue d) {
//│     _mlsValue _mls_retval;
//│     auto x = (a + b);
//│     auto x1 = (x + c);
//│     auto x2 = (x1 + d);
//│     _mls_retval = x2;
//│     return _mls_retval;
//│   }
//│ };
//│ _mlsValue add4(_mlsValue a, _mlsValue b) {
//│   _mlsValue _mls_retval;
//│   auto x3 = _mlsValue::create<Lambda>(a, b);
//│   _mls_retval = x3;
//│   return _mls_retval;
//│ }
//│ _mlsValue _mlsMain() {
//│   _mlsValue _mls_retval;
//│   auto x4 = add4(_mlsValue::fromIntLit(1), _mlsValue::fromIntLit(2));
//│   auto x5 = _mlsMethodCall<Callable>(x4)->apply2(_mlsValue::fromIntLit(3), _mlsValue::fromIntLit(4));
//│   _mls_retval = x5;
//│   return _mls_retval;
//│ }
//│ int main() { return _mlsLargeStack(_mlsMainWrapper); }
//│ 
//│ Interpreted:
//│ 10

:sllir
:intl
:scpp
fun add(a, b) = a + b
fun dummy() = add
dummy()(1, 2)
//│ = 3
//│ LLIR:
//│   class Lambda_add() extends Callable {
//│     def apply2$406(arg$435,arg$436) =
//│       let* (x$439) = add(arg$435,arg$436) in
//│       x$439
//│   }
//│   def add$375(a$377,b$378) =
//│     let x$434 = +(a$377,b$378) in
//│     x$434
//│   def dummy$376() =
//│     let x$440 = Lambda_add$437() in
//│     x$440
//│   let* (x$441) = dummy() in
//│   let x$442 = Callable.apply2$406(x$441,1,2) in
//│   x$442
//│ 
//│ Cpp:
//│ #include "mlsprelude.h"
//│ struct Tuple4;
//│ struct Tuple3;
//│ struct Tuple2;
//│ struct Tuple8;
//│ struct Tuple0;
//│ struct Tuple1;
//│ struct Tuple7;
//│ struct Tuple6;
//│ struct Tuple9;
//│ struct Tuple5;
//│ struct Lambda_add;
//│ _mlsValue add(_mlsValue, _mlsValue);
//│ _mlsValue dummy();
//│ _mlsValue _mlsMain();
//│ struct Tuple4: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   constexpr static inline const char *typeName = "Tuple4";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple4; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple3: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   constexpr static inline const char *typeName = "Tuple3";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple3; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple2: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   constexpr static inline const char *typeName = "Tuple2";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple2; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple8: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   _mlsValue field4;
//│   _mlsValue field5;
//│   _mlsValue field6;
//│   _mlsValue field7;
//│   constexpr static inline const char *typeName = "Tuple8";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print(); std::printf(", "); this->field4.print(); std::printf(", "); this->field5.print(); std::printf(", "); this->field6.print(); std::printf(", "); this->field7.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3); _mlsValue::destroy(this->field4); _mlsValue::destroy(this->field5); _mlsValue::destroy(this->field6); _mlsValue::destroy(this->field7);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3, _mlsValue field4, _mlsValue field5, _mlsValue field6, _mlsValue field7) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple8; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3; _mlsVal->field4 = field4; _mlsVal->field5 = field5; _mlsVal->field6 = field6; _mlsVal->field7 = field7;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple0: public _mlsObject {
//│   
//│   constexpr static inline const char *typeName = "Tuple0";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); }
//│   virtual void destroy() override {  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create() { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple0; _mlsVal->refCount = 1; _mlsVal->tag = typeTag;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple1: public _mlsObject {
//│   _mlsValue field0;
//│   constexpr static inline const char *typeName = "Tuple1";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple1; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple7: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   _mlsValue field4;
//│   _mlsValue field5;
//│   _mlsValue field6;
//│   constexpr static inline const char *typeName = "Tuple7";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print(); std::printf(", "); this->field4.print(); std::printf(", "); this->field5.print(); std::printf(", "); this->field6.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3); _mlsValue::destroy(this->field4); _mlsValue::destroy(this->field5); _mlsValue::destroy(this->field6);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3, _mlsValue field4, _mlsValue field5, _mlsValue field6) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple7; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3; _mlsVal->field4 = field4; _mlsVal->field5 = field5; _mlsVal->field6 = field6;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple6: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   _mlsValue field4;
//│   _mlsValue field5;
//│   constexpr static inline const char *typeName = "Tuple6";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print(); std::printf(", "); this->field4.print(); std::printf(", "); this->field5.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3); _mlsValue::destroy(this->field4); _mlsValue::destroy(this->field5);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3, _mlsValue field4, _mlsValue field5) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple6; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3; _mlsVal->field4 = field4; _mlsVal->field5 = field5;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple9: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   _mlsValue field4;
//│   _mlsValue field5;
//│   _mlsValue field6;
//│   _mlsValue field7;
//│   _mlsValue field8;
//│   constexpr static inline const char *typeName = "Tuple9";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print(); std::printf(", "); this->field4.print(); std::printf(", "); this->field5.print(); std::printf(", "); this->field6.print(); std::printf(", "); this->field7.print(); std::printf(", "); this->field8.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3); _mlsValue::destroy(this->field4); _mlsValue::destroy(this->field5); _mlsValue::destroy(this->field6); _mlsValue::destroy(this->field7); _mlsValue::destroy(this->field8);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3, _mlsValue field4, _mlsValue field5, _mlsValue field6, _mlsValue field7, _mlsValue field8) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple9; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3; _mlsVal->field4 = field4; _mlsVal->field5 = field5; _mlsVal->field6 = field6; _mlsVal->field7 = field7; _mlsVal->field8 = field8;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Tuple5: public _mlsObject {
//│   _mlsValue field0;
//│   _mlsValue field1;
//│   _mlsValue field2;
//│   _mlsValue field3;
//│   _mlsValue field4;
//│   constexpr static inline const char *typeName = "Tuple5";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->field0.print(); std::printf(", "); this->field1.print(); std::printf(", "); this->field2.print(); std::printf(", "); this->field3.print(); std::printf(", "); this->field4.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->field0); _mlsValue::destroy(this->field1); _mlsValue::destroy(this->field2); _mlsValue::destroy(this->field3); _mlsValue::destroy(this->field4);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue field0, _mlsValue field1, _mlsValue field2, _mlsValue field3, _mlsValue field4) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Tuple5; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->field0 = field0; _mlsVal->field1 = field1; _mlsVal->field2 = field2; _mlsVal->field3 = field3; _mlsVal->field4 = field4;  return _mlsValue(_mlsVal); }
//│ };
//│ struct Lambda_add: public Callable {
//│   
//│   constexpr static inline const char *typeName = "Lambda_add";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); }
//│   virtual void destroy() override {  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create() { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) Lambda_add; _mlsVal->refCount = 1; _mlsVal->tag = typeTag;  return _mlsValue(_mlsVal); }
//│   virtual _mlsValue apply2(_mlsValue arg, _mlsValue arg1) {
//│     _mlsValue _mls_retval;
//│     auto x = add(arg, arg1);
//│     _mls_retval = x;
//│     return _mls_retval;
//│   }
//│ };
//│ _mlsValue add(_mlsValue a, _mlsValue b) {
//│   _mlsValue _mls_retval;
//│   auto x1 = (a + b);
//│   _mls_retval = x1;
//│   return _mls_retval;
//│ }
//│ _mlsValue dummy() {
//│   _mlsValue _mls_retval;
//│   auto x2 = _mlsValue::create<Lambda_add>();
//│   _mls_retval = x2;
//│   return _mls_retval;
//│ }
//│ _mlsValue _mlsMain() {
//│   _mlsValue _mls_retval;
//│   auto x3 = dummy();
//│   auto x4 = _mlsMethodCall<Callable>(x3)->apply2(_mlsValue::fromIntLit(1), _mlsValue::fromIntLit(2));
//│   _mls_retval = x4;
//│   return _mls_retval;
//│ }
//│ int main() { return _mlsLargeStack(_mlsMainWrapper); }
//│ 
//│ Interpreted:
//│ 3

:sllir
:intl
abstract class List[out T]: Cons[T] | Nil
class (::) Cons[out T](head: T, tail: List[T]) extends List[T]
object Nil extends List
fun map(f, l) =
  if l is
    Cons(h, t) then Cons(f(h), map(f, t))
    Nil then Nil
fun inc(x) = x + 1
fun main() =
  map(x => inc(x), 1 :: 2 :: Nil)
  map(inc, 3 :: 4 :: Nil)
main()
//│ = Cons(4, Cons(5, Nil))
//│ LLIR:
//│   class List()
//│   class Cons(head$455,tail$456) extends List
//│   class Nil() extends List
//│   class Lambda() extends Callable {
//│     def apply1$536(x$473) =
//│       let* (x$579) = inc(x$473) in
//│       x$579
//│   }
//│   class Lambda_inc() extends Callable {
//│     def apply1$536(arg$585) =
//│       let* (x$588) = inc(arg$585) in
//│       x$588
//│   }
//│   def map$444(f$459,l$460) =
//│     case l$460 of
//│       Cons$452 =>
//│         let x$566 = l$460.<Cons$452:head> in
//│         let x$567 = l$460.<Cons$452:tail> in
//│         let x$568 = Callable.apply1$536(f$459,x$566) in
//│         let* (x$569) = map(f$459,x$567) in
//│         let x$570 = Cons$452(x$568,x$569) in
//│         x$570
//│       _ =>
//│         case l$460 of
//│           Nil$457 =>
//│             let x$572 = Nil$457() in
//│             x$572
//│           _ =>
//│             panic "match error"
//│   def j$571() =
//│     jump j$565()
//│   def j$565() =
//│     null
//│   def inc$447(x$469) =
//│     let x$573 = +(x$469,1) in
//│     x$573
//│   def main$445() =
//│     let x$574 = Nil$457() in
//│     let x$575 = Cons$452(2,x$574) in
//│     let x$576 = Cons$452(1,x$575) in
//│     let x$580 = Lambda$577() in
//│     let* (x$581) = map(x$580,x$576) in
//│     let x$582 = Nil$457() in
//│     let x$583 = Cons$452(4,x$582) in
//│     let x$584 = Cons$452(3,x$583) in
//│     let x$589 = Lambda_inc$586() in
//│     let* (x$590) = map(x$589,x$584) in
//│     x$590
//│   let* (x$591) = main() in
//│   x$591
//│ 
//│ Interpreted:
//│ Cons(4,Cons(5,Nil()))

