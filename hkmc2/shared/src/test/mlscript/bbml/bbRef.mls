:bbml
//│ Type: ⊤

//│ Type: ⊤

region x in 42
//│ Type: Int

region x in x
//│ Type: Region[?]


region x in x.ref 42
//│ Type: Ref[Int, ?]

let r = region x in x.ref 42
r
//│ Type: Ref[Int, ?]

:e
let r = region x in x.ref 42
!r
//│ ╔══[ERROR] Type error in block
//│ ║  l.21: 	let r = region x in x.ref 42
//│ ║        	                    ^^^^^^^^
//│ ║  l.22: 	!r
//│ ║        	^^
//│ ╟── because: cannot constrain  'reg ∨ 'eff  <:  ⊥
//│ ╟── because: cannot constrain  'reg  <:  ¬()
//│ ╟── because: cannot constrain  'reg1  <:  ¬()
//│ ╟── because: cannot constrain  'reg1  <:  ¬()
//│ ╟── because: cannot constrain  ¬⊥ ∧ 'x  <:  ¬()
//│ ╟── because: cannot constrain  'x  <:  ¬()
//│ ╙── because: cannot constrain    <:  ¬()
//│ Type: Int

fun mkRef() = region x in x.ref 42
mkRef
//│ Type: [outer] -> () -> Ref[Int, out ¬outer]

:e
let t = region x in x in t.ref 42
//│ ╔══[ERROR] Type error in reference creation
//│ ║  l.42: 	let t = region x in x in t.ref 42
//│ ║        	                         ^^^^^^^^
//│ ╟── because: cannot constrain  Region[in 'x out 'x1]  <:  Region['reg]
//│ ╟── because: cannot constrain  'x1  <:  'reg
//│ ╟── because: cannot constrain  'x1  <:  'reg
//│ ╟── because: cannot constrain  'x1  <:  ¬(¬'x)
//│ ╟── because: cannot constrain  'x1  <:  ¬(¬'x)
//│ ╟── because: cannot constrain    <:  ¬(¬'x)
//│ ╟── because: cannot constrain    <:  'x
//│ ╙── because: cannot constrain    <:  ¬()
//│ ╔══[ERROR] Type error in block
//│ ║  l.42: 	let t = region x in x in t.ref 42
//│ ║        	                    ^^^^^^^^^^^^^
//│ ╟── because: cannot constrain  'reg ∨ 'eff  <:  ⊥
//│ ╟── because: cannot constrain  'reg  <:  ¬()
//│ ╟── because: cannot constrain  'x1  <:  ¬()
//│ ╟── because: cannot constrain  'x1  <:  ¬()
//│ ╙── because: cannot constrain    <:  ¬()
//│ Type: Ref[Int, ?]


region x in
  let r = x.ref 42 in r := 0
//│ Type: Int

:e
let t = region x in
  x.ref 42
in t := 0
//│ ╔══[ERROR] Type error in block
//│ ║  l.71: 	  x.ref 42
//│ ║        	  ^^^^^^^^
//│ ║  l.72: 	in t := 0
//│ ║        	^^^^^^^^^
//│ ╟── because: cannot constrain  'reg ∨ 'eff  <:  ⊥
//│ ╟── because: cannot constrain  'reg  <:  ¬()
//│ ╟── because: cannot constrain  'reg1  <:  ¬()
//│ ╟── because: cannot constrain  'reg1  <:  ¬()
//│ ╟── because: cannot constrain  ¬⊥ ∧ 'x  <:  ¬()
//│ ╟── because: cannot constrain  'x  <:  ¬()
//│ ╙── because: cannot constrain    <:  ¬()
//│ Type: Int


region x in
  let r = x.ref 42 in !r
//│ Type: Int

:e
let t = region x in
  x.ref 42
in !t
//│ ╔══[ERROR] Type error in block
//│ ║  l.94: 	  x.ref 42
//│ ║        	  ^^^^^^^^
//│ ║  l.95: 	in !t
//│ ║        	^^^^^
//│ ╟── because: cannot constrain  'reg ∨ 'eff  <:  ⊥
//│ ╟── because: cannot constrain  'reg  <:  ¬()
//│ ╟── because: cannot constrain  'reg1  <:  ¬()
//│ ╟── because: cannot constrain  'reg1  <:  ¬()
//│ ╟── because: cannot constrain  ¬⊥ ∧ 'x  <:  ¬()
//│ ╟── because: cannot constrain  'x  <:  ¬()
//│ ╙── because: cannot constrain    <:  ¬()
//│ Type: Int

region x in
  let r = x.ref 42 in let t = r := 0 in !r
//│ Type: Int

fun rid: [A] -> A -> A
fun rid(x) =
  let t = (region y in 42) in x
//│ Type: ⊤


fun rid: [A] -> A -> A
fun rid(x) =
  let t = (region y in 42) in x
//│ Type: ⊤

:e
region x in
  (let dz = x.ref 42 in 42): [A] -> Int
//│ ╔══[ERROR] Type error in block with expected type [outer, 'A] -> Int
//│ ║  l.127: 	  (let dz = x.ref 42 in 42): [A] -> Int
//│ ║         	            ^^^^^^^^^^^^^^
//│ ╟── because: cannot constrain  'reg  <:  ⊥
//│ ╟── because: cannot constrain  'reg  <:  ¬()
//│ ╙── because: cannot constrain  x  <:  ¬()
//│ Type: Int


:e
let t =
  region x in
    y => x.ref y
in t(42)
//│ ╔══[ERROR] Type error in block
//│ ║  l.140: 	    y => x.ref y
//│ ║         	    ^^^^^^^^^^^^
//│ ║  l.141: 	in t(42)
//│ ║         	^^^^^^^^
//│ ╟── because: cannot constrain  'reg ∨ 'eff  <:  ⊥
//│ ╟── because: cannot constrain  'reg  <:  ¬()
//│ ╟── because: cannot constrain  ¬⊥ ∧ 'x  <:  ¬()
//│ ╟── because: cannot constrain  'x  <:  ¬()
//│ ╙── because: cannot constrain    <:  ¬()
//│ Type: Ref[in 'y out 'y ∨ Int, ?]

fun foo: [A] -> Int ->{A} Int
fun foo(x) =
  region y in x + 1
//│ Type: ⊤


region x in
  x.ref ((x => x): [A] -> A -> A)
//│ Type: Ref['A -> 'A, ?]


fun foo: [A extends Int] -> A -> A
fun foo(x) = x
//│ Type: ⊤

foo
//│ Type: ['A] -> ('A) ->{⊥} 'A
//│ Where:
//│   'A <: Int

region x in x.ref foo
//│ Type: Ref[in 'A -> ('A ∧ Int) out ('A ∧ Int) -> 'A, ?]

fun bar: ([A] -> A -> A) -> Int
fun bar(f) = f(42)
//│ Type: ⊤

bar
//│ Type: (['A] -> ('A) ->{⊥} 'A) ->{⊥} Int

:e
region x in x.ref bar
//│ ╔══[ERROR] Expected a monomorphic type or an instantiable type here, but ([outer, 'A] -> ('A) ->{⊥} 'A) ->{⊥} Int found
//│ ║  l.185: 	region x in x.ref bar
//│ ╙──       	                  ^^^
//│ Type: Ref[⊥, ?]
