:js

:import PredefJS.mls
//│ Imported 2 member(s)


class Some[out A](value: A)

object None


:sjs
if Some(0) is Some(x) then x
//│ JS (unsanitized):
//│ let scrut, param0, x;
//│ scrut = Some1(0);
//│ if (scrut instanceof Some1.class) {
//│   param0 = scrut.value;
//│   x = param0;
//│   x
//│ } else {
//│   throw new this.Error("match error");
//│ }
//│ = 0


let s = Some(0)
//│ s = Some(0)

:sjs
if s is
  Some(x) then x
//│ JS (unsanitized):
//│ let param01, x1;
//│ if (s instanceof Some1.class) {
//│   param01 = s.value;
//│   x1 = param01;
//│   x1
//│ } else {
//│   throw new this.Error("match error");
//│ }
//│ = 0

if s is
  Some(x) then x
  None then 1
//│ = 0

:re
if s is
  Some(1) then 0
  None then 1
//│ ═══[RUNTIME ERROR] Error: match error

if s is
  Some then s.value
//│ = 0


:sjs
x => if x is Some(x) then x
//│ JS (unsanitized):
//│ (x3) => {
//│   let param04, x4;
//│   if (x3 instanceof Some1.class) {
//│     param04 = x3.value;
//│     x4 = param04;
//│     return x4
//│   } else {
//│     throw new this.Error("match error");
//│   }
//│ }
//│ = [function block$res10]


class C(a)

fun f(x) = if x is C(a) then a else 0

f(C(27))
//│ = 27


fun f(x) = if x is C then 1 else 0

f(C(27))
//│ = 1


module M with
  class D(a)
  val d = D(27)

M.d
//│ = D(27)

fun f(x) = if x is M.D then 1 else 0

f(M.d)
//│ = 1

f(M.D(27))
//│ = 1


fun f(x) = if x is M.D(a) then a else 0

f(M.d)
//│ = 27

f(M.D(27))
//│ = 27


// TODO dedup branches duplicated by UCS normalization
:sjs
fun f(x) = if x is
  Some(x) and x > 0 then 42
  None then "ok"
  else log("oops")
//│ JS (unsanitized):
//│ let f4;
//│ f4 = function f(x3) {
//│   let param04, x4, scrut1;
//│   if (x3 instanceof Some1.class) {
//│     param04 = x3.value;
//│     x4 = param04;
//│     scrut1 = x4 > 0;
//│     if (scrut1 === true) {
//│       return 42
//│     } else {
//│       return log("oops")
//│     }
//│   } else {
//│     if (x3 instanceof None1.class) {
//│       return "ok"
//│     } else {
//│       return log("oops")
//│     }
//│   }
//│ };
//│ null

f(Some(0))
//│ > oops

f(Some(1))
//│ = 42

f(None)
//│ = "ok"

f(0)
//│ > oops


class Pair[out A, out B](fst: A, snd: B)


:sjs
fun f(x) = if x is
  Some(u) then u
  Pair(a, b) then a + b
//│ JS (unsanitized):
//│ let f5;
//│ f5 = function f(x3) {
//│   let param04, param1, a, b, param05, u;
//│   if (x3 instanceof Some1.class) {
//│     param05 = x3.value;
//│     u = param05;
//│     return u
//│   } else {
//│     if (x3 instanceof Pair1.class) {
//│       param04 = x3.fst;
//│       param1 = x3.snd;
//│       a = param04;
//│       b = param1;
//│       return a + b
//│     } else {
//│       throw new globalThis.Error("match error");
//│     }
//│   }
//│ };
//│ null

f(Some(123))
//│ = 123

f(Pair(10, 5))
//│ = 15


// UCS term not in tail position
:sjs
fun f(x) = log of if x is
  Some(0) then "0"
  None then "ok"
  else "oops"
//│ JS (unsanitized):
//│ let f6;
//│ f6 = function f(x3) {
//│   let param04, tmp11;
//│   if (x3 instanceof Some1.class) {
//│     param04 = x3.value;
//│     if (param04 === 0) {
//│       tmp11 = "0";
//│     } else {
//│       tmp11 = "oops";
//│     }
//│   } else {
//│     if (x3 instanceof None1.class) {
//│       tmp11 = "ok";
//│     } else {
//│       tmp11 = "oops";
//│     }
//│   }
//│   return log(tmp11)
//│ };
//│ null

f(Some(0))
//│ > 0

f(Some(1))
//│ > oops

f(None)
//│ > ok

f(0)
//│ > oops



