:ctx

// Plain extension
class Base
class Derived extends Base
//│ Env:
//│   Base -> RefElem(member:Base)
//│   Derived -> RefElem(member:Derived)

// Extension with parameters
abstract class Box
class IntBox(val value: Int) extends Box
class StrBox(val value: Str) extends Box
//│ Env:
//│   Box -> RefElem(member:Box)
//│   IntBox -> RefElem(member:IntBox)
//│   StrBox -> RefElem(member:StrBox)

// Extension with symbolic name
abstract class Ring
module End extends Ring
class (++) Link(left: Ring, right: Ring) extends Ring
//│ Env:
//│   ++ -> RefElem(member:Link)
//│   End -> RefElem(member:End)
//│   Link -> RefElem(member:Link)
//│   Ring -> RefElem(member:Ring)

// Extension with type parameters
abstract class Option[T]: (Some[T] | None)
class Some[T](val value: T) extends Option[T]
module None extends Option[Nothing]
//│ Env:
//│   None -> RefElem(member:None)
//│   Option -> RefElem(member:Option)
//│   Some -> RefElem(member:Some)

// Extension with type parameters and symbolic name
abstract class List[T]: (Cons[T] | Nil)
class (::) Cons[T](val head: T, val tail: List[T]) extends List[T]
module Nil extends List[Nothing]
//│ Env:
//│   :: -> RefElem(member:Cons)
//│   Cons -> RefElem(member:Cons)
//│   List -> RefElem(member:List)
//│   Nil -> RefElem(member:Nil)
