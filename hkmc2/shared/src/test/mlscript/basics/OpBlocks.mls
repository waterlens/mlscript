:js


2
  + 2
//│ = 4

2
  + 2
  + 2
//│ = 6

2
  + 1
  * 2
//│ = 6

2
  + 1
    * 2
//│ = 4

:pe
2
    + 1
  * 2
//│ ╔══[PARSE ERROR] Expected end of input; found indented block instead
//│ ║  l.26: 	  * 2
//│ ╙──      	^^
//│ = 3


let f = x => x * 2
//│ f = [function f]

2
  + 1
  |> f
//│ = 6


fun f(x) = x
  + 1

f(123)
//│ = 124


fun f(x) = x
  * 2
  + 1

f(123)
//│ = 247


:pt
fun f(x) = x
  + 1
  * 2
//│ Parsed tree:
//│ TermDef:
//│   k = Fun
//│   head = App:
//│     lhs = Ident of "f"
//│     rhs = Tup of Ls of 
//│       Ident of "x"
//│   rhs = S of App:
//│     lhs = Ident of "x"
//│     rhs = OpBlock of Ls of 
//│       Tuple2:
//│         _1 = Ident of "+"
//│         _2 = IntLit of 1
//│       Tuple2:
//│         _1 = Ident of "*"
//│         _2 = IntLit of 2

f(123)
//│ = 248


:pt
fun f(x) = x
  + 1
    * 2
//│ Parsed tree:
//│ TermDef:
//│   k = Fun
//│   head = App:
//│     lhs = Ident of "f"
//│     rhs = Tup of Ls of 
//│       Ident of "x"
//│   rhs = S of App:
//│     lhs = Ident of "x"
//│     rhs = OpBlock of Ls of 
//│       Tuple2:
//│         _1 = Ident of "+"
//│         _2 = App:
//│           lhs = IntLit of 1
//│           rhs = OpBlock of Ls of 
//│             Tuple2:
//│               _1 = Ident of "*"
//│               _2 = IntLit of 2

f(123)
//│ = 125


:fixme
:pe
fun f(x) = x { + 1, * 2 }
//│ ╔══[PARSE ERROR] Unexpected comma in this position
//│ ║  l.111: 	fun f(x) = x { + 1, * 2 }
//│ ╙──       	                  ^


:pt
fun f(x) = if x
  == 0 then "a"
  > 1 then "b"
//│ Parsed tree:
//│ TermDef:
//│   k = Fun
//│   head = App:
//│     lhs = Ident of "f"
//│     rhs = Tup of Ls of 
//│       Ident of "x"
//│   rhs = S of IfLike:
//│     kw = keyword 'if'
//│     kwLoc = N
//│     split = App:
//│       lhs = Ident of "x"
//│       rhs = OpBlock of Ls of 
//│         Tuple2:
//│           _1 = Ident of "=="
//│           _2 = InfixApp:
//│             lhs = IntLit of 0
//│             kw = keyword 'then'
//│             rhs = StrLit of "a"
//│         Tuple2:
//│           _1 = Ident of ">"
//│           _2 = InfixApp:
//│             lhs = IntLit of 1
//│             kw = keyword 'then'
//│             rhs = StrLit of "b"

f(0)
//│ = "a"

:re
f(1)
//│ ═══[RUNTIME ERROR] Error: match error

f(2)
//│ = "b"


// :pt
:pe
:e
fun f(x) = if x
  > 0 then "a"
  is 0 then "b"
//│ ╔══[PARSE ERROR] Expect an operator instead of 'is' keyword
//│ ║  l.163: 	  is 0 then "b"
//│ ╙──       	  ^^
//│ ╔══[PARSE ERROR] Unexpected 'is' keyword here
//│ ║  l.163: 	  is 0 then "b"
//│ ╙──       	  ^^
//│ ═══[ERROR] Unrecognized operator branch.


// :pt
:todo
:e
fun f(x) = if x
  foo(A) then a
  bar(B) then b
//│ ╔══[ERROR] Unrecognized term split (juxtaposition).
//│ ║  l.176: 	fun f(x) = if x
//│ ║         	              ^
//│ ║  l.177: 	  foo(A) then a
//│ ╙──       	^^


:pe
fun f(x) = if x
  is 0 then "a"
  is 1 then "b"
//│ ╔══[PARSE ERROR] Expected start of statement in this position; found 'is' keyword instead
//│ ║  l.189: 	  is 1 then "b"
//│ ╙──       	  ^^
//│ ╔══[PARSE ERROR] Expected end of input; found literal instead
//│ ║  l.189: 	  is 1 then "b"
//│ ╙──       	     ^


