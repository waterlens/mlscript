:js


:pe
new
//│ ╔══[PARSE ERROR] Expected expression or block after `new` keyword; found end of input instead
//│ ║  l.5: 	new
//│ ╙──     	   ^

:re
new 2
//│ ═══[RUNTIME ERROR] TypeError: 2 is not a constructor

:sjs
:ge
new 2 + 2
//│ JS (unsanitized):
//│ new (arg1, arg2) => { return arg1 + arg2; }(2, 2)
//│ > try { new (...args) => {   globalThis.Predef.checkArgs("", 2, true, args.length);   let arg1 = args[0];   let arg2 = args[1];   return arg1 + arg2; }(2, 2) } catch (e) { console.log('\u200B' + e + '\u200B'); }
//│ >       ^^^^^^^^^^^^
//│ ═══[COMPILATION ERROR] [Uncaught SyntaxError] Malformed arrow function parameter list

:re
new()
//│ ═══[RUNTIME ERROR] TypeError: null is not a constructor

:re
new {}
//│ ═══[RUNTIME ERROR] TypeError: null is not a constructor


// * Note that thanks to the parser "feature" for keyword-block stutter
// * this used to parse as `((new x) = 1)`;
// * it no longer does, since I make `new` accept `exprOrBlk`
:pt
:todo
new { x = 1 }
//│ Parsed tree:
//│ New of Block of Ls of 
//│   Def:
//│     lhs = Ident of "x"
//│     rhs = IntLit of 1
//│ ╔══[ERROR] Name not found: x
//│ ║  l.37: 	new { x = 1 }
//│ ╙──      	      ^


