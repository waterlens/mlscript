:js
:llir
:cpp

:global

:sllir
:intl
fun f1() =
  let x = 1
  let x = 2
  x
f1()
//│ = 2
//│ LLIR:
//│   
//│   def f1$219() =
//│     let x$228 = 1 in
//│     let x$229 = 2 in
//│     x$229
//│   def entry$231() =
//│     let* (x$230) = f1() in
//│     x$230
//│   entry = entry$231
//│ 
//│ Interpreted:
//│ 2

:sllir
:intl
fun f2() =
  let x = 0
  if x == 1 then 2 else 3
f2()
//│ = 3
//│ LLIR:
//│   
//│   def f2$232() =
//│     let x$242 = 0 in
//│     let x$243 = ==(x$242,1) in
//│     case x$243 of
//│       BoolLit(true) =>
//│         2
//│       _ =>
//│         3
//│   def j$244() =
//│     null
//│   def entry$246() =
//│     let* (x$245) = f2() in
//│     x$245
//│   entry = entry$246
//│ 
//│ Interpreted:
//│ 3


:sllir
fun f3() =
  let x1 = 0
  let x2 = 1
  if true then x1 else x2
f3()
//│ = 0
//│ LLIR:
//│   
//│   def f3$247() =
//│     let x$257 = 0 in
//│     let x$258 = 1 in
//│     let x$259 = true in
//│     case x$259 of
//│       BoolLit(true) =>
//│         x$257
//│       _ =>
//│         x$258
//│   def j$260() =
//│     null
//│   def entry$262() =
//│     let* (x$261) = f3() in
//│     x$261
//│   entry = entry$262


:sllir
:intl
fun f4() =
  let x = 0
  let x = if x == 1 then 2 else 3
  x
f4()
//│ = 3
//│ LLIR:
//│   
//│   def f4$263() =
//│     let x$276 = 0 in
//│     let x$277 = ==(x$276,1) in
//│     case x$277 of
//│       BoolLit(true) =>
//│         let x$279 = 2 in
//│         jump j$278(x$279)
//│       _ =>
//│         let x$280 = 3 in
//│         jump j$278(x$280)
//│   def j$278(tmp$274) =
//│     tmp$274
//│   def entry$282() =
//│     let* (x$281) = f4() in
//│     x$281
//│   entry = entry$282
//│ 
//│ Interpreted:
//│ 3

:sllir
:intl
fun f5() =
  let x = 0
  let x = if x == 1 then 2 else 3
  let x = if x == 2 then 4 else 5
  x
f5()
//│ = 5
//│ LLIR:
//│   
//│   def f5$283() =
//│     let x$301 = 0 in
//│     let x$302 = ==(x$301,1) in
//│     case x$302 of
//│       BoolLit(true) =>
//│         let x$304 = 2 in
//│         jump j$303(x$304)
//│       _ =>
//│         let x$305 = 3 in
//│         jump j$303(x$305)
//│   def j$303(tmp$298) =
//│     let x$306 = ==(tmp$298,2) in
//│     case x$306 of
//│       BoolLit(true) =>
//│         let x$308 = 4 in
//│         jump j$307(x$308)
//│       _ =>
//│         let x$309 = 5 in
//│         jump j$307(x$309)
//│   def j$307(tmp$299) =
//│     tmp$299
//│   def entry$311() =
//│     let* (x$310) = f5() in
//│     x$310
//│   entry = entry$311
//│ 
//│ Interpreted:
//│ 5

:sllir
:scpp
fun test() =
  if true do test()
//│ LLIR:
//│   
//│   def test$312() =
//│     let x$320 = true in
//│     case x$320 of
//│       BoolLit(true) =>
//│         let* (x$322) = test() in
//│         x$322
//│       _ =>
//│         undefined
//│   def j$321() =
//│     null
//│   def entry$323() =
//│     undefined
//│   entry = entry$323
//│ 
//│ Cpp:
//│ #include "mlsprelude.h"
//│ _mlsValue _mls_j5();
//│ _mlsValue _mls_test();
//│ _mlsValue _mls_entry6();
//│ _mlsValue _mls_j5() {
//│   _mlsValue _mls_retval;
//│   _mls_retval = _mlsValue::create<_mls_Unit>();
//│   return _mls_retval;
//│ }
//│ _mlsValue _mls_test() {
//│   _mlsValue _mls_retval;
//│   auto _mls_x23 = _mlsValue::fromIntLit(1);
//│   if (_mlsValue::isIntLit(_mls_x23, 1)) {
//│     auto _mls_x24 = _mls_test();
//│     _mls_retval = _mls_x24;
//│   } else {
//│     _mls_retval = _mlsValue::create<_mls_Unit>();
//│   }
//│   return _mls_retval;
//│ }
//│ _mlsValue _mls_entry6() {
//│   _mlsValue _mls_retval;
//│   _mls_retval = _mlsValue::create<_mls_Unit>();
//│   return _mls_retval;
//│ }
//│ _mlsValue _mlsMain() { return _mls_entry6(); }
//│ int main() { return _mlsLargeStack(_mlsMainWrapper); }

:sllir
:scpp
fun test() =
  (if true then test()) + 1
//│ LLIR:
//│   
//│   def test$324() =
//│     let x$335 = true in
//│     case x$335 of
//│       BoolLit(true) =>
//│         let* (x$337) = test() in
//│         jump j$336(x$337)
//│       _ =>
//│         panic "match error"
//│   def j$336(tmp$334) =
//│     let x$338 = +(tmp$334,1) in
//│     x$338
//│   def entry$339() =
//│     undefined
//│   entry = entry$339
//│ 
//│ Cpp:
//│ #include "mlsprelude.h"
//│ _mlsValue _mls_j6(_mlsValue);
//│ _mlsValue _mls_test1();
//│ _mlsValue _mls_entry7();
//│ _mlsValue _mls_j6(_mlsValue _mls_tmp3) {
//│   _mlsValue _mls_retval;
//│   auto _mls_x25 = (_mls_tmp3 + _mlsValue::fromIntLit(1));
//│   _mls_retval = _mls_x25;
//│   return _mls_retval;
//│ }
//│ _mlsValue _mls_test1() {
//│   _mlsValue _mls_retval;
//│   auto _mls_x26 = _mlsValue::fromIntLit(1);
//│   if (_mlsValue::isIntLit(_mls_x26, 1)) {
//│     auto _mls_x27 = _mls_test1();
//│     _mls_retval = _mls_j6(_mls_x27);
//│   } else {
//│     throw std::runtime_error("match error");
//│   }
//│   return _mls_retval;
//│ }
//│ _mlsValue _mls_entry7() {
//│   _mlsValue _mls_retval;
//│   _mls_retval = _mlsValue::create<_mls_Unit>();
//│   return _mls_retval;
//│ }
//│ _mlsValue _mlsMain() { return _mls_entry7(); }
//│ int main() { return _mlsLargeStack(_mlsMainWrapper); }


:sllir
:intl
:scpp
fun f() =
  let x = 10
  if true do
    set x += 1
  x
f()
//│ = 11
//│ LLIR:
//│   
//│   def f$340() =
//│     let x$354 = 10 in
//│     let x$355 = true in
//│     case x$355 of
//│       BoolLit(true) =>
//│         let x$357 = +(x$354,1) in
//│         let x$358 = undefined in
//│         jump j$356(x$357)
//│       _ =>
//│         let x$359 = undefined in
//│         jump j$356(x$354)
//│   def j$356(x$341) =
//│     x$341
//│   def entry$361() =
//│     let* (x$360) = f() in
//│     x$360
//│   entry = entry$361
//│ 
//│ Cpp:
//│ #include "mlsprelude.h"
//│ _mlsValue _mls_j7(_mlsValue);
//│ _mlsValue _mls_f();
//│ _mlsValue _mls_entry8();
//│ _mlsValue _mls_j7(_mlsValue _mls_x28) {
//│   _mlsValue _mls_retval;
//│   _mls_retval = _mls_x28;
//│   return _mls_retval;
//│ }
//│ _mlsValue _mls_f() {
//│   _mlsValue _mls_retval;
//│   auto _mls_x29 = _mlsValue::fromIntLit(10);
//│   auto _mls_x30 = _mlsValue::fromIntLit(1);
//│   if (_mlsValue::isIntLit(_mls_x30, 1)) {
//│     auto _mls_x32 = (_mls_x29 + _mlsValue::fromIntLit(1));
//│     auto _mls_x33 = _mlsValue::create<_mls_Unit>();
//│     _mls_retval = _mls_j7(_mls_x32);
//│   } else {
//│     auto _mls_x31 = _mlsValue::create<_mls_Unit>();
//│     _mls_retval = _mls_j7(_mls_x29);
//│   }
//│   return _mls_retval;
//│ }
//│ _mlsValue _mls_entry8() {
//│   _mlsValue _mls_retval;
//│   auto _mls_x34 = _mls_f();
//│   _mls_retval = _mls_x34;
//│   return _mls_retval;
//│ }
//│ _mlsValue _mlsMain() { return _mls_entry8(); }
//│ int main() { return _mlsLargeStack(_mlsMainWrapper); }
//│ 
//│ Interpreted:
//│ 11

:sllir
:intl
class A(x)
class B(y)
fun f(a) =
  let t = if a is
    A(_) then 1
    B(_) then 2
  t
f(A(1))
//│ = 1
//│ LLIR:
//│   class A(x$367)
//│   class B(y$370)
//│   def f$364(a$371) =
//│     case a$371 of
//│       A$365 =>
//│         let x$391 = a$371.<A$365:x> in
//│         let x$392 = 1 in
//│         jump j$390(x$392)
//│       _ =>
//│         case a$371 of
//│           B$368 =>
//│             let x$394 = a$371.<B$368:y> in
//│             let x$395 = 2 in
//│             jump j$393(x$395)
//│           _ =>
//│             panic "match error"
//│   def j$393(tmp$386) =
//│     jump j$390(tmp$386)
//│   def j$390(tmp$386) =
//│     tmp$386
//│   def entry$398() =
//│     let x$396 = A$365(1) in
//│     let* (x$397) = f(x$396) in
//│     x$397
//│   entry = entry$398
//│ 
//│ Interpreted:
//│ 1

:sllir
:intl
class A(x)
class B(y)
fun f(a) =
  let t = if a is
    A(_) then if a is
      A(1) then 1
      B(_) then 2
    B(_) then 3
  t
f(A(1))
//│ = 1
//│ LLIR:
//│   class A(x$404)
//│   class B(y$407)
//│   def f$401(a$408) =
//│     case a$408 of
//│       A$402 =>
//│         let x$432 = a$408.<A$402:x> in
//│         case a$408 of
//│           A$402 =>
//│             let x$434 = a$408.<A$402:x> in
//│             case x$434 of
//│               IntLit(1) =>
//│                 let x$436 = 1 in
//│                 jump j$435(x$436)
//│               _ =>
//│                 panic "match error"
//│           _ =>
//│             case a$408 of
//│               B$405 =>
//│                 let x$438 = a$408.<B$405:y> in
//│                 let x$439 = 2 in
//│                 jump j$437(x$439)
//│               _ =>
//│                 panic "match error"
//│       _ =>
//│         case a$408 of
//│           B$405 =>
//│             let x$441 = a$408.<B$405:y> in
//│             let x$442 = 3 in
//│             jump j$440(x$442)
//│           _ =>
//│             panic "match error"
//│   def j$435(tmp$426) =
//│     jump j$433(tmp$426)
//│   def j$437(tmp$426) =
//│     jump j$433(tmp$426)
//│   def j$433(tmp$426) =
//│     jump j$431(tmp$426)
//│   def j$440(tmp$427) =
//│     jump j$431(tmp$427)
//│   def j$431(tmp$427) =
//│     tmp$427
//│   def entry$445() =
//│     let x$443 = A$402(1) in
//│     let* (x$444) = f(x$443) in
//│     x$444
//│   entry = entry$445
//│ 
//│ Interpreted:
//│ 1
