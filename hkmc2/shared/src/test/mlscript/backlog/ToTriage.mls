:js
:todo


// ——— ——— ———

"a" +
  "b"
//│ = "ab"

// FIXME
"a" +
  // a
"b"
//│ = "b"

// FIXME
// :dp
"a" +
// a
"b"
//│ ╔══[PARSE ERROR] Expected start of statement in this position; found newline instead
//│ ║  l.20: 	// a
//│ ║        	    ^
//│ ║  l.21: 	"b"
//│ ╙──      	

// ——— ——— ———

true or true
//│ /!!!\ Uncaught error: scala.MatchError: InfixApp(BoolLit(true),keyword 'or',BoolLit(true)) (of class hkmc2.syntax.Tree$InfixApp)

:fixme
while false or false do print("ok")
//│ /!!!\ Uncaught error: scala.MatchError: InfixApp(BoolLit(false),keyword 'or',BoolLit(false)) (of class hkmc2.syntax.Tree$InfixApp)

// ——— ——— ———

:e
fun (**) f1(a, b) = "[" + a + " * " + b + "]"
fun (**) f2(a, b) = "(" + a + " + " + b + ")"

1 ** 2
//│ = "(1 + 2)"

// FIXME error is duplicated & refers to wrong name
:e
fun (**) t() = 0
fun (++) t() = 1
//│ ╔══[ERROR] Multiple definitions of symbol '**'
//│ ╟── defined here
//│ ║  l.48: 	fun (**) t() = 0
//│ ║        	    ^^^^^^^^^^^^
//│ ╟── defined here
//│ ║  l.49: 	fun (++) t() = 1
//│ ╙──      	    ^^^^^^^^^^^^
//│ ╔══[ERROR] Multiple definitions of symbol '++'
//│ ╟── defined here
//│ ║  l.48: 	fun (**) t() = 0
//│ ║        	    ^^^^^^^^^^^^
//│ ╟── defined here
//│ ║  l.49: 	fun (++) t() = 1
//│ ╙──      	    ^^^^^^^^^^^^
//│ ╔══[ERROR] Multiple definitions of symbol 't'
//│ ╟── defined here
//│ ║  l.48: 	fun (**) t() = 0
//│ ║        	    ^^^^^^^^^^^^
//│ ╟── defined here
//│ ║  l.49: 	fun (++) t() = 1
//│ ╙──      	    ^^^^^^^^^^^^

// ——— ——— ———

let g = [0]
//│ g = [0]

:fixme
set g.0 += 1 // FIXME
//│ /!!!\ Uncaught error: scala.MatchError: LetLike(keyword 'set',App(Ident(+=),Tup(List(Sel(Ident(g),Ident(0)), IntLit(1)))),None,None) (of class hkmc2.syntax.Tree$LetLike)

:fixme
set g.0 = g.0 + 1
//│ > let selRes, tmp1, tmp2;try { selRes = g[0]; if (selRes === undefined) {   throw new this.Error("Access to required field '0' yielded 'undefined'"); } else {   tmp1 = selRes; } tmp2 = tmp1 + 1; g.0 = tmp2; block$res8 = null; undefined } catch (e) { console.log('\u200B' + e + '\u200B'); }
//│ >                                                                                                                                                                                                   ^^
//│ ═══[COMPILATION ERROR] [Uncaught SyntaxError] Unexpected number

// ——— ——— ———

:todo // TODO instrument Predef
:re
id(1, 2)
//│ = 1

// ——— ——— ———

:todo // TODO confusing formatting should not be allowed
:e
let x = if true
then 1
else 0
//│ x = 1

// ——— ——— ———

// TODO we should give reasonable meaning to `==`
//  notably taking into account arrays and data classes;
//  and deprecated `===` (notably does not work for arrays)

undefined == null
//│ = true

undefined === null
//│ = false

// ——— ——— ———

Infinity
//│ = Infinity

:sjs
val Infinity = 1
//│ JS (unsanitized):
//│ let Infinity; Infinity = 1; null
//│ ═══[COMPILATION ERROR] [Uncaught SyntaxError] Identifier 'Infinity' has already been declared
//│ Infinity = Infinity

:sjs
Infinity
//│ JS (unsanitized):
//│ Infinity
//│ = Infinity

module Test with
  val Infinity = 1

Test.Infinity
//│ = 1

// ——— ——— ———

fun f(a)(b) = [a, b]
fun g(a, b) = [a, b]

// TODO support?
:pe
f of
    g of
      1
      2
  of 3
//│ ╔══[PARSE ERROR] Expected end of input; found indented block instead
//│ ║  l.150: 	  of 3
//│ ╙──       	^^
//│ = [function]

(f of
  g of
    1
    2
) of 3
//│ = [[1, 2], 3]

// ——— ——— ———

object Oops with
  if true then
    fun f = 1
    ()
//│ /!!!\ Uncaught error: hkmc2.InternalError: Not in scope: member:f (class hkmc2.semantics.BlockMemberSymbol)

// We forget to reset the owner to None in sub-blocks like this one
object Oops with
  if true then
    val fakeField = 1
    print(fakeField)
  print(this.fakeField) // shouldn't work!
//│ > 1
//│ > 1

:e
Oops.fakeField
//│ ╔══[ERROR] Object 'Oops' does not contain member 'fakeField'
//│ ║  l.181: 	Oops.fakeField
//│ ╙──       	    ^^^^^^^^^^
//│ = 1

// ——— ——— ———

fun p: Int

:fixme // make this a proper error
p
//│ /!!!\ Uncaught error: hkmc2.InternalError: Not in scope: member:p (class hkmc2.semantics.BlockMemberSymbol)


:ctx
fun (++) test: (Int, Int) -> Int
//│ Env:
//│   ++ -> RefElem(member:test)
//│   test -> RefElem(member:test)

test(1, 2)
//│ /!!!\ Uncaught error: hkmc2.InternalError: Not in scope: member:test (class hkmc2.semantics.BlockMemberSymbol)

:sjs
1 ++ 1
//│ /!!!\ Uncaught error: hkmc2.InternalError: Not in scope: member:test (class hkmc2.semantics.BlockMemberSymbol)

// ——— ——— ———

// TODO forbid declarations inside local blocks
:todo
:e
fun main() =
  declare fun foo: Int
  ()

// TODO forbid unimplemented signatures inside local blocks
:todo
:e
fun main() =
  fun bar: Int
  ()

// ——— ——— ———

// * Objects should not be allowed to have parameters...
// * Or these parameters should have default values.

:sjs
object Cls(x) with
  fun huh = x
//│ JS (unsanitized):
//│ let Cls1;
//│ const Cls$class = class Cls {
//│   constructor(x1) {
//│     this.x = x1;
//│   }
//│   get huh() {
//│     return this.x;
//│   }
//│   toString() { return "Cls(" + globalThis.Predef.render(this.x) + ")"; }
//│ }; Cls1 = new Cls$class;
//│ Cls1.class = Cls$class;
//│ null

:e
Cls.x
//│ ╔══[ERROR] Object 'Cls' does not contain member 'x'
//│ ║  l.248: 	Cls.x
//│ ╙──       	   ^^
//│ ═══[RUNTIME ERROR] Error: Access to required field 'x' yielded 'undefined'

:fixme
Cls.huh
//│ ═══[RUNTIME ERROR] Error: Access to required field 'huh' yielded 'undefined'

let c = new Cls(123)
//│ c = Cls(123)

c.x
//│ = 123

// ——— ——— ———

class Foo' with
  class Bar'
//│ > let Foo$_1;try { Foo$_1 = class Foo$_ {   constructor() {     this.Bar' = class Bar$_ {       constructor() {}       toString() { return "Bar'"; }     };   }   toString() { return "Foo'"; } }; block$res35 = null; undefined } catch (e) { console.log('\u200B' + e + '\u200B'); }
//│ >                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ═══[COMPILATION ERROR] [Uncaught SyntaxError] Unexpected string

// ——— ——— ———

module Example with
// whoops
  val a = this
//│ ╔══[PARSE ERROR] Expected block after type declaration body; found newline instead
//│ ║  l.274: 	module Example with
//│ ║         	                   ^
//│ ║  l.275: 	// whoops
//│ ╙──       	
//│ ╔══[PARSE ERROR] Expected an expression; found block instead
//│ ║  l.276: 	  val a = this
//│ ╙──       	  ^
//│ ╔══[PARSE ERROR] Expected end of input; found indented block instead
//│ ║  l.276: 	  val a = this
//│ ╙──       	^^

// ——— ——— ———

:fixme // ("Not in scope" error)
let xs = new Oopsie
//│ ╔══[ERROR] Name not found: Oopsie
//│ ║  l.292: 	let xs = new Oopsie
//│ ╙──       	             ^^^^^^
//│ /!!!\ Uncaught error: hkmc2.InternalError: Not in scope: xs (class hkmc2.semantics.VarSymbol)

// ——— ——— ———

type A = Int

// ——— ——— ———

