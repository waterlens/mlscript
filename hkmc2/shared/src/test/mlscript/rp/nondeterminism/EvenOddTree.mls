:js

object A
object B

class Node[T](left: Node[T], value: T, right: Node[T])

// The patterns generate trees that have odd or even numbers of node `A`.

pattern OddTree =
  A |
  Node(EvenTree, A, EvenTree) | Node(OddTree, A, OddTree) |
  Node(EvenTree, B, OddTree) | Node(OddTree, B, EvenTree)
pattern EvenTree =
  B |
  Node(EvenTree, A, OddTree) | Node(OddTree, A, EvenTree) |
  Node(EvenTree, B, EvenTree) | Node(OddTree, B, OddTree)

fun a(lc, rc) = Node(lc, A, rc)

fun b(lc, rc) = Node(lc, B, rc)

:global
:expect true

// Test each case of `EvenTree`.

B is @compile EvenTree
//│ = true

not of A is @compile EvenTree
//│ = true

not of a(B, B) is @compile EvenTree
//│ = true

a(B, A) is @compile EvenTree
//│ = true

a(A, B) is @compile EvenTree
//│ = true

:re
b(A, A) is @compile EvenTree
//│ ═══[RUNTIME ERROR] Expected: 'true', got: 'false'
//│ = false

:re
b(B, B) is @compile EvenTree
//│ ═══[RUNTIME ERROR] Expected: 'true', got: 'false'
//│ = false

// Test each case of `OddTree`.

A is @compile OddTree
//│ = true

a(B, B) is @compile OddTree
//│ = true

a(A, A) is @compile OddTree
//│ = true

:re
b(B, A) is @compile OddTree
//│ ═══[RUNTIME ERROR] Expected: 'true', got: 'false'
//│ = false

:re
b(A, B) is @compile OddTree
//│ ═══[RUNTIME ERROR] Expected: 'true', got: 'false'
//│ = false
