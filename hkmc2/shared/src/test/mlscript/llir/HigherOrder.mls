:js
:llir
:cpp

:global

:sllir
:intl
:scpp
fun add(x) = y => x + y
fun add_curried(x)(y) = x + y
add(1)(2)
//│ = 3
//│ LLIR:
//│   class Lambda(x$200) extends Callable {
//│     def apply1$221(y$201) =
//│       let x$222 = +(x$200,y$201) in
//│       x$222
//│   }
//│   class Lambda(x$204) extends Callable {
//│     def apply1$221(y$205) =
//│       let x$226 = +(x$204,y$205) in
//│       x$226
//│   }
//│   def add$198(x$200) =
//│     let x$223 = Lambda$219(x$200) in
//│     x$223
//│   def add_curried$199(x$204) =
//│     let x$227 = Lambda$224(x$204) in
//│     x$227
//│   let* (x$228) = add(1) in
//│   let x$229 = Callable.apply1$221(x$228,2) in
//│   x$229
//│ 
//│ Cpp:
//│ #include "mlsprelude.h"
//│ struct _mls_Lambda;
//│ struct _mls_Lambda1;
//│ _mlsValue _mls_add(_mlsValue);
//│ _mlsValue _mls_add_curried(_mlsValue);
//│ _mlsValue _mlsMain();
//│ struct _mls_Lambda: public _mls_Callable {
//│   _mlsValue _mls_x;
//│   constexpr static inline const char *typeName = "Lambda";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->_mls_x.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->_mls_x);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue _mls_x) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) _mls_Lambda; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->_mls_x = _mls_x;  return _mlsValue(_mlsVal); }
//│   virtual _mlsValue _mls_apply1(_mlsValue _mls_y) {
//│     _mlsValue _mls_retval;
//│     auto _mls_x1 = (_mls_x + _mls_y);
//│     _mls_retval = _mls_x1;
//│     return _mls_retval;
//│   }
//│ };
//│ struct _mls_Lambda1: public _mls_Callable {
//│   _mlsValue _mls_x;
//│   constexpr static inline const char *typeName = "Lambda";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->_mls_x.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->_mls_x);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue _mls_x) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) _mls_Lambda1; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->_mls_x = _mls_x;  return _mlsValue(_mlsVal); }
//│   virtual _mlsValue _mls_apply1(_mlsValue _mls_y1) {
//│     _mlsValue _mls_retval;
//│     auto _mls_x3 = (_mls_x + _mls_y1);
//│     _mls_retval = _mls_x3;
//│     return _mls_retval;
//│   }
//│ };
//│ _mlsValue _mls_add(_mlsValue _mls_x) {
//│   _mlsValue _mls_retval;
//│   auto _mls_x4 = _mlsValue::create<_mls_Lambda>(_mls_x);
//│   _mls_retval = _mls_x4;
//│   return _mls_retval;
//│ }
//│ _mlsValue _mls_add_curried(_mlsValue _mls_x2) {
//│   _mlsValue _mls_retval;
//│   auto _mls_x5 = _mlsValue::create<_mls_Lambda1>(_mls_x2);
//│   _mls_retval = _mls_x5;
//│   return _mls_retval;
//│ }
//│ _mlsValue _mlsMain() {
//│   _mlsValue _mls_retval;
//│   auto _mls_x6 = _mls_add(_mlsValue::fromIntLit(1));
//│   auto _mls_x7 = _mlsMethodCall<_mls_Callable>(_mls_x6)->_mls_apply1(_mlsValue::fromIntLit(2));
//│   _mls_retval = _mls_x7;
//│   return _mls_retval;
//│ }
//│ int main() { return _mlsLargeStack(_mlsMainWrapper); }
//│ 
//│ Interpreted:
//│ 3

:sllir
:intl
:scpp
fun add4(a, b) = (c, d) => a + b + c + d
fun add4_curried(a, b)(c, d) = a + b + c + d
add4(1, 2)(3, 4)
//│ = 10
//│ LLIR:
//│   class Lambda(b$233,a$232) extends Callable {
//│     def apply2$269(c$234,d$235) =
//│       let x$270 = +(a$232,b$233) in
//│       let x$271 = +(x$270,c$234) in
//│       let x$272 = +(x$271,d$235) in
//│       x$272
//│   }
//│   class Lambda(a$240,b$241) extends Callable {
//│     def apply2$269(c$242,d$243) =
//│       let x$276 = +(a$240,b$241) in
//│       let x$277 = +(x$276,c$242) in
//│       let x$278 = +(x$277,d$243) in
//│       x$278
//│   }
//│   def add4$231(a$232,b$233) =
//│     let x$273 = Lambda$267(b$233,a$232) in
//│     x$273
//│   def add4_curried$230(a$240,b$241) =
//│     let x$279 = Lambda$274(a$240,b$241) in
//│     x$279
//│   let* (x$280) = add4(1,2) in
//│   let x$281 = Callable.apply2$269(x$280,3,4) in
//│   x$281
//│ 
//│ Cpp:
//│ #include "mlsprelude.h"
//│ struct _mls_Lambda2;
//│ struct _mls_Lambda3;
//│ _mlsValue _mls_add4(_mlsValue, _mlsValue);
//│ _mlsValue _mls_add4_curried(_mlsValue, _mlsValue);
//│ _mlsValue _mlsMain();
//│ struct _mls_Lambda2: public _mls_Callable {
//│   _mlsValue _mls_b;
//│   _mlsValue _mls_a;
//│   constexpr static inline const char *typeName = "Lambda";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->_mls_b.print(); std::printf(", "); this->_mls_a.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->_mls_b); _mlsValue::destroy(this->_mls_a);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue _mls_b, _mlsValue _mls_a) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) _mls_Lambda2; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->_mls_b = _mls_b; _mlsVal->_mls_a = _mls_a;  return _mlsValue(_mlsVal); }
//│   virtual _mlsValue _mls_apply2(_mlsValue _mls_c, _mlsValue _mls_d) {
//│     _mlsValue _mls_retval;
//│     auto _mls_x8 = (_mls_a + _mls_b);
//│     auto _mls_x9 = (_mls_x8 + _mls_c);
//│     auto _mls_x10 = (_mls_x9 + _mls_d);
//│     _mls_retval = _mls_x10;
//│     return _mls_retval;
//│   }
//│ };
//│ struct _mls_Lambda3: public _mls_Callable {
//│   _mlsValue _mls_a;
//│   _mlsValue _mls_b;
//│   constexpr static inline const char *typeName = "Lambda";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); std::printf("("); this->_mls_a.print(); std::printf(", "); this->_mls_b.print();  std::printf(")"); }
//│   virtual void destroy() override { _mlsValue::destroy(this->_mls_a); _mlsValue::destroy(this->_mls_b);  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create(_mlsValue _mls_a, _mlsValue _mls_b) { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) _mls_Lambda3; _mlsVal->refCount = 1; _mlsVal->tag = typeTag; _mlsVal->_mls_a = _mls_a; _mlsVal->_mls_b = _mls_b;  return _mlsValue(_mlsVal); }
//│   virtual _mlsValue _mls_apply2(_mlsValue _mls_c1, _mlsValue _mls_d1) {
//│     _mlsValue _mls_retval;
//│     auto _mls_x11 = (_mls_a + _mls_b);
//│     auto _mls_x12 = (_mls_x11 + _mls_c1);
//│     auto _mls_x13 = (_mls_x12 + _mls_d1);
//│     _mls_retval = _mls_x13;
//│     return _mls_retval;
//│   }
//│ };
//│ _mlsValue _mls_add4(_mlsValue _mls_a, _mlsValue _mls_b) {
//│   _mlsValue _mls_retval;
//│   auto _mls_x14 = _mlsValue::create<_mls_Lambda2>(_mls_b, _mls_a);
//│   _mls_retval = _mls_x14;
//│   return _mls_retval;
//│ }
//│ _mlsValue _mls_add4_curried(_mlsValue _mls_a1, _mlsValue _mls_b1) {
//│   _mlsValue _mls_retval;
//│   auto _mls_x15 = _mlsValue::create<_mls_Lambda3>(_mls_a1, _mls_b1);
//│   _mls_retval = _mls_x15;
//│   return _mls_retval;
//│ }
//│ _mlsValue _mlsMain() {
//│   _mlsValue _mls_retval;
//│   auto _mls_x16 = _mls_add4(_mlsValue::fromIntLit(1), _mlsValue::fromIntLit(2));
//│   auto _mls_x17 = _mlsMethodCall<_mls_Callable>(_mls_x16)->_mls_apply2(_mlsValue::fromIntLit(3), _mlsValue::fromIntLit(4));
//│   _mls_retval = _mls_x17;
//│   return _mls_retval;
//│ }
//│ int main() { return _mlsLargeStack(_mlsMainWrapper); }
//│ 
//│ Interpreted:
//│ 10

:sllir
:intl
:scpp
fun add(a, b) = a + b
fun dummy() = add
dummy()(1, 2)
//│ = 3
//│ LLIR:
//│   class Lambda_add() extends Callable {
//│     def apply2$305(arg$301,arg$302) =
//│       let* (x$306) = add(arg$301,arg$302) in
//│       x$306
//│   }
//│   def add$282(a$284,b$285) =
//│     let x$300 = +(a$284,b$285) in
//│     x$300
//│   def dummy$283() =
//│     let x$307 = Lambda_add$303() in
//│     x$307
//│   let* (x$308) = dummy() in
//│   let x$309 = Callable.apply2$305(x$308,1,2) in
//│   x$309
//│ 
//│ Cpp:
//│ #include "mlsprelude.h"
//│ struct _mls_Lambda_add;
//│ _mlsValue _mls_add1(_mlsValue, _mlsValue);
//│ _mlsValue _mls_dummy();
//│ _mlsValue _mlsMain();
//│ struct _mls_Lambda_add: public _mls_Callable {
//│   
//│   constexpr static inline const char *typeName = "Lambda_add";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); }
//│   virtual void destroy() override {  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create() { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) _mls_Lambda_add; _mlsVal->refCount = 1; _mlsVal->tag = typeTag;  return _mlsValue(_mlsVal); }
//│   virtual _mlsValue _mls_apply2(_mlsValue _mls_arg, _mlsValue _mls_arg1) {
//│     _mlsValue _mls_retval;
//│     auto _mls_x18 = _mls_add1(_mls_arg, _mls_arg1);
//│     _mls_retval = _mls_x18;
//│     return _mls_retval;
//│   }
//│ };
//│ _mlsValue _mls_add1(_mlsValue _mls_a2, _mlsValue _mls_b2) {
//│   _mlsValue _mls_retval;
//│   auto _mls_x19 = (_mls_a2 + _mls_b2);
//│   _mls_retval = _mls_x19;
//│   return _mls_retval;
//│ }
//│ _mlsValue _mls_dummy() {
//│   _mlsValue _mls_retval;
//│   auto _mls_x20 = _mlsValue::create<_mls_Lambda_add>();
//│   _mls_retval = _mls_x20;
//│   return _mls_retval;
//│ }
//│ _mlsValue _mlsMain() {
//│   _mlsValue _mls_retval;
//│   auto _mls_x21 = _mls_dummy();
//│   auto _mls_x22 = _mlsMethodCall<_mls_Callable>(_mls_x21)->_mls_apply2(_mlsValue::fromIntLit(1), _mlsValue::fromIntLit(2));
//│   _mls_retval = _mls_x22;
//│   return _mls_retval;
//│ }
//│ int main() { return _mlsLargeStack(_mlsMainWrapper); }
//│ 
//│ Interpreted:
//│ 3

:sllir
:intl
abstract class List[out T]: Cons[T] | Nil
class (::) Cons[out T](head: T, tail: List[T]) extends List[T]
object Nil extends List
fun map(f, l) =
  if l is
    Cons(h, t) then Cons(f(h), map(f, t))
    Nil then Nil
fun inc(x) = x + 1
fun main() =
  map(x => inc(x), 1 :: 2 :: Nil)
  map(inc, 3 :: 4 :: Nil)
main()
//│ = Cons(4, Cons(5, Nil))
//│ LLIR:
//│   class List()
//│   class Cons(head$322,tail$323) extends List
//│   class Nil() extends List
//│   class Lambda() extends Callable {
//│     def apply1$395(x$340) =
//│       let* (x$406) = inc(x$340) in
//│       x$406
//│   }
//│   class Lambda_inc() extends Callable {
//│     def apply1$395(arg$412) =
//│       let* (x$415) = inc(arg$412) in
//│       x$415
//│   }
//│   def map$311(f$326,l$327) =
//│     case l$327 of
//│       Cons$319 =>
//│         let x$392 = l$327.<Cons$319:head> in
//│         let x$393 = l$327.<Cons$319:tail> in
//│         let x$394 = Callable.apply1$395(f$326,x$392) in
//│         let* (x$396) = map(f$326,x$393) in
//│         let x$397 = Cons$319(x$394,x$396) in
//│         x$397
//│       _ =>
//│         case l$327 of
//│           Nil$324 =>
//│             let x$399 = Nil$324() in
//│             x$399
//│           _ =>
//│             panic "match error"
//│   def j$398() =
//│     jump j$391()
//│   def j$391() =
//│     null
//│   def inc$314(x$336) =
//│     let x$400 = +(x$336,1) in
//│     x$400
//│   def main$312() =
//│     let x$401 = Nil$324() in
//│     let x$402 = Cons$319(2,x$401) in
//│     let x$403 = Cons$319(1,x$402) in
//│     let x$407 = Lambda$404() in
//│     let* (x$408) = map(x$407,x$403) in
//│     let x$409 = Nil$324() in
//│     let x$410 = Cons$319(4,x$409) in
//│     let x$411 = Cons$319(3,x$410) in
//│     let x$416 = Lambda_inc$413() in
//│     let* (x$417) = map(x$416,x$411) in
//│     x$417
//│   let* (x$418) = main() in
//│   x$418
//│ 
//│ Interpreted:
//│ Cons(4,Cons(5,Nil()))

