:bbml
//│ Type: ⊤

//│ Type: ⊤

fun add: (Int, Int) -> Int
fun add(x, y) = x + y
//│ Type: ⊤

// FIXME locations
:e
fun foo: Int -> Int
fun foo: Int -> Int
//│ ╔══[ERROR] Multiple declarations of symbol 'foo'
//│ ╟── declared here
//│ ║  l.12: 	fun foo: Int -> Int
//│ ║        	    ^^^^^^^^^^^^^^^
//│ ╟── declared here
//│ ║  l.13: 	fun foo: Int -> Int
//│ ╙──      	    ^^^^^^^^^^^^^^^
//│ Type: ⊤

:e
fun id(x) = x
fun id(y) = y
//│ ╔══[ERROR] Multiple definitions of symbol 'id'
//│ ╟── defined here
//│ ║  l.24: 	fun id(x) = x
//│ ║        	    ^^^^^^^^^
//│ ╟── defined here
//│ ║  l.25: 	fun id(y) = y
//│ ╙──      	    ^^^^^^^^^
//│ Type: ⊤

:e
fun bar: Str -> Str
fun bar(x) = let t = x + 1 in "aaa"
//│ ╔══[ERROR] Type error in reference with expected type Int
//│ ║  l.37: 	fun bar(x) = let t = x + 1 in "aaa"
//│ ║        	                     ^
//│ ╙── because: cannot constrain  Str  <:  Int
//│ Type: ⊤

:e
fun baz: Int -> Int
fun baz(x) = "bbb"
//│ ╔══[ERROR] Type error in string literal with expected type Int
//│ ║  l.46: 	fun baz(x) = "bbb"
//│ ║        	             ^^^^^
//│ ╙── because: cannot constrain  Str  <:  Int
//│ Type: ⊤

add(1, 2)
//│ Type: Int

add(1, 2): Int
//│ Type: Int


:e
add(0, 0): Str
//│ ╔══[ERROR] Type error in application with expected type Str
//│ ║  l.61: 	add(0, 0): Str
//│ ║        	^^^^^^^^^
//│ ╙── because: cannot constrain  Int  <:  Str
//│ Type: Str

:e
fun errAdd(x: Int) = x + "1"
//│ ╔══[ERROR] Type error in string literal with expected type Int
//│ ║  l.69: 	fun errAdd(x: Int) = x + "1"
//│ ║        	                         ^^^
//│ ╙── because: cannot constrain  Str  <:  Int
//│ Type: ⊤

fun high: ([A] -> A -> A) -> Int
fun high(f) = f(42)
//│ Type: ⊤

high
//│ Type: (['A] -> ('A) ->{⊥} 'A) ->{⊥} Int


high((x => x): [A] -> A -> A)
//│ Type: Int

high(x => x)
//│ Type: Int

:e
high(x => x + 1)
//│ ╔══[ERROR] Type error in reference with expected type Int
//│ ║  l.91: 	high(x => x + 1)
//│ ║        	          ^
//│ ╙── because: cannot constrain  A  <:  Int
//│ ╔══[ERROR] Type error in application with expected type A
//│ ║  l.91: 	high(x => x + 1)
//│ ║        	          ^^^^^
//│ ╙── because: cannot constrain  Int  <:  A
//│ Type: Int

(let a = 0 in x => x): [A] -> A -> A
//│ Type: ['A] -> ('A) ->{⊥} 'A


(if false then x => x else y => y): [A] -> A -> A
//│ Type: ['A] -> ('A) ->{⊥} 'A


fun baz: Int -> (([A] -> A -> A), Int) -> Int
fun baz(z) =
  ((f, x) => f(x))
//│ Type: ⊤

fun baz: Int -> (([A] -> A -> A), Int) -> Int
fun baz(z) =
  ((f, x) => f(x)): (([A] -> A -> A), Int) -> Int
//│ Type: ⊤

:e
baz: Int -> (([A] -> A -> A), Int) -> Int
//│ ╔══[ERROR] Cannot type non-function term SynthSel(Ref(globalThis:block#18),Ident(baz)) as (Int) ->{⊥} ([outer, 'A] -> ('A) ->{⊥} 'A, Int) ->{⊥} Int
//│ ║  l.121: 	baz: Int -> (([A] -> A -> A), Int) -> Int
//│ ╙──       	^^^
//│ Type: ⊥


baz(42)
//│ Type: (['A] -> ('A) ->{⊥} 'A, Int) ->{⊥} Int

:e
baz(42): (([A] -> A -> A), Int) -> Int
//│ ╔══[ERROR] Cannot type non-function term App(SynthSel(Ref(globalThis:block#18),Ident(baz)),Tup(List(Fld(‹›,Lit(IntLit(42)),None)))) as ([outer, 'A] -> ('A) ->{⊥} 'A, Int) ->{⊥} Int
//│ ║  l.132: 	baz(42): (([A] -> A -> A), Int) -> Int
//│ ╙──       	^^^^^^^
//│ Type: ⊥

(z => (f, x) => baz(z)(f, x)): Int -> (([A] -> A -> A), Int) -> Int
//│ Type: (Int) ->{⊥} (['A] -> ('A) ->{⊥} 'A, Int) ->{⊥} Int


fun id: [A] -> A -> A
fun id(x) = x
//│ Type: ⊤

id: [A] -> A -> A
//│ Type: ['A] -> ('A) ->{⊥} 'A


(id: [A] -> A -> A): [A] -> A -> A
//│ Type: ['A] -> ('A) ->{⊥} 'A

42: Int | Num
//│ Type: Int ∨ Num

42: [A] -> Int
//│ Type: Int


42: [A] -> Int | Num
//│ Type: Int ∨ Num

fun foo: Int -> Int
foo
//│ Type: (Int) ->{⊥} Int

foo
//│ Type: (Int) ->{⊥} Int



fun foo: [A] -> (A, ~A) -> A
foo
//│ Type: ['A] -> ('A, ¬'A) ->{⊥} 'A


:e
foo(42, 1)
//│ ╔══[ERROR] Type error in integer literal with expected type ¬'A
//│ ║  l.178: 	foo(42, 1)
//│ ║         	        ^
//│ ╟── because: cannot constrain  Int  <:  ¬'A
//│ ╟── because: cannot constrain  'A  <:  ¬(Int)
//│ ╙── because: cannot constrain  Int  <:  ¬(Int)
//│ Type: Int

foo(42, false)
//│ Type: Int


fun f: ([A] -> A -> Int) -> ([A] -> A -> Int)
f
//│ Type: ((⊤) ->{⊥} Int) ->{⊥} (⊤) ->{⊥} Int


fun f: ([A] -> ([B] -> A | B -> B)) -> ([A] -> ([B] -> A | B -> B))
f
//│ Type: (['B] -> (⊤) ->{⊥} 'B) ->{⊥} ['B] -> (⊤) ->{⊥} 'B


fun f: ([A] -> ([B] -> A & B -> B)) -> ([A] -> ([B] -> A & B -> B))
f
//│ Type: (['B] -> ('B) ->{⊥} 'B) ->{⊥} ['B] -> ('B) ->{⊥} 'B


fun f: ([A] -> ([B] -> A -> B & A)) -> ([A] -> ([B] -> A -> B | A))
f
//│ Type: (['A] -> ('A) ->{⊥} ⊥) ->{⊥} ['A] -> ('A) ->{⊥} 'A


fun f: ([A] -> ([B] -> A | B -> B) -> A) -> ([A] -> ([B] -> A | B -> B) -> A)
f
//│ Type: ((['B] -> ('B) ->{⊥} 'B) ->{⊥} ⊥) ->{⊥} (['B] -> ('B) ->{⊥} 'B) ->{⊥} ⊥


fun f: ([A] -> ([B] -> A | B -> B | A) -> A) -> ([A] -> ([B] -> A | B -> B | A) -> A)
f
//│ Type: (['A] -> (['B] -> ('A ∨ 'B) ->{⊥} 'B ∨ 'A) ->{⊥} 'A) ->{⊥} ['A] -> (['B] -> ('A ∨ 'B) ->{⊥} 'B ∨ 'A) ->{⊥} 'A


fun f: [A] -> [B] -> ([C] -> A | B -> B | C -> A | C) -> B
f
//│ Type: ['A] -> (['C] -> ('A) ->{⊥} ('C) ->{⊥} 'A ∨ 'C) ->{⊥} ⊥


fun f: [A, B] -> ([C] -> A | B -> B | C -> A | B | C) -> B
f
//│ Type: ['A, 'B] -> (['C] -> ('A ∨ 'B) ->{⊥} ('B ∨ 'C) ->{⊥} ('A ∨ 'B) ∨ 'C) ->{⊥} 'B
