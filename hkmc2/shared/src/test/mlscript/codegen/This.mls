:js


// TODO add syntax for this-taking detached methods
:sjs
:e
fun test(x) =
  [this.a, x]
//│ ═══[ERROR] Cannot use 'this' outside of an object scope.
//│ JS (unsanitized):
//│ let test; test = function test(x) { /* error */ }; null

:sjs
fun test(x) =
  [globalThis.a, x]
//│ JS (unsanitized):
//│ let test1; test1 = function test(x) { return [ globalThis.a, x ] }; null

:re
test(123)
//│ ═══[RUNTIME ERROR] Error: Access to required field 'a' yielded 'undefined'

val a = 1
//│ a = 1

:re
test(123)
//│ ═══[RUNTIME ERROR] Error: Access to required field 'a' yielded 'undefined'

set globalThis.a = 2

test(123)
//│ = [2, 123]

:sjs
module Test with
  val a = 3
  fun test1(x) =
    test(x)
  fun test2(x) =
    [this.a, x]
//│ JS (unsanitized):
//│ let Test1;
//│ Test1 = class Test {
//│   static {
//│     this.a = 3;
//│   }
//│   static test1(x) {
//│     return test1(x)
//│   } 
//│   static test2(x1) {
//│     return [
//│       Test.a,
//│       x1
//│     ]
//│   }
//│   static toString() { return "Test"; }
//│ };
//│ null


Test.test1(123)
//│ = [2, 123]

Test.test2(123)
//│ = [3, 123]


