:js
:llir
:cpp

:global

:sllir
:intl
:scpp
fun add(x) = y => x + y
add(1)(2)
//│ = 3
//│ LLIR:
//│   class Lambda(x$250) extends Callable {
//│     def apply1$278(y$251) =
//│       let x$318 = +(x$250,y$251) in
//│       x$318
//│   }
//│   def add$249(x$250) =
//│     let x$319 = Lambda$316(x$250) in
//│     x$319
//│   let* (x$320) = add(1) in
//│   let x$321 = Callable.apply1$278(x$320,2) in
//│   x$321
//│ 
//│ Cpp:
//│ 
//│ Interpreted:
//│ 3

:sllir
:intl
:scpp
fun add4(a, b) = (c, d) => a + b + c + d
add4(1, 2)(3, 4)
//│ = 10
//│ LLIR:
//│   class Lambda(b$324,a$323) extends Callable {
//│     def apply2$361(c$325,d$326) =
//│       let x$399 = +(a$323,b$324) in
//│       let x$400 = +(x$399,c$325) in
//│       let x$401 = +(x$400,d$326) in
//│       x$401
//│   }
//│   def add4$322(a$323,b$324) =
//│     let x$402 = Lambda$397(b$324,a$323) in
//│     x$402
//│   let* (x$403) = add4(1,2) in
//│   let x$404 = Callable.apply2$361(x$403,3,4) in
//│   x$404
//│ 
//│ Cpp:
//│ 
//│ Interpreted:
//│ 10

:sllir
:intl
:scpp
fun add(a, b) = a + b
fun dummy() = add
dummy()(1, 2)
//│ = 3
//│ LLIR:
//│   class Lambda_add() extends Callable {
//│     def apply2$438(arg$475,arg$476) =
//│       let* (x$479) = add(arg$475,arg$476) in
//│       x$479
//│   }
//│   def add$405(a$407,b$408) =
//│     let x$474 = +(a$407,b$408) in
//│     x$474
//│   def dummy$406() =
//│     let x$480 = Lambda_add$477() in
//│     x$480
//│   let* (x$481) = dummy() in
//│   let x$482 = Callable.apply2$438(x$481,1,2) in
//│   x$482
//│ 
//│ Cpp:
//│ 
//│ Interpreted:
//│ 3

:sllir
:intl
abstract class List[out T]: Cons[T] | Nil
class (::) Cons[out T](head: T, tail: List[T]) extends List[T]
object Nil extends List
fun map(f, l) =
  if l is
    Cons(h, t) then Cons(f(h), map(f, t))
    Nil then Nil
fun inc(x) = x + 1
fun main() =
  map(x => inc(x), 1 :: 2 :: Nil)
  map(inc, 3 :: 4 :: Nil)
main()
//│ = Cons(4, Cons(5, Nil))
//│ LLIR:
//│   class List()
//│   class Cons(head$495,tail$496) extends List
//│   class Nil() extends List
//│   class Lambda() extends Callable {
//│     def apply1$577(x$513) =
//│       let* (x$629) = inc(x$513) in
//│       x$629
//│   }
//│   class Lambda_inc() extends Callable {
//│     def apply1$577(arg$635) =
//│       let* (x$638) = inc(arg$635) in
//│       x$638
//│   }
//│   def map$484(f$499,l$500) =
//│     case l$500 of
//│       Cons$492 =>
//│         let x$616 = l$500.<Cons$492:head> in
//│         let x$617 = l$500.<Cons$492:tail> in
//│         let x$618 = Callable.apply1$577(f$499,x$616) in
//│         let* (x$619) = map(f$499,x$617) in
//│         let x$620 = Cons$492(x$618,x$619) in
//│         x$620
//│       _ =>
//│         case l$500 of
//│           Nil$497 =>
//│             let x$622 = Nil$497() in
//│             x$622
//│           _ =>
//│             panic "match error"
//│   def j$621() =
//│     jump j$615()
//│   def j$615() =
//│     null
//│   def inc$487(x$509) =
//│     let x$623 = +(x$509,1) in
//│     x$623
//│   def main$485() =
//│     let x$624 = Nil$497() in
//│     let x$625 = Cons$492(2,x$624) in
//│     let x$626 = Cons$492(1,x$625) in
//│     let x$630 = Lambda$627() in
//│     let* (x$631) = map(x$630,x$626) in
//│     let x$632 = Nil$497() in
//│     let x$633 = Cons$492(4,x$632) in
//│     let x$634 = Cons$492(3,x$633) in
//│     let x$639 = Lambda_inc$636() in
//│     let* (x$640) = map(x$639,x$634) in
//│     x$640
//│   let* (x$641) = main() in
//│   x$641
//│ 
//│ Interpreted:
//│ Cons(4,Cons(5,Nil()))

