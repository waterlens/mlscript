:js


Predef.Test
//│ = class Test {      constructor() {        let tmp;        tmp = Predef.print("Test");        this.y = 1;      }      toString() { return "Test"; }    }

Test === Predef.Test
//│ = true

Predef.Test === globalThis.Predef.Test
//│ = true

1 is Predef.Test
//│ = false

:fixme
new Predef.Test is Predef.Test
//│ ═══[RUNTIME ERROR] TypeError: tmp7 is not a constructor

(new Predef.Test) is Predef.Test
//│ > Test
//│ = true

new Predef.Test
//│ > Test
//│ = Test

(new Predef.Test).y
//│ > Test
//│ = 1

:re
(new Predef.Test).x
//│ > Test
//│ ═══[RUNTIME ERROR] Error: Access to required field 'x' yielded 'undefined'


print(1, 2, 3)
//│ > 1 2 3

1 print()
//│ > 1

1 . print()
//│ > 1

1 . (print(_))()
//│ > 1

:e
1 . print(_)()
//│ ═══[ERROR] Illegal position for '_' placeholder.

// FIXME: should have the same semantics...
1
  . print()
//│ > 
//│ = [function]


:re
??("oops")
//│ ═══[RUNTIME ERROR] Error: Not implemented: oops

:re
:sjs
???
//│ JS (unsanitized):
//│ Predef.notImplementedError
//│ ═══[RUNTIME ERROR] Error: Not implemented

:re
??? + 1
//│ ═══[RUNTIME ERROR] Error: Not implemented

:re
1 + ???
//│ ═══[RUNTIME ERROR] Error: Not implemented


// * Function composition is associative

let
  f = ((_ + 1) >> (_ * 2)) >> (_ - 1)
  g = (_ + 1) >> ((_ * 2) >> (_ - 1))
//│ f = [function]
//│ g = [function]

[f(123), g(123)]
//│ = [247, 247]


// *** Folding ***


fold(+)(0, 1, 2, 3)
//│ = 6

fold(-)(0, 1, 2, 3)
//│ = -6

fold(print)(0, 1, 2, 3)
//│ > 0 1
//│ > null 2
//│ > null 3

fold(tuple)(0, 1, 2, 3)
//│ = [[[0, 1], 2], 3]

fold(+) of
  0
  1
  2
  3
//│ = 6

:todo
:re
fold(+)()

fold(tuple) of
  "A" +
  "B"
  "C"
//│ = ["AB", "C"]


foldr(+)(0, 1, 2, 3)
//│ = 6

foldr(-)(0, 1, 2, 3)
//│ = -2

foldr(tuple)(0, 1, 2, 3)
//│ = [0, [1, [2, 3]]]

:todo
:re
foldr(+)()


// An alternative implementation of foldr
fun foldr(f)(first, ...rest) =
  let len = rest.length
  if len == 0 then first else...
  let
    init = rest.at(len - 1)
    i = len - 2
  while i >= 0 do
    set
      init = f(rest.at(i), init)
      i -= 1
  f(first, init)

foldr(+)(0, 1, 2, 3)
//│ = 6

foldr(-)(0, 1, 2, 3)
//│ = -2


