
:global
:llir
:scpp


// TODO should be rejected
fun oops(a) =
  class A with
    fun m = a
  let x = 1
//│ LLIR:
//│   class A()
//│   def oops(a) =
//│     let x$0 = 1 in
//│     undefined
//│   undefined
//│ 
//│ Cpp:
//│ #include "mlsprelude.h"
//│ struct _mls_A;
//│ _mlsValue _mls_oops(_mlsValue);
//│ _mlsValue _mlsMain();
//│ struct _mls_A: public _mlsObject {
//│   
//│   constexpr static inline const char *typeName = "A";
//│   constexpr static inline uint32_t typeTag = nextTypeTag();
//│   virtual void print() const override { std::printf("%s", typeName); }
//│   virtual void destroy() override {  operator delete (this, std::align_val_t(_mlsAlignment)); }
//│   static _mlsValue create() { auto _mlsVal = new (std::align_val_t(_mlsAlignment)) _mls_A; _mlsVal->refCount = 1; _mlsVal->tag = typeTag;  return _mlsValue(_mlsVal); }
//│ };
//│ _mlsValue _mls_oops(_mlsValue _mls_a) {
//│   _mlsValue _mls_retval;
//│   auto _mls_x_0 = _mlsValue::fromIntLit(1);
//│   _mls_retval = _mlsValue::create<_mls_Unit>();
//│   return _mls_retval;
//│ }
//│ _mlsValue _mlsMain() {
//│   _mlsValue _mls_retval;
//│   _mls_retval = _mlsValue::create<_mls_Unit>();
//│   return _mls_retval;
//│ }
//│ int main() { return _mlsLargeStack(_mlsMainWrapper); }

:todo // Properly reject
let x = "oops"
x.m
//│ /!!!\ Uncaught error: java.util.NoSuchElementException: None.get


