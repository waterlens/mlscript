:js


:sjs
fun foo() = if false do foo()
//│ JS (unsanitized):
//│ let foo;
//│ foo = function foo() {
//│   let scrut;
//│   scrut = false;
//│   if (scrut === true) {
//│     return foo()
//│   } else {
//│     return null
//│   }
//│ };
//│ null

:sjs
fun foo() = foo()
//│ JS (unsanitized):
//│ let foo1; foo1 = function foo() { return foo1() }; null


:sjs
class Foo(x) with
  class Bar with
    val y = x
//│ JS (unsanitized):
//│ let Foo1;
//│ Foo1 = function Foo(x1) { return new Foo.class(x1); };
//│ Foo1.class = class Foo {
//│   constructor(x) {
//│     this.x = x;
//│     const this$Foo = this;
//│     this.Bar = class Bar {
//│       constructor() {
//│         this.y = this$Foo.x;
//│       }
//│       toString() { return "Bar"; }
//│     };
//│   }
//│   toString() { return "Foo(" + globalThis.Predef.render(this.x) + ")"; }
//│ };
//│ null


:sjs
fun foo() =
  fun bar() = bar()
  bar()
//│ JS (unsanitized):
//│ let foo2;
//│ foo2 = function foo() {
//│   let bar;
//│   bar = function bar() {
//│     return bar()
//│   };
//│   return bar()
//│ };
//│ null


:sjs
let f = 1
do
  fun f = f
  ()
//│ JS (unsanitized):
//│ let f, f1; f1 = 1; f = function f() { let tmp; tmp = f(); return tmp }; null
//│ f = 1

:sjs
:e
let foo = 1
fun foo(x) = foo
//│ ╔══[ERROR] Name 'foo' is already used
//│ ║  l.75: 	let foo = 1
//│ ║        	    ^^^^^^^
//│ ╟── by a member declared in the same block
//│ ║  l.76: 	fun foo(x) = foo
//│ ╙──      	    ^^^^^^^^^^^^
//│ JS (unsanitized):
//│ let foo3, foo4; foo3 = function foo(x) { return foo4 }; foo4 = 1; null
//│ foo = 1

:sjs
:re
foo(1)
//│ JS (unsanitized):
//│ foo4(1) ?? null
//│ ═══[RUNTIME ERROR] TypeError: foo4 is not a function


