:js

:global
:sjs


fun f(n1: Int): Int = n1
//│ JS (unsanitized):
//│ let f; f = function f(n1) { return n1 }; null

f(42)
//│ JS (unsanitized):
//│ f(42)
//│ = 42

// TODO compile this to
// function f(n1) { return (n2) => f$(n1, n2); }
// function f$(n1, n2) { let tmp; tmp = 10 * n1; return tmp + n2; }

fun f(n1: Int)(n2: Int): Int =  (10 * n1 + n2)
//│ JS (unsanitized):
//│ let f1; f1 = function f(n1) { return (n2) => { let tmp; tmp = 10 * n1; return tmp + n2 } }; null

// TODO compile this to
// this.f$(4, 2)

f(4)(2)
//│ JS (unsanitized):
//│ let tmp; tmp = f1(4); tmp(2) ?? null
//│ = 42

fun f(n1: Int)(n2: Int)(n3: Int): Int = 10 * (10 * n1 + n2) + n3
//│ JS (unsanitized):
//│ let f2;
//│ f2 = function f(n1) {
//│   return (n2) => {
//│     return (n3) => {
//│       let tmp1, tmp2, tmp3;
//│       tmp1 = 10 * n1;
//│       tmp2 = tmp1 + n2;
//│       tmp3 = 10 * tmp2;
//│       return tmp3 + n3
//│     }
//│   }
//│ };
//│ null

f(4)(2)(0)
//│ JS (unsanitized):
//│ let tmp1, tmp2; tmp1 = f2(4); tmp2 = tmp1(2) ?? null; tmp2(0) ?? null
//│ = 420

fun f(n1: Int)(n2: Int)(n3: Int)(n4: Int): Int = 10 * (10 * (10 * n1 + n2) + n3) + n4
//│ JS (unsanitized):
//│ let f3;
//│ f3 = function f(n1) {
//│   return (n2) => {
//│     return (n3) => {
//│       return (n4) => {
//│         let tmp3, tmp4, tmp5, tmp6, tmp7;
//│         tmp3 = 10 * n1;
//│         tmp4 = tmp3 + n2;
//│         tmp5 = 10 * tmp4;
//│         tmp6 = tmp5 + n3;
//│         tmp7 = 10 * tmp6;
//│         return tmp7 + n4
//│       }
//│     }
//│   }
//│ };
//│ null

f(3)(0)(3)(1)
//│ JS (unsanitized):
//│ let tmp3, tmp4, tmp5; tmp3 = f3(3); tmp4 = tmp3(0) ?? null; tmp5 = tmp4(3) ?? null; tmp5(1) ?? null
//│ = 3031


