:js


print of ...
123
//│ > 123

print of...
123
//│ > 123

print of
  123
//│ > 123


if true do...

if true do...
1
//│ = 1


module Option with ...

module Option with ...
val a = 1

module Option with ...
// 
val a = 1
// 

:pt
module A with
  
  module B with ...
  
  val a = 1
  
  val b = 2
  
//│ Parsed tree:
//│ TypeDef:
//│   k = Mod
//│   head = Ident of "A"
//│   extension = N
//│   body = S of Block of Ls of 
//│     TypeDef:
//│       k = Mod
//│       head = Ident of "B"
//│       extension = N
//│       body = S of Block of Ls of 
//│         TermDef:
//│           k = ImmutVal
//│           head = Ident of "a"
//│           rhs = S of IntLit of 1
//│         TermDef:
//│           k = ImmutVal
//│           head = Ident of "b"
//│           rhs = S of IntLit of 2


fun test(x) =
  if x then print("ok") else...
  print("ko")
let foo = 1
//│ foo = 1


:w
x =>
  if false then 0 else...
  1
let bar = 1
//│ ╔══[WARNING] Pure expression in statement position
//│ ║  l.72: 	x =>
//│ ║        	^^^^
//│ ║  l.73: 	  if false then 0 else...
//│ ║        	^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ║  l.74: 	  1
//│ ╙──      	^^^
//│ bar = 1

bar
//│ = 1


:w
:e
x => if false then 0 else...
  1
let foo = 1
//│ ╔══[ERROR] Illegal position for '...' spread operator.
//│ ║  l.92: 	  1
//│ ╙──      	  ^
//│ ╔══[WARNING] Pure expression in statement position
//│ ║  l.91: 	x => if false then 0 else...
//│ ╙──      	^
//│ foo = 1


