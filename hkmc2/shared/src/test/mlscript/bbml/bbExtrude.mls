:bbml
//│ Type: ⊤

//│ Type: ⊤
fun f(y) =
  let local = ((x => y(x) + 1): [A] -> A -> Int) in y
//│ Type: ⊤

// * the parameter type of y is extruded.
f
//│ Type: ['y] -> 'y -> 'y
//│ Where:
//│   'y <: ⊤ -> Int

fun foo: [A] -> A -> Int
fun foo(x) = 0
//│ Type: ⊤

foo
//│ Type: (⊤) ->{⊥} Int

f(foo)
//│ Type: ⊤ -> Int

fun g: ([A] -> A -> Int) -> ([A] -> A -> Int)
fun g(y) =
  let local = ((x => y(x) + 1): ([A] -> A -> Int)) in y
//│ Type: ⊤

g
//│ Type: ((⊤) ->{⊥} Int) ->{⊥} (⊤) ->{⊥} Int

g(foo)
//│ Type: (⊤) ->{⊥} Int

:e
y `=> (let t = run(x `=> x `+ y) in y)
//│ ╔══[ERROR] Type error in quoted term with expected type CodeBase[out 'T, ⊥, ?]
//│ ║  l.37: 	y `=> (let t = run(x `=> x `+ y) in y)
//│ ║        	                   ^^^^^^^^^^^^
//│ ╟── because: cannot constrain  CodeBase[out 'x -> 'cde, out 'ctx, ?]  <:  CodeBase[out 'T, ⊥, ?]
//│ ╟── because: cannot constrain  'ctx  <:  ⊥
//│ ╟── because: cannot constrain  'ctx  <:  ¬()
//│ ╟── because: cannot constrain  (¬⊥ ∧ ¬'x1) ∧ y  <:  ¬()
//│ ╟── because: cannot constrain  y  <:  'x1
//│ ╙── because: cannot constrain  y  <:  ¬()
//│ Type: CodeBase[out 'y -> 'y, ⊥, ?]
//│ Where:
//│   'y <: Int

class C[A](m: A, n: A -> Int)
//│ Type: ⊤


fun f: [A] -> ([B] -> (C[out B] & A) -> B) -> A -> Int
f
//│ Type: ['A] -> (['B] -> (C[out 'B] ∧ 'A) ->{⊥} 'B) ->{⊥} ('A) ->{⊥} Int

fun g: [D] -> C[in Int out D] -> D
g
//│ Type: ['D] -> (C[in Int out 'D]) ->{⊥} 'D


f(g)
//│ Type: (¬C[?] ∨ C[in Int out ⊥]) ->{⊥} Int

fun foo: C[in Int out Nothing]
foo
//│ Type: C[in Int out ⊥]

fun bar: C[in Int out Int]
bar
//│ Type: C[Int]

f(g)(foo)
//│ Type: Int

:fixme // ???
f(g)(bar)
//│ ╔══[ERROR] Type error in selection with expected type 'A
//│ ║  l.79: 	f(g)(bar)
//│ ║        	     ^^^
//│ ╟── because: cannot constrain  C[Int]  <:  'A
//│ ╟── because: cannot constrain  C[in Int out Int]  <:  'A
//│ ╟── because: cannot constrain  C[in Int out Int]  <:  ¬C[in ⊥ out ¬⊥ ∧ 'B] ∨ C[in Int out ¬⊥ ∧ 'D]
//│ ╟── because: cannot constrain  (Int) ∧ ('B)  <:  ¬⊥ ∧ 'D
//│ ╟── because: cannot constrain  Int ∧ 'B  <:  'D
//│ ╟── because: cannot constrain  Int ∧ 'B  <:  'B1
//│ ╟── because: cannot constrain  Int ∧ 'B  <:  'B1
//│ ╟── because: cannot constrain  Int ∧ 'B  <:  ¬()
//│ ╟── because: cannot constrain  'B  <:  ¬(Int)
//│ ╙── because: cannot constrain    <:  ¬(Int)
//│ Type: Int
