:js

:silent
:import NofibPrelude.mls


fun algb2(x, k0j1, k1j1, yss) = if yss is
  Nil then Nil
  [y, k0j] :: ys then
    let kjcurr = if x == y then k0j1 + 1 else max(k1j1, k0j)
    [y, kjcurr] :: algb2(x, k0j, kjcurr, ys)

fun algb1(xss, yss) = if xss is
  Nil then map(snd, yss)
  x :: xs then algb1(xs, algb2(x, 0, 0, yss))

fun algb(xs, ys) =
  fun listcomp_fun(listcomp_fun_para) = if listcomp_fun_para is
      listcomp_fun_ls_h :: listcomp_fun_ls_t then [listcomp_fun_ls_h, 0] :: listcomp_fun(listcomp_fun_ls_t)
      Nil then Nil
  
  0 :: algb1(xs, listcomp_fun(ys))


fun findk(k, km, m, ls) = if ls is
  Nil then km
  [x,y] :: xys then if (x + y) >= m then findk(k+1, k, x+y, xys) else findk(k+1, km, m, xys)

fun algc(m, n, xs, ys) = if
  ys is Nil then x => x
  xs is
    x :: Nil and
      inList(x, ys) then t => x :: t
      else x => x
  else
    let m2 = intDiv(m, 2)
    let xs1 = take(m2, xs)
    let xs2 = drop(m2, xs)
    let l1 = algb(xs1, ys)
    let l2 = reverse(algb(reverse(xs2), reverse(ys)))
    let k = findk(0, 0, -1, zip(l1, l2))
    compose(algc(m2, k, xs1, take(k, ys)), (algc(m-m2, n-k, xs2, drop(k, ys))))

fun lcss(xs, ys) = algc(listLen(xs), listLen(ys), xs, ys)(Nil)

fun lcssMain(a, b ,c, d, e, f) = lcss(enumFromThenTo(a,b,c), enumFromThenTo(d,e,f))

fun testLCSS_nofib(d) = lcssMain(1,2,60,30,31,90)



testLCSS_nofib(0).toString()
//â”‚ = "[30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]"


