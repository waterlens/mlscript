:js


import "../../mlscript-compile/Option.mls"

module OtherModule with
  val None = 123


:sjs
open Option
//│ JS (unsanitized):
//│ null

:sjs
None isDefined()
//│ JS (unsanitized):
//│ Option.isDefined(Option.None)
//│ = false

Some(1) isDefined()
//│ = true

None === Option.None
//│ = true


fun none() = None

open OtherModule

None === Option.None
//│ = false

none() === Option.None
//│ = true


open Option
fun none() = None
console.log(None)
open OtherModule
console.log(None)
none()
//│ > None { class: [class None] }
//│ > 123
//│ = None


// * `open` statements are hygienic and are not affected by redefinitions

:sjs
val Option = "Oops"
//│ JS (unsanitized):
//│ let Option1; Option1 = "Oops"; null
//│ Option = "Oops"

:sjs
Some(123)
//│ JS (unsanitized):
//│ Option.Some(123)
//│ = Some(123)

module Option with
  val None = 123

:sjs
open Option
//│ JS (unsanitized):
//│ null

:sjs
Some
//│ JS (unsanitized):
//│ Option.Some
//│ = [function Some]

:sjs
None
//│ JS (unsanitized):
//│ Option3.None
//│ = 123


