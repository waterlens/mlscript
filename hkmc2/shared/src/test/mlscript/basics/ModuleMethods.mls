:js


class C with
  // regular method foo
  fun foo(x) = x

module M with
  // module method foo
  fun foo(x) = x
  // module method self
  fun self(): module M = M

:e
fun f1(module m)
//│ ╔══[ERROR] Module parameters must have explicit types.
//│ ║  l.15: 	fun f1(module m)
//│ ╙──      	              ^

:e
fun f2[T](module m: T)
//│ ╔══[ERROR] Module parameters must have concrete types.
//│ ║  l.21: 	fun f2[T](module m: T)
//│ ╙──      	                 ^^^^

:e
module N with
  fun f3() = M
//│ ╔══[ERROR] Functions returning module values must have explicit return types.
//│ ║  l.28: 	  fun f3() = M
//│ ╙──      	      ^^^^

:e
module N with
  fun f4[T](): module T = M
//│ ╔══[ERROR] Functions returning module values must have concrete return types.
//│ ║  l.35: 	  fun f4[T](): module T = M
//│ ╙──      	      ^^^^^^^^^^^^^^^^^

:e
module N with
  fun f5(): M = M
//│ ╔══[ERROR] The return type of functions returning module values must be prefixed with module keyword.
//│ ║  l.42: 	  fun f5(): M = M
//│ ╙──      	      ^^^^^^^


fun f6(m: M) = m

:e
f6(M)
//│ ╔══[ERROR] Only module parameters may receive module arguments (values).
//│ ║  l.51: 	f6(M)
//│ ╙──      	   ^
//│ = M

:e
f6(M.self())
//│ ╔══[ERROR] Only module parameters may receive module arguments (values).
//│ ║  l.58: 	f6(M.self())
//│ ╙──      	   ^^^^^^^^
//│ = M

:e
fun f7(): module M
//│ ╔══[ERROR] Only module methods may return module values.
//│ ║  l.65: 	fun f7(): module M
//│ ╙──      	    ^^^^^^^^^^^^^^


:todo // should be an error
:e
fun f8(module m: M) = m

:e
fun f9(module m: M): module M = m
//│ ╔══[ERROR] Only module methods may return module values.
//│ ║  l.76: 	fun f9(module m: M): module M = m
//│ ╙──      	    ^^^^^^^^^^^^^^^^^^^^^^^^^

module Test with
  fun ok1(module m: M): module M = m

let ok1 = Test.ok1
//│ ok1 = [function ok1]

module N with
  fun ok2(): module M = M

ok1(M)
//│ = M

ok1(M.self())
//│ = M


