:NewParser
:ParseOnly

:d
:lhGenOCaml
fun f(x) =
  if True then lazy(f(x)) else lazy(f(C)) // adding lazy to make ocam repl terminate
fun g(x) = if x is                        //  but f never checks its argument, so x has no upper bound
  D then x
  C then x
f(g(D))                                   // D gets fused and becomes x => x, g get fused and becomes x(x), so type of g'(x => x) is not compatible with C
//│ |#fun| |f|(|x|)| |#=|→|#if| |True| |#then| |lazy|(|f|(|x|)|)| |#else| |lazy|(|f|(|C|)|)| |/* adding lazy to make ocam repl terminate*/|←|↵|#fun| |g|(|x|)| |#=| |#if| |x| |is| |/*  but f never checks its argument, so x has no upper bound*/|→|D| |#then| |x|↵|C| |#then| |x|←|↵|f|(|g|(|D|)|)| |/* D gets fused and becomes x => x, g get fused and becomes x(x), so type of g'(x => x) is not compatible with C*/|
//│ Parsed: {fun f = x, => {if (True) then lazy (f (x,),) else lazy (f (C,),)}; fun g = x, => if x is ‹(D) then x; (C) then x›; f (g (D,),)}
//│ >>>>>>>>>> Original >>>>>>>>>>
//│ f^19(g^20([D]))
//│ def f(x⁰) = if [True] then lazy⁰(f^3(x⁰)) else lazy⁰(f^8([C]))
//│ def g(x¹) = case x¹ of {
//│ 	D  => x¹
//│ 	| C  => x¹}
//│ 		---------- unoptimized ocaml gen ----------
//│ 		let rec f x_0 =
//│ 		  (if true then
//│ 		    (lazy (f x_0))
//│ 		  else
//│ 		    (lazy (f (`C))));;
//│ 		let rec g x_1 =
//│ 		  (match x_1 with
//│ 		    | `D -> 
//│ 		      x_1
//│ 		    | `C -> 
//│ 		      x_1);;
//│ 		(f (g (`D)))
//│ 		....... ocaml repl result .......
//│ /!!!\ Uncaught error: java.io.IOException: Cannot run program "/Users/crescentonc/.opam/benchmarkflambda/bin/ocaml": error=2, No such file or directory
//│ 	at: java.base/java.lang.ProcessBuilder.start(ProcessBuilder.java:1128)
//│ 	at: java.base/java.lang.ProcessBuilder.start(ProcessBuilder.java:1071)
//│ 	at: mlscript.lumberhack.OCamlReplHost.<init>(DiffTestLumberhack.scala:580)
//│ 	at: mlscript.lumberhack.DiffTestLumberhack.postProcess(DiffTestLumberhack.scala:106)
//│ 	at: mlscript.DiffTests.rec$1(DiffTests.scala:396)
//│ 	at: mlscript.DiffTests.$anonfun$new$3(DiffTests.scala:803)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)
//│ 	at: org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)
//│ 	at: org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)
//│ 	at: org.scalatest.Transformer.apply(Transformer.scala:22)
