
module Predef with ...

fun id(x) = x

fun not(x) = x is false


fun (|>) pipeInto(x, f) = f(x)
fun (<|) pipeFrom(f, x) = f(x)

fun (>>) andThen(f, g)(x) = g(f(x))
fun (<<) compose(f, g)(x) = f(g(x))

fun (.) passTo(receiver, f)(...args) = f(receiver, ...args)

fun (|>.) call(receiver, f)(...args) = f.call(receiver, ...args)

fun pass1(f)(...xs) = f(xs.0)
fun pass2(f)(...xs) = f(xs.0, xs.1)
fun pass3(f)(...xs) = f(xs.0, xs.1, xs.2)


fun print(...xs) =
  console.log(...map(renderAsStr)(...xs))

fun printRaw(x) =
  console.log(render(x))

fun interleave(sep)(...args) =
  if args.length === 0 then [] else...
  let
    res = Array of args.length * 2 - 1
    len = args.length
    i = 0
  while i < len do
    let idx = i * 2
    set
      res.[idx] = args.[i]
      i += 1
    if i < len do set res.[idx + 1] = sep
  res

fun renderAsStr(arg) =
  if arg is Str then arg else render(arg)

fun render(arg) = if
  arg is
    undefined then "undefined"
    null      then "null"
    Array     then fold(+)("[", ...interleave(", ")(...map(render)(...arg)), "]")
    Str       then JSON.stringify(arg)
    Set       then fold(+)("Set{", ...interleave(", ")(...map(render)(...arg)), "}")
    Map       then fold(+)("Map{", ...interleave(", ")(...map(render)(...arg)), "}")
    Function  and
      let p = Object.getOwnPropertyDescriptor(arg, "prototype")
      (p is Object and p.("writable")) || (p is undefined) then
        "[function" + (if arg.name is
          "" then ""
          nme then " " + nme
        ) + "]"
    Object    then String(arg)
  let ts = arg.("toString") // not accessing as `arg.toString` to avoid the sanity check
  ts is undefined then "[" + typeof(arg) + "]"
  else ts.call(arg)

val assert = console.assert

fun (??) notImplemented(msg) = throw Error("Not implemented: " + msg)
fun (???) notImplementedError = throw Error("Not implemented")


fun tuple(...xs) = xs

fun tupleSlice(xs, i, j) =
  globalThis.Array.prototype.slice.call(xs, i, xs.length - j)

fun tupleGet(xs, i) =
  globalThis.Array.prototype.at.call(xs, i)

fun map(f)(...xs) = xs.map(pass1(f))

fun fold(f)(init, ...rest) =
  let
    i = 0
    len = rest.length
  while i < len do
    set
      init = f(init, rest.at(i))
      i += 1
  init

val foldl = fold

// fun foldr(f)(...rest, init) = // TODO allow this syntax
fun foldr(f)(first, ...rest) =
  let len = rest.length
  if len == 0 then first else...
  let
    i = len - 1
    init = rest.at(i)
  while i > 0 do
    set
      i -= 1
      init = f(rest.at(i), init)
  f(first, init)


fun stringStartsWith(string, prefix) = string.startsWith(prefix)

fun stringGet(string, i) = string.at(i)

fun stringDrop(string, n) = string.slice(n)


class MatchResult(captures)
class MatchFailure(errors)

fun unreachable = throw Error("unreachable")

fun checkArgs(functionName, expected, isUB, got) =
  if got < expected || isUB && got > expected do
    let name = if functionName.length > 0 then " '" + functionName + "'" else ""
    // throw globalThis.Error("Function" + name + " expected "
    //   + (if isUB then "" else "at least ")
    //   + expected
    //   + " argument(s) but got " + got)
    throw Error of fold(+) of
      "Function", name, " expected "
      if isUB then "" else "at least "
      expected, " argument"
      if expected === 1 then "" else "s"
      " but got ", got


module TraceLogger with
  mut val enabled = false
  mut val indentLvl = 0
  fun indent() =
    if enabled then
      let prev = indentLvl
      set indentLvl = prev + 1
      prev
    else ()
  fun resetIndent(n) =
    if enabled then
      set indentLvl = n
    else ()
  fun log(msg) =
    if enabled then
      console.log("| ".repeat(indentLvl) + msg.replaceAll("\n", "\n" + "  ".repeat(indentLvl)))
    else ()


class Test with
  print("Test")
  val y = 1

// Private definitions for algebraic effects

abstract class __Cont(next) with
  fun resume(value)

class __TailList(next)

class __ListWithTail(next, tail) with
  fun append(elem) =
    set tail.next = elem
    set tail = elem
fun __mkListWithTail() =
  let res = new __ListWithTail(null, null)
  set res.tail = res
  res

class __HandleBlock(contHead, lastHandlerCont, next, handler)

class __EffectSig(next, tail, handleBlockList, resumed, handler, handlerFun)
class __Return(value)

fun __appendInCont(eff, cont) =
  if eff.tail is __TailList then
    // do prepend instead
    if cont.next !== null do
      throw Error("unexpected handler continuation")
    set
      cont.next = eff.tail.next
      eff.tail.next = cont
  else
    set eff.tail.next = cont
  eff

fun __mkEffect(handler, handlerFun) =
  let res = new __EffectSig(null, null, __mkListWithTail(), false, handler, handlerFun)
  set res.tail = res
  res

fun __handleBlockImpl(cur, handler) =
  let handleBlock = new __HandleBlock(__TailList(null), null, null, handler)
  cur.handleBlockList.append(handleBlock)
  while cur is
    __EffectSig then
      let nxt = __handleEffect(cur)
      if cur === nxt then
        // handler not found, begin unwinding
        if handleBlock.lastHandlerCont === null then
          set cur.tail = handleBlock.contHead
        else
          set cur.tail = handleBlock.lastHandlerCont
        return cur
      else
        set cur = nxt
    else
      return cur

// return either new effect, final result or the same continuation if there is no handler
fun __handleEffect(cur) =
  // find the handle block corresponding to the current effect
  let prevBlock = cur.handleBlockList
  while prevBlock.next is __HandleBlock and prevBlock.next.handler !== cur.handler do
    set prevBlock = prevBlock.next

  // no matching handle block
  if prevBlock.next === null do
    return cur

  // the matching handle block
  let handleBlock = prevBlock.next

  // unlink the unrelated handle blocks, which is never null
  let origTailBlock = cur.handleBlockList.tail
  set
    prevBlock.next = null
    cur.handleBlockList.tail = prevBlock

  // handle the effect, where the handler continuation will be appended to handleBlock.contHead.next
  let savedNext = handleBlock.contHead.next
  set cur = cur.handlerFun(__resume(cur, handleBlock.contHead))
  if savedNext !== handleBlock.contHead.next do
    set handleBlock.contHead.next.next = savedNext
    // for the handle block at the bottom of the stack, this is used for unwinding
    // otherwise it is unused and it is fine to set it here as well
    if handleBlock.lastHandlerCont === null do
      set handleBlock.lastHandlerCont = handleBlock.contHead.next

  if cur is __EffectSig then
    // relink the unlinked handle blocks
    set
      cur.handleBlockList.tail.next = handleBlock
      cur.handleBlockList.tail = origTailBlock
    cur
  else
    // resume the unlinked handle blocks
    __resumeHandleBlocks(handleBlock, origTailBlock, cur)

fun __resume(cur, tail)(value) =
  if cur.resumed do
    throw Error("Multiple resumption")
  set cur.resumed = true

  let cont = cur.next
  while
    cont is __Cont do
      set value = cont.resume(value)
      if value is __EffectSig then
        if value.tail.next !== cont do
          if cont.next !== null and value.tail.next !== null do
            throw Error("Internal Error: unexpected continuation")
        // in tail call optimization, the continuation is not appended, we append it here
        if value.tail.next === null do
          // since it is a tail call, it is already completed so we append the continuation after it
          set value.tail.next = cont.next
        // we are returning to handler, which performs unwinding so tail is needed
        set value.tail = tail
        if cur.handleBlockList.next !== null do
          set
            value.handleBlockList.tail.next = cur.handleBlockList.next
            value.handleBlockList.tail = cur.handleBlockList.tail
        return value
      else
        set cont = cont.next

  // We're done with the head, now resume the handle blocks
  if cur.handleBlockList.next === null then
    value
  else
    set cur = __resumeHandleBlocks(cur.handleBlockList.next, cur.handleBlockList.tail, value)
    if cur is __EffectSig do
      set cur.tail = tail
    cur

// this does not set the tail when effect is raised during resumption
fun __resumeHandleBlocks(handleBlock, tailHandleBlock, value) =
  while
    handleBlock.contHead.next is __Cont then
      // resuming tailHandlerList or post handler continuations
      set value = handleBlock.contHead.next.resume(value)
      if value is __EffectSig then
        if value.tail.next !== handleBlock.contHead.next and value.tail.next !== null do
            throw Error("Internal Error: unexpected continuation during handle block resumption")
        // this checks when continuation resume results in tail call to effectful func
        // when a tail call happens, the continuation will not be appended so this will be null
        if value.tail.next !== handleBlock.contHead.next do
          // if this is a tail call that results in effect, the continuation is already completed
          // and should be removed
          set handleBlock.contHead.next = handleBlock.contHead.next.next
        set
          value.tail.next = null
          value.handleBlockList.tail.next = handleBlock
          value.handleBlockList.tail = tailHandleBlock
        return value
      else
        set handleBlock.contHead.next = handleBlock.contHead.next.next
    handleBlock.next is __HandleBlock then
      set handleBlock = handleBlock.next
    else
      return value

// stack safety
val __stackLimit = 0 // How deep the stack can go before heapifying the stack
val __stackDepth = 0 // Tracks the virtual + real stack depth
val __stackOffset = 0 // How much to offset __stackDepth by to get the true stack depth (i.e. the virtual depth)
val __stackHandler = null
abstract class __StackDelay with
  fun perform()

fun checkDepth() =
  if __stackDepth - __stackOffset >= __stackLimit && __stackHandler !== null then
    // this is a tail call to effectful function
    __stackHandler.perform()
  else
    ()

fun resetDepth(tmp, curDepth) =
  set __stackDepth = curDepth
  if curDepth < __stackOffset do
    set __stackOffset = curDepth
  tmp
