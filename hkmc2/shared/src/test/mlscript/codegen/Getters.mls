:js


:sjs
fun t = 42
//│ JS (unsanitized):
//│ let t; t = function t() { return 42 }; null


:expect 42
:sjs
t
//│ JS (unsanitized):
//│ let tmp; tmp = t(); tmp
//│ = 42


fun main() =
  let n = 0
  fun foo =
    print("ok")
    set n += 1
    n
  foo + foo

:expect 3
main()
//│ > ok
//│ > ok
//│ = 3


:sjs
fun test() =
  fun whoops =
    print("ok")
    42
  whoops + whoops
//│ JS (unsanitized):
//│ let test;
//│ test = function test() {
//│   let whoops, tmp1, tmp2;
//│   whoops = function whoops() {
//│     let tmp3;
//│     tmp3 = Predef.print("ok");
//│     return 42
//│   };
//│   tmp1 = whoops();
//│   tmp2 = whoops();
//│   return tmp1 + tmp2
//│ };
//│ null

test()
//│ > ok
//│ > ok
//│ = 84


:sjs
module T with
  fun t() = 1
  fun p = 2
  val a = t
  val b = this.t
  val c = p
  val d = this.p
//│ JS (unsanitized):
//│ let T1;
//│ T1 = class T {
//│   static {
//│     this.a = T.t;
//│     this.b = T.t;
//│     this.c = T.p;
//│     this.d = T.p;
//│   }
//│   static t() {
//│     return 1
//│   } 
//│   static get p() {
//│     return 2;
//│   }
//│   static toString() { return "T"; }
//│ };
//│ null


T.a
//│ = [function t]

T.b
//│ = [function t]

T.c
//│ = 2

T.d
//│ = 2


:sjs
module M with
  fun t = 0
//│ JS (unsanitized):
//│ let M1;
//│ M1 = class M {
//│   static {}
//│   static get t() {
//│     return 0;
//│   }
//│   static toString() { return "M"; }
//│ };
//│ null


:sjs
M.t
//│ JS (unsanitized):
//│ M1.t
//│ = 0


:sjs
fun test() =
  fun whoops = 42
  whoops
//│ JS (unsanitized):
//│ let test1;
//│ test1 = function test() {
//│   let whoops, tmp1;
//│   whoops = function whoops() {
//│     return 42
//│   };
//│   tmp1 = whoops();
//│   return tmp1
//│ };
//│ null


:re
globalThis.whoops
//│ ═══[RUNTIME ERROR] Error: Access to required field 'whoops' yielded 'undefined'


test()
//│ = 42


:re
globalThis.whoops
//│ ═══[RUNTIME ERROR] Error: Access to required field 'whoops' yielded 'undefined'


:sjs
fun bar() =
  fun baz() = 42
  baz
//│ JS (unsanitized):
//│ let bar; bar = function bar() { let baz; baz = function baz() { return 42 }; return baz }; null


:sjs
fun baz() =
  fun w = 1
  fun z = 2
  (x, y) => x + y + w + z
//│ JS (unsanitized):
//│ let baz;
//│ baz = function baz() {
//│   let w, z;
//│   w = function w() {
//│     return 1
//│   };
//│   z = function z() {
//│     return 2
//│   };
//│   return (x, y) => {
//│     let tmp1, tmp2, tmp3, tmp4;
//│     tmp1 = x + y;
//│     tmp2 = w();
//│     tmp3 = tmp1 + tmp2;
//│     tmp4 = z();
//│     return tmp3 + tmp4
//│   }
//│ };
//│ null


baz()(3, 4)
//│ = 10


:sjs
fun a() =
  fun b = 1
  fun c() =
    fun d = 2
    b + d
  c
//│ JS (unsanitized):
//│ let a;
//│ a = function a() {
//│   let b, c;
//│   b = function b() {
//│     return 1
//│   };
//│   c = function c() {
//│     let d, tmp2, tmp3;
//│     d = function d() {
//│       return 2
//│     };
//│     tmp2 = b();
//│     tmp3 = d();
//│     return tmp2 + tmp3
//│   };
//│   return c
//│ };
//│ null


a()()
//│ = 3


:sjs
fun b() =
  fun c = 1
  fun d() =
    fun c = 2
    c
  d
//│ JS (unsanitized):
//│ let b;
//│ b = function b() {
//│   let c, d;
//│   c = function c() {
//│     return 1
//│   };
//│   d = function d() {
//│     let c1, tmp3;
//│     c1 = function c() {
//│       return 2
//│     };
//│     tmp3 = c1();
//│     return tmp3
//│   };
//│   return d
//│ };
//│ null


b()()
//│ = 2


:sjs
fun c() =
  fun f = 1
  fun d =
    fun e = 1
    e + f
  d
//│ JS (unsanitized):
//│ let c;
//│ c = function c() {
//│   let d, f, tmp4;
//│   f = function f() {
//│     return 1
//│   };
//│   d = function d() {
//│     let e, tmp5, tmp6;
//│     e = function e() {
//│       return 1
//│     };
//│     tmp5 = e();
//│     tmp6 = f();
//│     return tmp5 + tmp6
//│   };
//│   tmp4 = d();
//│   return tmp4
//│ };
//│ null


c()
//│ = 2


:sjs
class Foo(x) with
  fun oops = x
//│ JS (unsanitized):
//│ let Foo1;
//│ Foo1 = function Foo(x1) { return new Foo.class(x1); };
//│ Foo1.class = class Foo {
//│   constructor(x) {
//│     this.x = x;
//│   }
//│   get oops() {
//│     return this.x;
//│   }
//│   toString() { return "Foo(" + globalThis.Predef.render(this.x) + ")"; }
//│ };
//│ null


fun foo(f) =
  f.oops


foo(Foo(42))
//│ = 42


fun foo(f) =
  f.oops

class Foo(x) with
  fun oops = x

foo(Foo(42))
//│ = 42

:re
foo(Foo(42))()
//│ ═══[RUNTIME ERROR] TypeError: tmp7 is not a function


